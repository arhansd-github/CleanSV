    [
    {
    "ctx": "id | name | email\n1 | John | john@example.com\n2 | Sarah | sarah@test.com\n3 | Mike | mike@demo.com",
    "inst": "Add 'active' column with default value True",
    "code": "df['active'] = True"
    },
    {
    "ctx": "product_id | name | price\n101 | Widget | 19.99\n102 | Gadget | 29.99\n103 | Tool | 14.99",
    "inst": "Round prices to nearest dollar",
    "code": "df['price'] = df['price'].round()"
    },
    {
    "ctx": "order_id | customer | items\n1001 | Alex | 3\n1002 | Jamie | 1\n1003 | Taylor | 5",
    "inst": "Add 'processed' column with default False",
    "code": "df['processed'] = False"
    },
    {
    "ctx": "employee_id | name | department\nE101 | John Smith | Sales\nE102 | Sarah Lee | Marketing\nE103 | Mike Brown | IT",
    "inst": "Extract first name from name column",
    "code": "df['first_name'] = df['name'].str.split().str[0]"
    },
    {
    "ctx": "date | location | temperature\n2024-06-01 | New York | 72.5\n2024-06-02 | Chicago | 68.3\n2024-06-03 | Los Angeles | 78.9",
    "inst": "Convert date to datetime format",
    "code": "df['date'] = pd.to_datetime(df['date'])"
    },
    {
    "ctx": "user_id | username | join_date\n1001 | john_doe | 2023-05-15\n1002 | sarah_k | 2024-01-10\n1003 | mike_b | 2022-11-30",
    "inst": "Add 'account_age_days' column",
    "code": "df['account_age_days'] = (pd.Timestamp.now() - pd.to_datetime(df['join_date'])).dt.days"
    },
    {
    "ctx": "transaction_id | amount | currency\nT1001 | 120.50 | USD\nT1002 | 85.75 | EUR\nT1003 | 210.00 | GBP",
    "inst": "Convert currency codes to uppercase",
    "code": "df['currency'] = df['currency'].str.upper()"
    },
    {
    "ctx": "student_id | test1 | test2\nS101 | 85 | 92\nS102 | 78 | 85\nS103 | 90 | 85",
    "inst": "Add 'passed' column (True if both tests > 80)",
    "code": "df['passed'] = (df['test1'] > 80) & (df['test2'] > 80)"
    },
    {
    "ctx": "product_id | name | price | category\n101 | Widget | 19.99 | A\n102 | Gadget | 29.99 | B\n103 | Tool | 14.99 | A",
    "inst": "Filter to show only products under $20",
    "code": "df = df[df['price'] < 20]"
    },
    {
    "ctx": "customer_id | name | email | phone\nC101 | John | john@test.com | 555-0101\nC102 | Sarah | sarah@test.com | 555-0202\nC103 | Mike | mike@test.com | 555-0303",
    "inst": "Remove phone column",
    "code": "df = df.drop(columns=['phone'])"
    },
    {
    "ctx": "employee_id | name | salary\nE101 | John | 75000\nE102 | Sarah | 82000\nE103 | Mike | 68000",
    "inst": "Add 'tax' column (30% of salary)",
    "code": "df['tax'] = df['salary'] * 0.30"
    },
    {
    "ctx": "order_id | customer | items\n1001 | Alex | 3\n1002 | Jamie | 1\n1003 | Taylor | 5",
    "inst": "Add 'shipping' column ($5 per item)",
    "code": "df['shipping'] = df['items'] * 5"
    },
    {
    "ctx": "date | product | sales\n2024-06-01 | Widget | 1200\n2024-06-02 | Gadget | 850\n2024-06-03 | Tool | 1500",
    "inst": "Sort by sales descending",
    "code": "df = df.sort_values('sales', ascending=False)"
    },
    {
    "ctx": "user_id | username | status\n1001 | john_doe | active\n1002 | sarah_k | inactive\n1003 | mike_b | active",
    "inst": "Change status to title case",
    "code": "df['status'] = df['status'].str.title()"
    },
    {
    "ctx": "product_id | name | price | stock\n101 | Widget | 19.99 | 45\n102 | Gadget | 29.99 | 12\n103 | Tool | 14.99 | 0",
    "inst": "Replace stock 0 with 'Out of Stock'",
    "code": "df.loc[df['stock'] == 0, 'stock'] = 'Out of Stock'"
    },
    {
    "ctx": "employee_id | first_name | last_name\nE101 | John | Smith\nE102 | Sarah | Lee\nE103 | Mike | Brown",
    "inst": "Create email column (first.last@company.com)",
    "code": "df['email'] = df['first_name'].str.lower() + '.' + df['last_name'].str.lower() + '@company.com'"
    },
    {
    "ctx": "order_id | customer | amount\n1001 | Alex | 45.99\n1002 | Jamie | 12.50\n1003 | Taylor | 87.25",
    "inst": "Add 'discount_applied' column (True if amount > 50)",
    "code": "df['discount_applied'] = df['amount'] > 50"
    },
    {
    "ctx": "student_id | name | grade\nS101 | Alice | 85\nS102 | Bob | 78\nS103 | Carol | 92",
    "inst": "Add 'passed' column (True if grade >= 80)",
    "code": "df['passed'] = df['grade'] >= 80"
    },
    {
    "ctx": "date | location | temperature\n2024-06-01 | New York | 72.5\n2024-06-02 | Chicago | 68.3\n2024-06-03 | Los Angeles | 78.9",
    "inst": "Filter to show only temperatures above 70",
    "code": "df = df[df['temperature'] > 70]"
    },
    {
    "ctx": "product_id | name | price\n101 | Widget | 19.99\n102 | Gadget | 29.99\n103 | Tool | 14.99",
    "inst": "Add 'price_category' column (Cheap <20, Medium <30, Expensive >=30)",
    "code": "df['price_category'] = pd.cut(df['price'], bins=[0,20,30,100], labels=['Cheap','Medium','Expensive'])"
    },
    {
    "ctx": "user_id | username | last_login\n1001 | john_doe | 2024-05-28\n1002 | sarah_k | 2024-05-15\n1003 | mike_b | 2024-03-10",
    "inst": "Add 'active_recently' column (True if login within 30 days)",
    "code": "df['active_recently'] = (pd.Timestamp.now() - pd.to_datetime(df['last_login'])).dt.days <= 30"
    },
    {
    "ctx": "transaction_id | amount | currency\nT1001 | 120.50 | USD\nT1002 | 85.75 | EUR\nT1003 | 210.00 | GBP",
    "inst": "Filter USD transactions only",
    "code": "df = df[df['currency'] == 'USD']"
    },
    {
    "ctx": "employee_id | name | department | salary\nE101 | John | Sales | 75000\nE102 | Sarah | Marketing | 82000\nE103 | Mike | IT | 68000",
    "inst": "Add 'department_code' column (first letter)",
    "code": "df['department_code'] = df['department'].str[0]"
    },
    {
    "ctx": "order_id | customer | items\n1001 | Alex | 3\n1002 | Jamie | 1\n1003 | Taylor | 5",
    "inst": "Add 'order_type' column (Single if items=1, Multiple otherwise)",
    "code": "df['order_type'] = df['items'].apply(lambda x: 'Single' if x == 1 else 'Multiple')"
    },
    {
    "ctx": "product_id | name | price | in_stock\n101 | Widget | 19.99 | True\n102 | Gadget | 29.99 | False\n103 | Tool | 14.99 | True",
    "inst": "Change price to 0 for out-of-stock items",
    "code": "df.loc[df['in_stock'] == False, 'price'] = 0"
    },
    {
    "ctx": "student_id | name | test1 | test2\nS101 | Alice | 85 | 92\nS102 | Bob | 78 | 85\nS103 | Carol | 90 | 85",
    "inst": "Add 'average_score' column",
    "code": "df['average_score'] = (df['test1'] + df['test2']) / 2"
    },
    {
    "ctx": "date | product | sales\n2024-06-01 | Widget | 1200\n2024-06-02 | Gadget | 850\n2024-06-03 | Tool | 1500",
    "inst": "Add 'day_of_week' column",
    "code": "df['day_of_week'] = pd.to_datetime(df['date']).dt.day_name()"
    },
    {
    "ctx": "user_id | username | status\n1001 | john_doe | active\n1002 | sarah_k | inactive\n1003 | mike_b | active",
    "inst": "Change inactive to suspended",
    "code": "df['status'] = df['status'].replace('inactive', 'suspended')"
    },
    {
    "ctx": "employee_id | name | salary\nE101 | John | 75000\nE102 | Sarah | 82000\nE103 | Mike | 68000",
    "inst": "Add 'salary_level' column (Low <70k, Medium <90k, High >=90k)",
    "code": "df['salary_level'] = pd.cut(df['salary'], bins=[0,70000,90000,1000000], labels=['Low','Medium','High'])"
    },
    {
    "ctx": "order_id | customer | amount\n1001 | Alex | 45.99\n1002 | Jamie | 12.50\n1003 | Taylor | 87.25",
    "inst": "Add 'rounded_amount' column (rounded to nearest 5)",
    "code": "df['rounded_amount'] = round(df['amount'] / 5) * 5"
    },
    {
    "ctx": "product_id | name | price | category\n101 | Widget | 19.99 | A\n102 | Gadget | 29.99 | B\n103 | Tool | 14.99 | A",
    "inst": "Add 'on_sale' column (True for category A)",
    "code": "df['on_sale'] = df['category'] == 'A'"
    },
    {
    "ctx": "customer_id | name | email | phone\nC101 | John | john@test.com | 555-0101\nC102 | Sarah | sarah@test.com | 555-0202\nC103 | Mike | mike@test.com | 555-0303",
    "inst": "Extract area code from phone",
    "code": "df['area_code'] = df['phone'].str[:3]"
    },
    {
    "ctx": "student_id | name | grade\nS101 | Alice | 85\nS102 | Bob | 78\nS103 | Carol | 92",
    "inst": "Add 'letter_grade' column (A >=90, B >=80, C >=70, F <70)",
    "code": "df['letter_grade'] = pd.cut(df['grade'], bins=[0,70,80,90,100], labels=['F','C','B','A'])"
    },
    {
    "ctx": "date | location | temperature\n2024-06-01 | New York | 72.5\n2024-06-02 | Chicago | 68.3\n2024-06-03 | Los Angeles | 78.9",
    "inst": "Add 'hot_day' column (True if temperature > 75)",
    "code": "df['hot_day'] = df['temperature'] > 75"
    },
    {
    "ctx": "user_id | username | join_date\n1001 | john_doe | 2023-05-15\n1002 | sarah_k | 2024-01-10\n1003 | mike_b | 2022-11-30",
    "inst": "Add 'membership_years' column",
    "code": "df['membership_years'] = (pd.Timestamp.now() - pd.to_datetime(df['join_date'])).dt.days // 365"
    },
    {
    "ctx": "transaction_id | amount | currency\nT1001 | 120.50 | USD\nT1002 | 85.75 | EUR\nT1003 | 210.00 | GBP",
    "inst": "Add 'large_transaction' column (True if amount > 100)",
    "code": "df['large_transaction'] = df['amount'] > 100"
    },
    {
    "ctx": "employee_id | name | department\nE101 | John Smith | Sales\nE102 | Sarah Lee | Marketing\nE103 | Mike Brown | IT",
    "inst": "Add 'email' column (first initial + last name @company.com)",
    "code": "df['email'] = df['name'].str[0] + df['name'].str.split().str[-1] + '@company.com'"
    },
    {
    "ctx": "order_id | customer | items\n1001 | Alex | 3\n1002 | Jamie | 1\n1003 | Taylor | 5",
    "inst": "Add 'free_shipping' column (True if items >= 5)",
    "code": "df['free_shipping'] = df['items'] >= 5"
    },
    {
        "ctx": "id | name | email | status\n1 | John | john@example.com | active\n2 | Sarah | sarah@test.com | inactive\n3 | Mike | mike@demo.com | active",
        "inst": "Delete inactive users",
        "code": "df = df[df['status'] == 'active']"
    },
    {
        "ctx": "product_id | name | price | stock\n101 | Widget | 19.99 | 45\n102 | Gadget | 29.99 | 0\n103 | Tool | 14.99 | 12",
        "inst": "Remove products with zero stock",
        "code": "df = df[df['stock'] > 0]"
    },
    {
        "ctx": "order_id | customer | items | total\n1001 | Alex | 3 | 45.99\n1002 | Jamie | 1 | 12.50\n1003 | Taylor | 5 | 87.25",
        "inst": "Add 10% tax column",
        "code": "df['tax'] = df['total'] * 0.10"
    },
    {
        "ctx": "employee_id | first_name | last_name | department\nE101 | John | Smith | Sales\nE102 | Sarah | Lee | Marketing\nE103 | Mike | Brown | IT",
        "inst": "Create full_name column",
        "code": "df['full_name'] = df['first_name'] + ' ' + df['last_name']"
    },
    {
        "ctx": "date | location | temperature\n2024-06-01 | New York | 72.5\n2024-06-01 | Chicago | 68.3\n2024-06-01 | Los Angeles | 78.9",
        "inst": "Convert temperature to Celsius",
        "code": "df['temp_c'] = (df['temperature'] - 32) * 5/9"
    },
    {
        "ctx": "user_id | username | join_date | premium\n1001 | john_doe | 2023-05-15 | True\n1002 | sarah_k | 2024-01-10 | False\n1003 | mike_b | 2022-11-30 | True",
        "inst": "Extract year from join_date",
        "code": "df['join_year'] = pd.to_datetime(df['join_date']).dt.year"
    },
    {
        "ctx": "transaction_id | amount | currency\nT1001 | 120.50 | USD\nT1002 | 85.75 | EUR\nT1003 | 210.00 | GBP",
        "inst": "Add USD equivalent column (assume 1 EUR=1.1 USD, 1 GBP=1.3 USD)",
        "code": "df['amount_usd'] = df.apply(lambda x: x['amount']*1.1 if x['currency']=='EUR' else x['amount']*1.3 if x['currency']=='GBP' else x['amount'], axis=1)"
    },
    {
        "ctx": "product_id | name | price | category\n101 | Widget | 19.99 | A\n102 | Gadget | 29.99 | B\n103 | Tool | 14.99 | A",
        "inst": "Apply 10% discount to category A products",
        "code": "df.loc[df['category'] == 'A', 'price'] = df['price'] * 0.9"
    },
    {
        "ctx": "customer_id | name | email | phone\nC101 | John | john@test.com | 555-0101\nC102 | Sarah | sarah@test.com | NULL\nC103 | Mike | mike@test.com | 555-0202",
        "inst": "Remove customers with missing phone numbers",
        "code": "df = df.dropna(subset=['phone'])"
    },
    {
        "ctx": "student_id | test1 | test2 | test3\nS101 | 85 | 92 | 88\nS102 | 78 | NULL | 82\nS103 | 90 | 85 | NULL",
        "inst": "Fill missing test scores with column averages",
        "code": "df = df.fillna(df.mean())"
    },
    {
        "ctx": "employee_id | name | salary | department\nE101 | John | 75000 | Sales\nE102 | Sarah | 82000 | Marketing\nE103 | Mike | 68000 | IT",
        "inst": "Add 5% raise column",
        "code": "df['new_salary'] = df['salary'] * 1.05"
    },
    {
        "ctx": "order_id | customer | items | total\n1001 | Alex | 3 | 45.99\n1002 | Jamie | 1 | 12.50\n1003 | Taylor | 5 | 87.25",
        "inst": "Add order_size column (Small if items<=2, Medium if <=5, Large otherwise)",
        "code": "df['order_size'] = pd.cut(df['items'], bins=[0,2,5,100], labels=['Small','Medium','Large'])"
    },
    {
        "ctx": "date | product | sales\n2024-06-01 | Widget | 1200\n2024-06-02 | Gadget | 850\n2024-06-03 | Tool | 1500",
        "inst": "Add day_of_week column",
        "code": "df['day_of_week'] = pd.to_datetime(df['date']).dt.day_name()"
    },
    {
        "ctx": "user_id | name | email | status\n101 | John | john@test.com | active\n102 | Sarah | sarah@test.com | inactive\n103 | Mike | mike@test.com | active",
        "inst": "Create is_active column (1 for active, 0 otherwise)",
        "code": "df['is_active'] = df['status'].apply(lambda x: 1 if x == 'active' else 0)"
    },
    {
        "ctx": "product_id | name | price | category\n101 | Widget | 19.99 | A\n102 | Gadget | 29.99 | B\n103 | Tool | 14.99 | A",
        "inst": "Rename 'price' column to 'usd_price'",
        "code": "df = df.rename(columns={'price': 'usd_price'})"
    },
    {
        "ctx": "employee_id | name | department | salary\nE101 | John Smith | Sales | 75000\nE102 | Sarah Lee | Marketing | 82000\nE103 | Mike Brown | IT | 68000",
        "inst": "Split name into first_name and last_name columns",
        "code": "df[['first_name', 'last_name']] = df['name'].str.split(' ', expand=True)"
    },
    {
        "ctx": "order_id | customer | items | total\n1001 | Alex | 3 | 45.99\n1002 | Jamie | 1 | 12.50\n1003 | Taylor | 5 | 87.25",
        "inst": "Add discount column (10% if total > 50)",
        "code": "df['discount'] = df['total'].apply(lambda x: x*0.1 if x > 50 else 0)"
    },
    {
        "ctx": "date | location | temperature\n2024-06-01 | New York | 72.5\n2024-06-01 | Chicago | 68.3\n2024-06-01 | Los Angeles | 78.9",
        "inst": "Add season column (Summer if month is Jun-Aug)",
        "code": "df['season'] = pd.to_datetime(df['date']).dt.month.apply(lambda x: 'Summer' if x in [6,7,8] else 'Other')"
    },
    {
        "ctx": "product_id | name | price | in_stock\n101 | Widget | 19.99 | True\n102 | Gadget | 29.99 | False\n103 | Tool | 14.99 | True",
        "inst": "Change price to 0 for out-of-stock items",
        "code": "df.loc[~df['in_stock'], 'price'] = 0"
    },
    {
        "ctx": "user_id | username | join_date | last_login\n1001 | john_doe | 2023-05-15 | 2024-05-28\n1002 | sarah_k | 2024-01-10 | 2024-05-15\n1003 | mike_b | 2022-11-30 | 2024-03-10",
        "inst": "Add days_since_login column",
        "code": "df['days_since_login'] = (pd.Timestamp.now() - pd.to_datetime(df['last_login'])).dt.days"
    },
    {
        "ctx": "transaction_id | amount | currency\nT1001 | 120.50 | USD\nT1002 | 85.75 | EUR\nT1003 | 210.00 | GBP",
        "inst": "Convert all amounts to USD and drop currency column",
        "code": "df['amount'] = df.apply(lambda x: x['amount']*1.1 if x['currency']=='EUR' else x['amount']*1.3 if x['currency']=='GBP' else x['amount'], axis=1)\ndf = df.drop(columns=['currency'])"
    },
    {
        "ctx": "student_id | test1 | test2 | test3\nS101 | 85 | 92 | 88\nS102 | 78 | 85 | 82\nS103 | 90 | 85 | 92",
        "inst": "Add best_test column with highest score",
        "code": "df['best_test'] = df[['test1','test2','test3']].max(axis=1)"
    },
    {
        "ctx": "employee_id | name | department | salary\nE101 | John | Sales | 75000\nE102 | Sarah | Marketing | 82000\nE103 | Mike | IT | 68000",
        "inst": "Add department_code column (first 3 letters uppercase)",
        "code": "df['department_code'] = df['department'].str[:3].str.upper()"
    },
    {
        "ctx": "order_id | customer | items | total\n1001 | Alex | 3 | 45.99\n1002 | Jamie | 1 | 12.50\n1003 | Taylor | 5 | 87.25",
        "inst": "Add shipping_cost column ($5 if items<=3, $8 otherwise)",
        "code": "df['shipping_cost'] = df['items'].apply(lambda x: 5 if x <= 3 else 8)"
    },
    {
        "ctx": "product_id | name | price | category\n101 | Widget | 19.99 | A\n102 | Gadget | 29.99 | B\n103 | Tool | 14.99 | A",
        "inst": "Filter to only show category A products",
        "code": "df = df[df['category'] == 'A']"
    },
    {
        "ctx": "date | product | sales\n2024-06-01 | Widget | 1200\n2024-06-02 | Gadget | 850\n2024-06-03 | Tool | 1500",
        "inst": "Add month column",
        "code": "df['month'] = pd.to_datetime(df['date']).dt.month"
    },
    {
        "ctx": "user_id | name | email | status\n101 | John | john@test.com | active\n102 | Sarah | sarah@test.com | inactive\n103 | Mike | mike@test.com | active",
        "inst": "Change status to uppercase",
        "code": "df['status'] = df['status'].str.upper()"
    },
    {
        "ctx": "employee_id | name | department | salary\nE101 | John | Sales | 75000\nE102 | Sarah | Marketing | 82000\nE103 | Mike | IT | 68000",
        "inst": "Add bonus column (10% of salary for Sales, 5% otherwise)",
        "code": "df['bonus'] = df.apply(lambda x: x['salary']*0.1 if x['department']=='Sales' else x['salary']*0.05, axis=1)"
    },
    {
        "ctx": "order_id | customer | items | total\n1001 | Alex | 3 | 45.99\n1002 | Jamie | 1 | 12.50\n1003 | Taylor | 5 | 87.25",
        "inst": "Add average_price_per_item column",
        "code": "df['avg_price_per_item'] = df['total'] / df['items']"
    },
    {
        "ctx": "product_id | name | price | discontinued\n101 | Widget | 19.99 | False\n102 | Gadget | 29.99 | True\n103 | Tool | 14.99 | False",
        "inst": "Remove discontinued products",
        "code": "df = df[~df['discontinued']]"
    },
    {
        "ctx": "event_id | event_name | attendees | capacity | ticket_price\nEV100 | Conference | 350 | 500 | 199.99\nEV101 | Workshop | 45 | 50 | 89.99\nEV102 | Concert | 12000 | 15000 | 149.99",
        "inst": "Calculate attendance percentage and total revenue potential",
        "code": "df['attendance_pct'] = (df['attendees'] / df['capacity']) * 100\ndf['potential_revenue'] = df['capacity'] * df['ticket_price']"
    },
    {
        "ctx": "sensor_id | location | reading | min_threshold | max_threshold\nSNS001 | Tank1 | 72.5 | 65.0 | 80.0\nSNS002 | Tank2 | 82.3 | 65.0 | 80.0\nSNS003 | Pipe1 | 68.1 | 60.0 | 75.0",
        "inst": "Flag readings outside thresholds and calculate deviation from ideal (midpoint)",
        "code": "df['is_alert'] = (df['reading'] < df['min_threshold']) | (df['reading'] > df['max_threshold'])\ndf['deviation'] = df['reading'] - ((df['min_threshold'] + df['max_threshold']) / 2)"
    },
    {
        "ctx": "course_id | title | students | pass_rate | avg_score\nCRS101 | Math101 | 45 | 82.5 | 73.2\nCRS102 | Eng201 | 32 | 91.0 | 85.7\nCRS103 | Bio301 | 28 | 75.0 | 68.9",
        "inst": "Calculate expected passes and flag courses with pass rate <80%",
        "code": "df['expected_passes'] = (df['students'] * df['pass_rate'] / 100).round()\ndf['needs_review'] = df['pass_rate'] < 80"
    },
    {
        "ctx": "container_id | weight_kg | volume_m3 | destination | priority\nCTN1001 | 1200 | 33.5 | Shanghai | High\nCTN1002 | 850 | 28.2 | Rotterdam | Medium\nCTN1003 | 1500 | 42.8 | Los Angeles | Urgent",
        "inst": "Calculate density and shipping cost ($50 base + $10/m3 + $2/kg)",
        "code": "df['density'] = df['weight_kg'] / df['volume_m3']\ndf['shipping_cost'] = 50 + (df['volume_m3'] * 10) + (df['weight_kg'] * 2)"
    },
    {
        "ctx": "experiment_id | trial | control_value | test_value | p_value\nEXP001 | 1 | 12.5 | 14.8 | 0.03\nEXP002 | 2 | 18.2 | 17.9 | 0.45\nEXP003 | 3 | 9.7 | 11.2 | 0.08",
        "inst": "Flag statistically significant results (p<0.05) and calculate lift %",
        "code": "df['is_significant'] = df['p_value'] < 0.05\ndf['lift_pct'] = ((df['test_value'] - df['control_value']) / df['control_value']) * 100"
    },
    {
        "ctx": "asset_id | name | purchase_date | purchase_price | current_value\nAST1001 | Crane | 2020-05-15 | 250000 | 180000\nAST1002 | Truck | 2022-03-10 | 85000 | 72000\nAST1003 | Computer | 2023-11-01 | 1500 | 900",
        "inst": "Calculate depreciation and annual depreciation rate",
        "code": "df['years_owned'] = (pd.Timestamp.now() - pd.to_datetime(df['purchase_date'])).dt.days / 365\ndf['depreciation_rate'] = ((df['purchase_price'] - df['current_value']) / df['purchase_price']) / df['years_owned'] * 100"
    },
    {
        "ctx": "api_call | response_time | success | retries | payload_size\nAPI001 | 320 | True | 0 | 1250\nAPI002 | 540 | False | 2 | 2800\nAPI003 | 210 | True | 1 | 850",
        "inst": "Calculate throughput (payload/time) and flag slow successful calls (>300ms)",
        "code": "df['throughput'] = df['payload_size'] / df['response_time']\ndf['slow_success'] = df['success'] & (df['response_time'] > 300)"
    },
    {
        "ctx": "investor_id | name | total_invested | current_value | risk_tolerance\nINV1001 | Smith | 250000 | 320000 | Moderate\nINV1002 | Lee | 180000 | 150000 | Aggressive\nINV1003 | Garcia | 500000 | 525000 | Conservative",
        "inst": "Calculate ROI and adjust for risk (Conservative -5%, Aggressive +5%)",
        "code": "df['roi'] = (df['current_value'] - df['total_invested']) / df['total_invested'] * 100\ndf['adjusted_roi'] = df.apply(lambda x: x['roi']*0.95 if x['risk_tolerance']=='Conservative' else x['roi']*1.05 if x['risk_tolerance']=='Aggressive' else x['roi'], axis=1)"
    },
    {
        "ctx": "network_id | device_count | data_transferred | uptime | alerts\nNET1001 | 45 | 1250.5 | 99.8 | 2\nNET1002 | 28 | 850.2 | 99.5 | 5\nNET1003 | 62 | 2100.7 | 99.9 | 1",
        "inst": "Calculate data per device and uptime minutes (assuming 30-day month)",
        "code": "df['data_per_device'] = df['data_transferred'] / df['device_count']\ndf['downtime_minutes'] = (100 - df['uptime']) * 43200 / 100"
    },
    {
        "ctx": "recipe_id | name | calories | protein | carbs | fat\nRCP1001 | Pasta | 650 | 25.2 | 85.1 | 22.5\nRCP1002 | Salad | 320 | 15.8 | 28.4 | 18.2\nRCP1003 | Soup | 420 | 18.5 | 45.3 | 15.7",
        "inst": "Calculate calories from macros (4cal/g protein+carbs, 9cal/g fat) and compare to listed",
        "code": "df['calculated_cals'] = (df['protein']*4) + (df['carbs']*4) + (df['fat']*9)\ndf['calorie_diff'] = df['calculated_cals'] - df['calories']"
    },
    {
        "ctx": "subscription_id | plan | start_date | monthly_cost | add_ons\nSUB1001 | Premium | 2023-05-15 | 29.99 | [backup,analytics]\nSUB1002 | Basic | 2024-01-10 | 9.99 | [backup]\nSUB1003 | Business | 2022-11-30 | 49.99 | []",
        "inst": "Calculate total months active and add $5 for each add-on",
        "code": "df['months_active'] = ((pd.Timestamp.now() - pd.to_datetime(df['start_date'])).dt.days / 30).round()\ndf['addon_count'] = df['add_ons'].str.count(',') + 1\ndf['adjusted_cost'] = df['monthly_cost'] + (df['addon_count'] * 5)"
    },
    {
        "ctx": "delivery_id | driver | distance_miles | time_min | packages\nDEL1001 | Smith | 12.5 | 28 | 5\nDEL1002 | Lee | 8.2 | 22 | 3\nDEL1003 | Garcia | 15.7 | 35 | 8",
        "inst": "Calculate speed and packages per hour, flag inefficient routes (<15mph with >5 packages)",
        "code": "df['speed_mph'] = df['distance_miles'] / (df['time_min'] / 60)\ndf['packages_per_hour'] = df['packages'] / (df['time_min'] / 60)\ndf['inefficient'] = (df['speed_mph'] < 15) & (df['packages'] > 5)"
    },
    {
        "ctx": "component_id | batch | test_result | min_spec | max_spec\nCMP1001 | B2024-05 | 12.53 | 12.00 | 13.00\nCMP1002 | B2024-06 | 11.89 | 12.00 | 13.00\nCMP1003 | B2024-04 | 13.15 | 12.00 | 13.00",
        "inst": "Flag out-of-spec components and calculate % deviation from midpoint",
        "code": "df['is_reject'] = (df['test_result'] < df['min_spec']) | (df['test_result'] > df['max_spec'])\ndf['deviation_pct'] = ((df['test_result'] - ((df['min_spec'] + df['max_spec'])/2)) / ((df['max_spec'] - df['min_spec'])/2)) * 100"
    },
    {
        "ctx": "game_id | title | players | avg_rating | price\nGM1001 | Adventure | 12500 | 4.5 | 29.99\nGM1002 | Puzzle | 8500 | 4.2 | 19.99\nGM1003 | Strategy | 21000 | 4.8 | 39.99",
        "inst": "Calculate revenue and player satisfaction score (players * rating / price)",
        "code": "df['revenue'] = df['players'] * df['price']\ndf['satisfaction_score'] = (df['players'] * df['avg_rating']) / df['price']"
    },
    {
        "ctx": "circuit_id | voltage | current | resistance | temperature\nCCT1001 | 120.5 | 10.2 | 11.8 | 45.2\nCCT1002 | 220.0 | 5.8 | 37.9 | 52.1\nCCT1003 | 110.0 | 15.3 | 7.2 | 62.8",
        "inst": "Calculate power (V*I) and flag overheating (>60C) or high power (>1500W)",
        "code": "df['power_watts'] = df['voltage'] * df['current']\ndf['needs_check'] = (df['temperature'] > 60) | (df['power_watts'] > 1500)"
    },
    {
        "ctx": "research_id | sample_size | control_mean | treatment_mean | std_dev\nRES001 | 100 | 12.5 | 14.8 | 2.1\nRES002 | 150 | 18.2 | 17.9 | 3.5\nRES003 | 80 | 9.7 | 11.2 | 1.8",
        "inst": "Calculate effect size and standard error",
        "code": "df['effect_size'] = (df['treatment_mean'] - df['control_mean']) / df['std_dev']\ndf['std_error'] = df['std_dev'] / np.sqrt(df['sample_size'])"
    },
    {
        "ctx": "vessel_id | type | capacity | current_load | destination\nVSL1001 | Tanker | 50000 | 42000 | Shanghai\nVSL1002 | Container | 25000 | 18500 | Rotterdam\nVSL1003 | Bulk | 75000 | 75000 | Los Angeles",
        "inst": "Calculate utilization and flag overcapacity or empty legs (return trips)",
        "code": "df['utilization'] = (df['current_load'] / df['capacity']) * 100\ndf['is_overloaded'] = df['current_load'] > df['capacity']\ndf['is_empty_return'] = df['destination'].str.contains('Return') & (df['current_load'] == 0)"
    },
    {
        "ctx": "microbe_id | strain | growth_rate | temp_c | ph\nMCB1001 | A-12 | 0.45 | 37.0 | 7.2\nMCB1002 | B-7 | 0.38 | 28.5 | 6.8\nMCB1003 | C-3 | 0.52 | 42.0 | 7.5",
        "inst": "Flag optimal conditions (37±2C, pH 7.0±0.3) and calculate growth score (rate * 100)",
        "code": "df['is_optimal'] = (df['temp_c'].between(35,39)) & (df['ph'].between(6.7,7.3))\ndf['growth_score'] = df['growth_rate'] * 100"
    },
    {
        "ctx": "block_id | transactions | gas_used | gas_limit | timestamp\nBLK1001 | 215 | 12500000 | 15000000 | 2024-05-01 08:12:33\nBLK1002 | 187 | 11000000 | 15000000 | 2024-05-01 08:15:47\nBLK1003 | 245 | 14800000 | 15000000 | 2024-05-01 08:20:12",
        "inst": "Calculate gas utilization and transactions per gas unit",
        "code": "df['gas_utilization'] = (df['gas_used'] / df['gas_limit']) * 100\ndf['tx_per_gas'] = df['transactions'] / df['gas_used']"
    },
    {
        "ctx": "camera_id | location | shots_today | shots_total | last_maintenance\nCAM1001 | StudioA | 1250 | 125000 | 2024-04-15\nCAM1002 | StudioB | 850 | 98750 | 2024-05-20\nCAM1003 | Outdoor | 2100 | 210000 | 2023-12-10",
        "inst": "Calculate shots since maintenance and flag for service (>50k shots or >6 months)",
        "code": "df['shots_since_maint'] = df['shots_total'] - df.groupby('camera_id')['shots_total'].shift(1)\ndf['needs_service'] = (df['shots_since_maint'] > 50000) | ((pd.Timestamp.now() - pd.to_datetime(df['last_maintenance'])).dt.days > 180)"
    },
    {
        "ctx": "gene_id | sequence | length | gc_content | expressed\nG1001 | ATGCTAGCT | 9 | 44.4 | True\nG1002 | GGCATAGCC | 9 | 66.7 | False\nG1003 | TATATATA | 8 | 0.0 | True",
        "inst": "Flag low GC content (<30%) in expressed genes and calculate AT/GC ratio",
        "code": "df['at_content'] = 100 - df['gc_content']\ndf['at_gc_ratio'] = df['at_content'] / df['gc_content']\ndf['low_gc_expressed'] = (df['gc_content'] < 30) & df['expressed']"
    },
    {
        "ctx": "satellite_id | altitude_km | inclination | signal_strength | last_contact\nSAT1001 | 550 | 45.2 | 85.5 | 2024-06-01 08:00\nSAT1002 | 1200 | 28.7 | 92.1 | 2024-06-01 08:15\nSAT1003 | 780 | 35.0 | 78.9 | 2024-05-31 22:00",
        "inst": "Calculate orbital period (minutes) and flag weak signals (<80) with no contact >12h",
        "code": "df['orbital_period'] = 2 * np.pi * np.sqrt((df['altitude_km']+6371)**3 / 398600) / 60\ndf['needs_check'] = (df['signal_strength'] < 80) & ((pd.Timestamp.now() - pd.to_datetime(df['last_contact'])).dt.total_seconds() > 43200)"
    },
    {
    "ctx": "invoice_id | customer | amount | tax_rate | due_date\nINV001 | Acme Corp | 1200.00 | 0.08 | 2024-06-15\nINV002 | Globex | 850.50 | 0.06 | 2024-06-20\nINV003 | Soylent | 4200.75 | 0.10 | 2024-06-10",
    "inst": "Calculate total amount with tax and flag overdue invoices",
    "code": "df['total_with_tax'] = df['amount'] * (1 + df['tax_rate'])\ndf['is_overdue'] = pd.to_datetime(df['due_date']) < pd.Timestamp.today()"
    },
    {
    "ctx": "log_id | timestamp | user | action | response_time_ms\nLOG001 | 2024-05-01 08:12:33 | u1001 | login | 120\nLOG002 | 2024-05-01 08:15:47 | u1002 | search | 350\nLOG003 | 2024-05-01 08:20:12 | u1003 | checkout | 890",
    "inst": "Extract hour from timestamp and flag slow responses (>500ms)",
    "code": "df['hour'] = pd.to_datetime(df['timestamp']).dt.hour\ndf['is_slow'] = df['response_time_ms'] > 500"
    },
    {
    "ctx": "sku | description | category | current_stock | reorder_level\nSKU100 | Widget A | Hardware | 45 | 50\nSKU101 | Gizmo B | Electronics | 12 | 25\nSKU102 | Tool C | Hardware | 60 | 40",
    "inst": "Calculate stock deficit and flag items needing reorder",
    "code": "df['deficit'] = df['reorder_level'] - df['current_stock']\ndf['needs_reorder'] = df['current_stock'] < df['reorder_level']"
    },
    {
    "ctx": "ticket_id | created_at | priority | status | assigned_to\nT1001 | 2024-05-28 09:15 | High | Open | TeamA\nT1002 | 2024-05-30 14:30 | Medium | In Progress | TeamB\nT1003 | 2024-06-01 11:45 | Low | Pending | TeamA",
    "inst": "Calculate ticket age in days and escalate High priority > 3 days",
    "code": "df['age_days'] = (pd.Timestamp.now() - pd.to_datetime(df['created_at'])).dt.days\ndf['needs_escalation'] = (df['priority'] == 'High') & (df['age_days'] > 3)"
    },
    {
    "ctx": "campaign_id | name | start_date | end_date | budget | spent\nC100 | Summer Sale | 2024-06-01 | 2024-06-30 | 10000 | 4200\nC101 | Spring Clearance | 2024-05-01 | 2024-05-31 | 8000 | 8000\nC102 | Holiday Special | 2024-12-01 | 2024-12-31 | 15000 | 0",
    "inst": "Calculate days remaining and budget utilization percentage",
    "code": "df['days_remaining'] = (pd.to_datetime(df['end_date']) - pd.Timestamp.now()).dt.days\ndf['utilization'] = (df['spent'] / df['budget']) * 100"
    },
    {
    "ctx": "employee_id | name | department | salary | start_date\nE1001 | John Smith | Sales | 75000 | 2021-03-15\nE1002 | Sarah Lee | Marketing | 82000 | 2022-07-22\nE1003 | Mike Brown | IT | 68000 | 2020-11-30",
    "inst": "Calculate tenure in years and give 3% raise to tenure >3 years",
    "code": "df['tenure_years'] = (pd.Timestamp.now() - pd.to_datetime(df['start_date'])).dt.days / 365\ndf['new_salary'] = df.apply(lambda x: x['salary']*1.03 if x['tenure_years']>3 else x['salary'], axis=1)"
    },
    {
    "ctx": "product_id | name | cost | price | discount_group\nP1001 | Widget A | 10.00 | 19.99 | A\nP1002 | Gadget B | 15.50 | 29.99 | B\nP1003 | Tool C | 8.75 | 14.99 | A",
    "inst": "Apply tiered discounts: 10% for group A, 15% for group B",
    "code": "df['final_price'] = df.apply(lambda x: x['price']*0.9 if x['discount_group']=='A' else x['price']*0.85, axis=1)"
    },
    {
    "ctx": "student_id | name | grade | attendance | behavior_score\nS1001 | Alice | 85 | 92 | 88\nS1002 | Bob | 78 | 85 | 90\nS1003 | Carol | 92 | 98 | 95",
    "inst": "Calculate overall score (60% grade, 20% attendance, 20% behavior)",
    "code": "df['overall'] = df['grade']*0.6 + df['attendance']*0.2 + df['behavior_score']*0.2"
    },
    {
    "ctx": "device_id | type | last_maintenance | hours_used | status\nD1001 | Printer | 2024-04-15 | 1200 | Active\nD1002 | Scanner | 2024-05-20 | 800 | Active\nD1003 | Server | 2023-12-10 | 5000 | Warning",
    "inst": "Flag devices needing maintenance (>1000 hours or >6 months since last)",
    "code": "df['needs_maintenance'] = (df['hours_used'] > 1000) | ((pd.Timestamp.now() - pd.to_datetime(df['last_maintenance'])).dt.days > 180)"
    },
    {
    "ctx": "transaction_id | customer_id | items | subtotal | tax | tip\nT1001 | C105 | 3 | 45.99 | 3.68 | 5.00\nT1002 | C108 | 2 | 32.50 | 2.60 | 0.00\nT1003 | C110 | 5 | 87.25 | 6.98 | 10.00",
    "inst": "Calculate total amount and tip percentage (if tip exists)",
    "code": "df['total'] = df['subtotal'] + df['tax'] + df['tip']\ndf['tip_pct'] = (df['tip'] / df['subtotal']) * 100"
    },
    {
    "ctx": "property_id | address | bedrooms | bathrooms | sq_ft | year_built | price\nP1001 | 123 Main St | 3 | 2 | 1800 | 1995 | 350000\nP1002 | 456 Oak Ave | 4 | 3 | 2400 | 2010 | 475000\nP1003 | 789 Pine Rd | 2 | 1 | 1200 | 1980 | 275000",
    "inst": "Calculate property age and price per sqft, flag older than 30 years",
    "code": "df['age'] = pd.Timestamp.now().year - df['year_built']\ndf['price_sqft'] = df['price'] / df['sq_ft']\ndf['is_old'] = df['age'] > 30"
    },
    {
    "ctx": "employee_id | name | department | salary | vacation_days | sick_days\nE1001 | John Smith | Sales | 75000 | 10 | 3\nE1002 | Sarah Lee | Marketing | 82000 | 15 | 1\nE1003 | Mike Brown | IT | 68000 | 5 | 0",
    "inst": "Calculate total PTO and flag employees with <7 days combined",
    "code": "df['total_pto'] = df['vacation_days'] + df['sick_days']\ndf['low_pto'] = df['total_pto'] < 7"
    },
    {
    "ctx": "order_id | customer | items | order_date | ship_date | status\nO1001 | Acme | 3 | 2024-05-28 | 2024-05-30 | Shipped\nO1002 | Globex | 2 | 2024-06-01 | NULL | Processing\nO1003 | Soylent | 5 | 2024-05-30 | 2024-06-02 | Shipped",
    "inst": "Calculate processing time and flag delayed shipments (>3 days)",
    "code": "df['processing_days'] = (pd.to_datetime(df['ship_date']) - pd.to_datetime(df['order_date'])).dt.days\ndf['is_delayed'] = df['processing_days'] > 3"
    },
    {
    "ctx": "patient_id | name | age | gender | blood_pressure | cholesterol\nP1001 | Alice | 35 | F | 120/80 | 180\nP1002 | Bob | 52 | M | 140/90 | 220\nP1003 | Carol | 28 | F | 110/70 | 160",
    "inst": "Flag patients with hypertension (>130/80) or high cholesterol (>200)",
    "code": "df['systolic'] = df['blood_pressure'].str.split('/').str[0].astype(int)\ndf['has_hypertension'] = (df['systolic'] > 130) | (df['cholesterol'] > 200)"
    },
    {
    "ctx": "product_id | name | category | current_price | cost | discontinued\nP1001 | Widget A | Hardware | 19.99 | 10.50 | False\nP1002 | Gizmo B | Electronics | 49.99 | 25.00 | False\nP1003 | Tool C | Hardware | 14.99 | 12.00 | True",
    "inst": "Calculate profit margin and flag low-margin active products (<30%)",
    "code": "df['margin'] = ((df['current_price'] - df['cost']) / df['current_price']) * 100\ndf['low_margin'] = (df['margin'] < 30) & (~df['discontinued'])"
    },
    {
    "ctx": "website | visitors | conversions | revenue | bounce_rate\nSiteA | 10000 | 500 | 12500 | 42.5\nSiteB | 8500 | 425 | 10625 | 38.1\nSiteC | 12000 | 360 | 9000 | 47.3",
    "inst": "Calculate conversion rate and revenue per visitor",
    "code": "df['conversion_rate'] = (df['conversions'] / df['visitors']) * 100\ndf['rpm'] = (df['revenue'] / df['visitors']) * 1000"
    },
    {
    "ctx": "city | population | area_sq_miles | police | hospitals\nNew York | 8800000 | 302.6 | 36000 | 62\nChicago | 2700000 | 234.0 | 13000 | 35\nLos Angeles | 3900000 | 468.7 | 10000 | 93",
    "inst": "Calculate officers per 1000 residents and hospitals per 100 sq miles",
    "code": "df['officers_per_1000'] = (df['police'] / df['population']) * 1000\ndf['hospitals_per_100sqmi'] = (df['hospitals'] / df['area_sq_miles']) * 100"
    },
    {
    "ctx": "employee_id | name | department | base_salary | bonus | commission\nE1001 | John | Sales | 50000 | 5000 | 12000\nE1002 | Sarah | Marketing | 60000 | 7500 | 0\nE1003 | Mike | Sales | 55000 | 4000 | 8500",
    "inst": "Calculate total compensation and tax (30% on base, 40% on bonus/commission)",
    "code": "df['total_comp'] = df['base_salary'] + df['bonus'] + df['commission']\ndf['tax'] = df['base_salary']*0.3 + (df['bonus']+df['commission'])*0.4"
    },
    {
    "ctx": "flight_id | origin | destination | distance_miles | duration_min | delay_min\nFL100 | JFK | LAX | 2475 | 320 | 15\nFL101 | ORD | SFO | 1846 | 265 | 0\nFL102 | BOS | MIA | 1257 | 180 | 45",
    "inst": "Calculate speed (mph) and flag long delays (>30 min)",
    "code": "df['speed_mph'] = df['distance_miles'] / (df['duration_min'] / 60)\ndf['is_delayed'] = df['delay_min'] > 30"
    },
    {
    "ctx": "product_id | name | category | units_sold | unit_cost | unit_price\nP1001 | Widget A | Hardware | 1200 | 10.50 | 19.99\nP1002 | Gizmo B | Electronics | 850 | 25.00 | 49.99\nP1003 | Tool C | Hardware | 420 | 12.00 | 14.99",
    "inst": "Calculate total profit and profit margin percentage",
    "code": "df['total_profit'] = (df['unit_price'] - df['unit_cost']) * df['units_sold']\ndf['profit_margin'] = ((df['unit_price'] - df['unit_cost']) / df['unit_price']) * 100"
    },
    {
    "ctx": "customer_id | name | signup_date | last_purchase | total_spent | emails_opened\nC1001 | Acme | 2022-05-15 | 2024-05-28 | 12500 | 12\nC1002 | Globex | 2023-01-10 | 2024-04-15 | 8500 | 8\nC1003 | Soylent | 2024-02-01 | 2024-06-02 | 4200 | 3",
    "inst": "Calculate days since last purchase and engagement score (spent * opens)",
    "code": "df['days_inactive'] = (pd.Timestamp.now() - pd.to_datetime(df['last_purchase'])).dt.days\ndf['engagement'] = df['total_spent'] * df['emails_opened']"
    },
    {
    "ctx": "server_id | hostname | cpu_usage | memory_usage | disk_usage | last_reboot\nSRV001 | web01 | 65.2 | 78.5 | 45.2 | 2024-05-15\nSRV002 | db01 | 82.1 | 92.3 | 68.7 | 2024-06-01\nSRV003 | app01 | 45.8 | 65.4 | 52.1 | 2024-05-28",
    "inst": "Flag critical servers (any usage >90%) and days since reboot",
    "code": "df['is_critical'] = (df['cpu_usage']>90)|(df['memory_usage']>90)|(df['disk_usage']>90)\ndf['days_since_reboot'] = (pd.Timestamp.now() - pd.to_datetime(df['last_reboot'])).dt.days"
    },
    {
    "ctx": "loan_id | customer | amount | term_months | interest_rate | risk_score\nL1001 | John | 25000 | 36 | 5.5 | 650\nL1002 | Sarah | 18000 | 24 | 4.8 | 720\nL1003 | Mike | 35000 | 60 | 7.2 | 580",
    "inst": "Calculate monthly payment and flag high-risk loans (score<600)",
    "code": "df['monthly_payment'] = (df['amount'] * (df['interest_rate']/100/12)) / (1 - (1 + (df['interest_rate']/100/12))**(-df['term_months']))\ndf['is_high_risk'] = df['risk_score'] < 600"
    },
    {
    "ctx": "ad_id | campaign | impressions | clicks | spend | conversions\nAD001 | Summer | 100000 | 1200 | 500.00 | 85\nAD002 | BackToSchool | 85000 | 950 | 425.00 | 62\nAD003 | Holiday | 120000 | 1500 | 600.00 | 110",
    "inst": "Calculate CTR, CPC, and conversion cost",
    "code": "df['ctr'] = (df['clicks'] / df['impressions']) * 100\ndf['cpc'] = df['spend'] / df['clicks']\ndf['cost_per_conversion'] = df['spend'] / df['conversions']"
    },
    {
    "ctx": "policy_id | customer | premium | deductible | claims_last_year | credit_score\nPOL1001 | Acme | 1200.00 | 1000 | 2 | 720\nPOL1002 | Globex | 850.50 | 500 | 0 | 780\nPOL1003 | Soylent | 1500.75 | 2000 | 5 | 650",
    "inst": "Calculate risk adjustment (10% for claims>3 or score<650)",
    "code": "df['adjusted_premium'] = df.apply(lambda x: x['premium']*1.1 if (x['claims_last_year']>3) or (x['credit_score']<650) else x['premium'], axis=1)"
    },
    {
    "ctx": "vehicle_id | make | model | year | mileage | last_service\nV1001 | Toyota | Camry | 2020 | 45000 | 2024-03-15\nV1002 | Ford | F-150 | 2022 | 22000 | 2024-05-20\nV1003 | Honda | Civic | 2019 | 68000 | 2023-12-10",
    "inst": "Calculate miles since last service and flag for maintenance (>7500 miles)",
    "code": "df['miles_since_service'] = df['mileage'] - df.groupby('vehicle_id')['mileage'].shift(1)\ndf['needs_service'] = df['miles_since_service'] > 7500"
    },
    {
    "ctx": "sensor_id | location | temp_f | humidity | pressure | timestamp\nSNS001 | RoomA | 72.5 | 45.2 | 1013.2 | 2024-06-01 08:00\nSNS002 | RoomB | 68.3 | 52.1 | 1012.8 | 2024-06-01 08:00\nSNS003 | Outside | 82.7 | 65.4 | 1011.5 | 2024-06-01 08:00",
    "inst": "Convert temperature to Celsius and flag uncomfortable humidity (>60%)",
    "code": "df['temp_c'] = (df['temp_f'] - 32) * 5/9\ndf['uncomfortable'] = df['humidity'] > 60"
    },
    {
    "ctx": "transaction_id | customer_id | amount | currency | exchange_rate\nT1001 | C105 | 120.50 | EUR | 1.08\nT1002 | C108 | 85.75 | GBP | 1.27\nT1003 | C110 | 210.00 | JPY | 0.007",
    "inst": "Convert all amounts to USD and flag large transactions (>$100 USD)",
    "code": "df['amount_usd'] = df.apply(lambda x: x['amount']*x['exchange_rate'] if x['currency']!='USD' else x['amount'], axis=1)\ndf['is_large'] = df['amount_usd'] > 100"
    },
    {
    "ctx": "employee_id | name | department | hours_worked | hourly_rate | overtime_hours\nE1001 | John | Sales | 40 | 25.00 | 5\nE1002 | Sarah | Marketing | 35 | 30.00 | 0\nE1003 | Mike | IT | 45 | 28.00 | 10",
    "inst": "Calculate weekly pay with time-and-half for overtime",
    "code": "df['weekly_pay'] = (df['hours_worked'] * df['hourly_rate']) + (df['overtime_hours'] * df['hourly_rate'] * 1.5)"
    },
    {
    "ctx": "patient_id | name | age | weight_kg | height_cm | blood_type\nPT1001 | Alice | 35 | 72 | 175 | A+\nPT1002 | Bob | 52 | 85 | 182 | B-\nPT1003 | Carol | 28 | 58 | 163 | O+",
    "inst": "Calculate BMI and categorize (Underweight<18.5, Normal<25, Overweight<30, Obese≥30)",
    "code": "df['bmi'] = df['weight_kg'] / ((df['height_cm']/100) ** 2)\ndf['bmi_category'] = pd.cut(df['bmi'], bins=[0,18.5,25,30,100], labels=['Underweight','Normal','Overweight','Obese'])"
    },
    {
    "ctx": "product_id | name | category | current_price | previous_price | stock_alert\nP1001 | Widget A | Hardware | 19.99 | 24.99 | True\nP1002 | Gizmo B | Electronics | 49.99 | 49.99 | False\nP1003 | Tool C | Hardware | 14.99 | 19.99 | True",
    "inst": "Calculate price change and apply 10% discount to stock alert items",
    "code": "df['price_change'] = df['current_price'] - df['previous_price']\ndf['discounted_price'] = df.apply(lambda x: x['current_price']*0.9 if x['stock_alert'] else x['current_price'], axis=1)"
    },
    {
    "ctx": "website | page | load_time | bounce_rate | conversions\nSiteA | Home | 2.5 | 42.5 | 85\nSiteB | Product | 3.8 | 38.1 | 120\nSiteC | Checkout | 5.2 | 25.4 | 95",
    "inst": "Calculate conversion rate per 1000 visitors and flag slow pages (>4s)",
    "code": "df['conversion_per_1k'] = (df['conversions'] / (100 - df['bounce_rate'])) * 1000\ndf['is_slow'] = df['load_time'] > 4"
    },
    {
        "ctx": "flight_id | departure | arrival | airline | passengers | delayed\nFL100 | 2024-06-01 08:00 | 2024-06-01 11:00 | Delta | 180 | False\nFL101 | 2024-06-01 09:30 | 2024-06-01 14:15 | United | 210 | True\nFL102 | 2024-06-01 11:45 | 2024-06-01 15:30 | American | 195 | False",
        "inst": "Calculate flight duration in hours and add as new column",
        "code": "df['duration_hours'] = (pd.to_datetime(df['arrival']) - pd.to_datetime(df['departure'])).dt.total_seconds() / 3600"
    },
    {
        "ctx": "store_id | product | jan_sales | feb_sales | mar_sales\nS001 | WidgetA | 1200 | 1500 | 1800\nS002 | WidgetB | 800 | 950 | 1100\nS003 | WidgetC | 2000 | 1850 | 2100",
        "inst": "Calculate quarterly sales by summing monthly columns",
        "code": "df['q1_sales'] = df[['jan_sales','feb_sales','mar_sales']].sum(axis=1)"
    },
    {
        "ctx": "user_id | signup_date | last_login | premium | credit_score\nu1001 | 2023-05-15 | 2024-05-28 | True | 720\nu1002 | 2024-01-10 | 2024-05-15 | False | 650\nu1003 | 2022-11-30 | 2024-03-10 | True | 780",
        "inst": "Calculate days since last login and flag inactive (>90 days) users",
        "code": "df['days_inactive'] = (pd.Timestamp.today() - pd.to_datetime(df['last_login'])).dt.days\ndf['is_inactive'] = df['days_inactive'] > 90"
    },
    {
        "ctx": "transaction_id | customer_id | product_id | quantity | unit_price | discount\nTX1001 | C105 | P22 | 3 | 29.99 | 0.1\nTX1002 | C108 | P15 | 1 | 89.99 | 0.0\nTX1003 | C105 | P37 | 2 | 14.99 | 0.15",
        "inst": "Calculate total price after discount for each transaction",
        "code": "df['total_price'] = df['quantity'] * df['unit_price'] * (1 - df['discount'])"
    },
    {
        "ctx": "patient_id | age | gender | height_cm | weight_kg | blood_type\nPT1001 | 35 | M | 175 | 72 | A+\nPT1002 | 42 | F | 163 | 58 | B-\nPT1003 | 28 | M | 182 | 85 | O+",
        "inst": "Calculate BMI and add obesity flag (BMI >= 30)",
        "code": "df['bmi'] = df['weight_kg'] / (df['height_cm']/100)**2\ndf['is_obese'] = df['bmi'] >= 30"
    },
    {
        "ctx": "property_id | address | bedrooms | bathrooms | sq_ft | price\nPROP001 | 123 Main St | 3 | 2 | 1800 | 350000\nPROP002 | 456 Oak Ave | 4 | 3 | 2400 | 475000\nPROP003 | 789 Pine Rd | 2 | 1 | 1200 | 275000",
        "inst": "Calculate price per square foot and flag properties under $200/sq_ft",
        "code": "df['price_per_sqft'] = df['price'] / df['sq_ft']\ndf['is_bargain'] = df['price_per_sqft'] < 200"
    },
    {
        "ctx": "employee_id | first_name | last_name | department | salary | years_service\nE101 | John | Smith | Sales | 75000 | 5\nE102 | Sarah | Johnson | Marketing | 82000 | 3\nE103 | Michael | Brown | IT | 68000 | 7",
        "inst": "Create full_name column and calculate bonus (5% salary per service year)",
        "code": "df['full_name'] = df['first_name'] + ' ' + df['last_name']\ndf['bonus'] = df['salary'] * 0.05 * df['years_service']"
    },
    {
        "ctx": "order_id | customer_id | order_date | ship_date | items | total\nORD1001 | C105 | 2024-05-01 | 2024-05-03 | 3 | 89.97\nORD1002 | C108 | 2024-05-02 | NULL | 5 | 152.50\nORD1003 | C110 | 2024-05-02 | 2024-05-04 | 2 | 45.98",
        "inst": "Calculate processing time (ship_date - order_date) and flag unshipped orders",
        "code": "df['processing_days'] = (pd.to_datetime(df['ship_date']) - pd.to_datetime(df['order_date'])).dt.days\ndf['needs_shipment'] = df['ship_date'].isnull()"
    },
    {
        "ctx": "student_id | math | science | history | english | attendance\nS1001 | 85 | 92 | 88 | 90 | 95\nS1002 | 78 | 85 | 82 | 88 | 87\nS1003 | 90 | 94 | 85 | 92 | 91",
        "inst": "Calculate overall grade (weighted 70% academics, 30% attendance)",
        "code": "df['academic_avg'] = df[['math','science','history','english']].mean(axis=1)\ndf['overall_grade'] = df['academic_avg']*0.7 + df['attendance']*0.3"
    },
    {
        "ctx": "date | location | max_temp | min_temp | precipitation | wind_speed\n2024-06-01 | New York | 72.5 | 62.3 | 0.0 | 8.2\n2024-06-01 | Chicago | 68.3 | 58.1 | 0.4 | 12.5\n2024-06-01 | Los Angeles | 78.9 | 65.4 | 0.0 | 5.7",
        "inst": "Calculate temperature range and flag windy days (>10 mph)",
        "code": "df['temp_range'] = df['max_temp'] - df['min_temp']\ndf['is_windy'] = df['wind_speed'] > 10"
    },
    {
        "ctx": "product_id | name | category | current_price | previous_price | stock\nP1001 | Widget Pro | Electronics | 199.99 | 249.99 | 45\nP1002 | Basic Tool | Hardware | 29.99 | 34.99 | 120\nP1003 | Deluxe Kit | Electronics | 149.99 | 149.99 | 32",
        "inst": "Calculate price change percentage and flag discounted items",
        "code": "df['price_change_pct'] = ((df['previous_price'] - df['current_price']) / df['previous_price']) * 100\ndf['is_discounted'] = df['price_change_pct'] > 0"
    },
    {
        "ctx": "transaction_id | customer_type | payment_method | amount | loyalty_points\ntx001 | Premium | Credit | 120.50 | 120\ntx002 | Standard | Debit | 85.75 | 85\ntx003 | Premium | PayPal | 210.00 | 210",
        "inst": "Calculate effective amount after 1% loyalty discount for Premium customers",
        "code": "df['final_amount'] = df.apply(lambda x: x['amount'] * 0.99 if x['customer_type'] == 'Premium' else x['amount'], axis=1)"
    },
    {
        "ctx": "employee_id | department | base_salary | overtime_hours | performance_score\nE101 | Sales | 50000 | 8 | 85\nE102 | Marketing | 60000 | 5 | 92\nE103 | IT | 55000 | 12 | 78",
        "inst": "Calculate total compensation (base + overtime*50) with performance bonus",
        "code": "df['total_comp'] = df['base_salary'] + (df['overtime_hours'] * 50)\ndf['total_comp'] = df['total_comp'] * (1 + df['performance_score']/1000)"
    },
    {
        "ctx": "patient_id | medication | dosage_mg | frequency | last_administered | side_effects\nPT001 | DrugA | 50 | 2/day | 2024-05-30 08:00 | None\nPT002 | DrugB | 100 | 1/day | 2024-05-31 22:00 | Dizziness\nPT003 | DrugA | 25 | 3/day | 2024-05-31 12:00 | Nausea",
        "inst": "Calculate daily dosage and flag overdue administrations (>24h since last)",
        "code": "df['daily_dosage'] = df['dosage_mg'] * df['frequency'].str.extract(r'(\\d+)').astype(int)\ndf['is_overdue'] = (pd.Timestamp.now() - pd.to_datetime(df['last_administered'])) > pd.Timedelta('24h')"
    },
    {
        "ctx": "website | page_views | unique_visitors | bounce_rate | avg_session\nSiteA | 12000 | 8500 | 42.5 | 3.2\nSiteB | 8500 | 6200 | 38.1 | 2.8\nSiteC | 15000 | 10500 | 47.3 | 4.1",
        "inst": "Calculate engagement score (views/visitor * (100 - bounce_rate))",
        "code": "df['engagement'] = (df['page_views']/df['unique_visitors']) * (100 - df['bounce_rate'])"
    },
    {
        "ctx": "city | population | area_sq_km | gdp_billion | public_transit_score\nNew York | 8800000 | 783.8 | 1800 | 85\nChicago | 2700000 | 606.1 | 700 | 73\nLos Angeles | 3900000 | 1302.0 | 1100 | 68",
        "inst": "Calculate population density and GDP per capita",
        "code": "df['density'] = df['population'] / df['area_sq_km']\ndf['gdp_per_capita'] = (df['gdp_billion'] * 1e9) / df['population']"
    },
    {
        "ctx": "car_id | make | model | year | mpg | price\nC001 | Toyota | Camry | 2022 | 32 | 25000\nC002 | Ford | F-150 | 2023 | 22 | 42000\nC003 | Tesla | Model 3 | 2024 | 134 | 45000",
        "inst": "Calculate 5-year fuel cost at $3.50/gallon and price per mpg",
        "code": "df['fuel_cost_5yr'] = (15000 * 5 / df['mpg']) * 3.5\ndf['price_per_mpg'] = df['price'] / df['mpg']"
    },
    {
        "ctx": "hotel_id | name | stars | weekday_rate | weekend_rate | occupancy_pct\nH001 | Grand Hotel | 4 | 199 | 249 | 78.5\nH002 | Seaside Inn | 3 | 149 | 179 | 85.2\nH003 | City Suites | 5 | 299 | 399 | 65.8",
        "inst": "Calculate average daily rate weighted by occupancy",
        "code": "df['avg_rate'] = (df['weekday_rate']*5 + df['weekend_rate']*2) / 7\ndf['revpar'] = df['avg_rate'] * df['occupancy_pct'] / 100"
    },
    {
        "ctx": "app_id | name | category | downloads | rating | size_mb\nA001 | PhotoEdit | Tools | 1000000 | 4.5 | 45.2\nA002 | FitnessPro | Health | 850000 | 4.2 | 78.5\nA003 | FinanceTrack | Business | 1200000 | 4.7 | 32.1",
        "inst": "Calculate popularity score (downloads * rating / size)",
        "code": "df['popularity'] = (df['downloads'] * df['rating']) / df['size_mb']"
    },
    {
        "ctx": "country | population | area | internet_users | gdp_per_capita\nUSA | 331000000 | 9834000 | 312000000 | 65000\nChina | 1402000000 | 9597000 | 1020000000 | 12500\nGermany | 83000000 | 357600 | 79000000 | 48500",
        "inst": "Calculate internet penetration % and density (people/sq km)",
        "code": "df['internet_penetration'] = (df['internet_users'] / df['population']) * 100\ndf['density'] = df['population'] / df['area']"
    },
    {
    "ctx": "product_id | price | status | quantity\nP1001 | 49.99 | active | 120\nP1002 | 89.99 | inactive | 30\nP1003 | 24.99 | active | 200",
    "inst": "Create discount_price column at 80% of price",
    "code": "df['discount_price'] = df['price'] * 0.8"
    },
    {
    "ctx": "order_id | country | sales | quantity\nORD1001 | United States | 1200 | 10\nORD1002 | Canada | 800 | 5\nORD1003 | us | 1500 | 12",
    "inst": "Standardize country names: us→United States, uk→UK, gb→UK",
    "code": "df['country'] = df['country'].replace({'us':'United States','uk':'UK','gb':'UK'})"
    },
    {
    "ctx": "customer_id | join_date | last_purchase | status\nC1001 | 2023-01-15 | 2024-05-01 | active\nC1002 | 2022-11-30 | NULL | inactive\nC1003 | 2024-02-22 | 2024-05-15 | active",
    "inst": "Fill NULL purchase dates with today's date",
    "code": "df['last_purchase'] = df['last_purchase'].fillna(pd.Timestamp.today())"
    },
    {
    "ctx": "transaction_id | product_category | amount\nTX10001 | Electronics | 150.00\nTX10002 | Clothing | 45.99\nTX10001 | Electronics | 150.00",
    "inst": "Drop duplicate transaction_ids keeping first",
    "code": "df = df.drop_duplicates(subset=['transaction_id'], keep='first')"
    },
    {
    "ctx": "date | temperature | location\n2024-05-01 | 72.5 | New York\n2024-05-02 | 68.3 | Boston\n2024-05-03 | 70.1 | Chicago",
    "inst": "Calculate 3-day rolling average after replacing -999 with NULL",
    "code": "df['temperature'] = df['temperature'].replace(-999, np.nan)\ndf['temp_rolling_avg'] = df['temperature'].rolling(3, min_periods=1).mean()"
    },
    {
    "ctx": "employee_id | full_name | department\nE101 | john smith | Sales\nE102 | SARAH JOHNSON | Marketing\nE103 | Robert Brown | IT",
    "inst": "Convert names to title case",
    "code": "df['full_name'] = df['full_name'].str.title()"
    },
    {
    "ctx": "patient_id | blood_pressure | heart_rate\nPT001 | 120/80 | 72\nPT002 | 140/90 | 68\nPT003 | 118/78 | 75",
    "inst": "Split blood_pressure into systolic/diastolic columns",
    "code": "df[['systolic','diastolic']] = df['blood_pressure'].str.extract(r'(\\d+)/(\\d+)').astype(float)"
    },
    {
    "ctx": "timestamp | sensor_id | value\n2024-05-01 08:00:00 | S1 | 24.3\n2024-05-01 08:05:00 | S2 | 26.1\n2024-05-01 08:10:00 | S1 | 24.7",
    "inst": "Resample to 10-minute intervals by sensor_id",
    "code": "df = df.set_index('timestamp').groupby('sensor_id').resample('10T').mean().reset_index()"
    },
    {
    "ctx": "product | category | inventory\nWidgetA | Electronics | 150\nWidgetB | Hardware | 80\nWidgetC | Electronics | 200",
    "inst": "Fix Elecronics typo in category column",
    "code": "df['category'] = df['category'].replace('Elecronics','Electronics')"
    },
    {
    "ctx": "student_id | test1 | test2 | test3\nS1001 | 85 | 92 | 88\nS1002 | 78 | NULL | 82\nS1003 | 90 | 85 | NULL",
    "inst": "Calculate average score using available tests",
    "code": "df['final_grade'] = df[['test1','test2','test3']].mean(axis=1, skipna=True)"
    },
    {
    "ctx": "tweet_id | text | likes\nTW001 | Loving the new update! | 142\nTW002 | This is frustrating... | 87\nTW003 | Check out our promo code! | 56",
    "inst": "Remove special chars and emojis from text",
    "code": "df['text'] = df['text'].str.replace(r'[^\\w\\s#@]', '', regex=True)"
    },
    {
    "ctx": "order_id | items | total\nORD101 | item1,item2,item3 | 45.99\nORD102 | item2,item5 | 32.50\nORD103 | item1,item3,item4,item2 | 67.80",
    "inst": "Create item count column",
    "code": "df['item_count'] = df['items'].str.split(',').str.len()"
    },
    {
    "ctx": "session_id | user_actions | duration\nSES001 | click,scroll,click | 120\nSES002 | hover,click | 45\nSES003 | scroll,scroll,click | 87",
    "inst": "Count actions per session",
    "code": "df['action_count'] = df['user_actions'].str.split(',').str.len()"
    },
    {
        "ctx": "id | product | price\n1 | Laptop | 999.99\n2 | Phone | 699.99\n3 | Tablet | 349.99",
        "inst": "Add 20% discount to all prices",
        "code": "df['discounted_price'] = df['price'] * 0.80"
    },
    {
        "ctx": "employee | salary | years_of_service\nJohn | 75000 | 5\nSarah | 82000 | 3\nMike | 68000 | 7",
        "inst": "Calculate bonus as 5% of salary for each year of service",
        "code": "df['bonus'] = df['salary'] * df['years_of_service'] * 0.05"
    },
    {
        "ctx": "customer_id | first_name | last_name\n1001 | John | Smith\n1002 | Sarah | Lee\n1003 | Michael | Brown",
        "inst": "Create username as first 3 letters of first name + last name",
        "code": "df['username'] = df['first_name'].str[:3] + df['last_name']"
    },
    {
        "ctx": "order_id | order_date | status\n1001 | 2023-01-15 | Shipped\n1002 | 2023-02-10 | Pending\n1003 | 2023-03-01 | Delivered",
        "inst": "Flag orders that are pending for more than 7 days",
        "code": "df['is_delayed'] = (df['status'] == 'Pending') & ((pd.Timestamp.today() - pd.to_datetime(df['order_date'])).dt.days > 7"
    },
    {
        "ctx": "product | category | price\nWidget | Electronics | 19.99\nGadget | Electronics | 29.99\nTool | Hardware | 14.99",
        "inst": "Calculate average price by category",
        "code": "df.groupby('category')['price'].mean()"
    },
    {
        "ctx": "student | test1 | test2\nAlice | 85 | 92\nBob | 78 | 85\nCarol | 90 | 85",
        "inst": "Calculate the higher score between test1 and test2",
        "code": "df['best_score'] = df[['test1', 'test2']].max(axis=1)"
    },
    {
        "ctx": "date | temperature | city\n2023-01-01 | 32.5 | New York\n2023-01-02 | 28.3 | Chicago\n2023-01-03 | 42.1 | Miami",
        "inst": "Find the difference from average temperature for each city",
        "code": "df['temp_diff'] = df['temperature'] - df.groupby('city')['temperature'].transform('mean')"
    },
    {
        "ctx": "transaction_id | amount | currency\nT1001 | 120.50 | USD\nT1002 | 85.75 | EUR\nT1003 | 210.00 | GBP",
        "inst": "Convert all amounts to EUR (USD:0.9, GBP:1.15)",
        "code": "df['amount_eur'] = df.apply(lambda x: x['amount']*0.9 if x['currency']=='USD' else x['amount']*1.15 if x['currency']=='GBP' else x['amount'], axis=1)"
    },
    {
        "ctx": "employee | department | salary\nJohn | Sales | 75000\nSarah | Marketing | 82000\nMike | IT | 68000\nAnna | Sales | 79000",
        "inst": "Find the highest salary in each department",
        "code": "df.groupby('department')['salary'].max()"
    },
    {
        "ctx": "customer | join_date | purchases\nAlice | 2022-05-15 | 12\nBob | 2023-01-10 | 5\nCarol | 2021-11-30 | 23",
        "inst": "Calculate average purchases per month since joining",
        "code": "df['months_since_join'] = ((pd.Timestamp.today() - pd.to_datetime(df['join_date'])).dt.days / 30)\ndf['purchases_per_month'] = df['purchases'] / df['months_since_join']"
    },
    {
        "ctx": "product_id | name | price | discontinued\n101 | Widget | 19.99 | False\n102 | Gadget | 29.99 | True\n103 | Tool | 14.99 | False",
        "inst": "Increase price by 10% for discontinued products",
        "code": "df.loc[df['discontinued'], 'price'] = df['price'] * 1.10"
    },
    {
        "ctx": "student | math | science | english\nAlice | 85 | 92 | 88\nBob | 78 | 85 | 82\nCarol | 90 | 85 | 92",
        "inst": "Calculate total score and percentage",
        "code": "df['total'] = df['math'] + df['science'] + df['english']\ndf['percentage'] = (df['total'] / 300) * 100"
    },
    {
        "ctx": "order_id | items | total\nORD101 | \"item1,item2,item3\" | 45.99\nORD102 | \"item2,item5\" | 32.50\nORD103 | \"item1,item3,item4,item2\" | 67.80",
        "inst": "Check if order contains item3",
        "code": "df['has_item3'] = df['items'].str.contains('item3')"
    },
    {
        "ctx": "date | revenue | expenses\n2023-01-01 | 12000 | 8500\n2023-01-02 | 15000 | 9200\n2023-01-03 | 18000 | 10500",
        "inst": "Calculate profit and profit margin",
        "code": "df['profit'] = df['revenue'] - df['expenses']\ndf['margin'] = (df['profit'] / df['revenue']) * 100"
    },
    {
        "ctx": "employee_id | name | department | salary\nE101 | John | Sales | 75000\nE102 | Sarah | Marketing | 82000\nE103 | Mike | IT | 68000",
        "inst": "Give 5% raise to all employees except Sales",
        "code": "df.loc[df['department'] != 'Sales', 'salary'] = df['salary'] * 1.05"
    },
    {
        "ctx": "product | category | price | stock\nWidget | A | 19.99 | 45\nGadget | B | 29.99 | 12\nTool | A | 14.99 | 0",
        "inst": "Calculate total inventory value by category",
        "code": "df['inventory_value'] = df['price'] * df['stock']\ndf.groupby('category')['inventory_value'].sum()"
    },
    {
        "ctx": "customer_id | purchases | last_purchase\n1001 | 12 | 2023-04-01\n1002 | 5 | 2023-05-15\n1003 | 23 | 2023-03-10",
        "inst": "Segment customers based on recency and frequency",
        "code": "df['segment'] = pd.cut(df['purchases'], bins=[0,5,15,100], labels=['Low','Medium','High'])"
    },
    {
        "ctx": "date | temperature | humidity\n2023-01-01 | 32.5 | 45.2\n2023-01-02 | 28.3 | 52.1\n2023-01-03 | 42.1 | 65.4",
        "inst": "Flag days with high humidity (>60%) or low temperature (<30)",
        "code": "df['alert'] = (df['humidity'] > 60) | (df['temperature'] < 30)"
    },
    {
        "ctx": "student | grade | score\nAlice | A | 95\nBob | B | 85\nCarol | A | 92\nDave | C | 75",
        "inst": "Calculate average score by grade",
        "code": "df.groupby('grade')['score'].mean()"
    },
    {
        "ctx": "transaction_id | customer_id | amount | date\nT1001 | C101 | 120.50 | 2023-01-15\nT1002 | C102 | 85.75 | 2023-02-10\nT1003 | C101 | 210.00 | 2023-03-01",
        "inst": "Calculate total spending per customer",
        "code": "df.groupby('customer_id')['amount'].sum()"
    },
    {
        "ctx": "employee | hours_worked | hourly_rate\nJohn | 40 | 25.00\nSarah | 35 | 30.00\nMike | 45 | 28.00",
        "inst": "Calculate weekly pay with double time for hours over 40",
        "code": "df['weekly_pay'] = df.apply(lambda x: x['hours_worked']*x['hourly_rate'] + (x['hours_worked']-40)*x['hourly_rate'] if x['hours_worked']>40 else x['hours_worked']*x['hourly_rate'], axis=1)"
    },
    {
        "ctx": "product_id | name | price | category\n101 | Widget | 19.99 | A\n102 | Gadget | 29.99 | B\n103 | Tool | 14.99 | A",
        "inst": "Normalize prices within each category (0-1 scale)",
        "code": "df['normalized_price'] = df.groupby('category')['price'].transform(lambda x: (x - x.min()) / (x.max() - x.min()))"
    },
    {
        "ctx": "date | sales | region\n2023-01-01 | 12000 | North\n2023-01-02 | 15000 | South\n2023-01-03 | 18000 | North\n2023-01-04 | 14000 | South",
        "inst": "Calculate 7-day rolling average sales by region",
        "code": "df['rolling_avg'] = df.groupby('region')['sales'].transform(lambda x: x.rolling(7).mean())"
    },
    {
        "ctx": "customer_id | name | email | phone\n1001 | John Smith | john@example.com | 555-1234\n1002 | Sarah Lee | sarah@example.com | 555-5678\n1003 | Michael Brown | michael@example.com | 555-9012",
        "inst": "Mask email addresses (show first letter + *** + domain)",
        "code": "df['masked_email'] = df['email'].str[0] + '***' + df['email'].str.split('@').str[-1]"
    },
    {
        "ctx": "order_id | customer_id | order_date | amount\n1001 | 101 | 2023-01-15 | 120.50\n1002 | 102 | 2023-02-10 | 85.75\n1003 | 101 | 2023-03-01 | 210.00",
        "inst": "Find the most recent order for each customer",
        "code": "df.sort_values('order_date').groupby('customer_id').last()"
    },
    {
        "ctx": "product_id | name | price | rating\n101 | Widget | 19.99 | 4.5\n102 | Gadget | 29.99 | 3.8\n103 | Tool | 14.99 | 4.2",
        "inst": "Calculate price per rating point",
        "code": "df['price_per_rating'] = df['price'] / df['rating']"
    },
    {
        "ctx": "employee_id | name | department | salary\nE101 | John | Sales | 75000\nE102 | Sarah | Marketing | 82000\nE103 | Mike | IT | 68000",
        "inst": "Calculate salary as percentage of department total",
        "code": "df['salary_pct'] = df['salary'] / df.groupby('department')['salary'].transform('sum') * 100"
    },
    {
        "ctx": "date | page_views | unique_visitors\n2023-01-01 | 1200 | 850\n2023-01-02 | 1500 | 920\n2023-01-03 | 1800 | 1050",
        "inst": "Calculate pages per visitor and bounce rate estimate",
        "code": "df['pages_per_visit'] = df['page_views'] / df['unique_visitors']\ndf['bounce_rate'] = (1 - (df['page_views'] / df['unique_visitors'])) * 100"
    },
    {
        "ctx": "student_id | name | test1 | test2 | test3\nS101 | Alice | 85 | 92 | 88\nS102 | Bob | 78 | 85 | 82\nS103 | Carol | 90 | 85 | 92",
        "inst": "Calculate standard deviation of test scores for each student",
        "code": "df['score_std'] = df[['test1', 'test2', 'test3']].std(axis=1)"
    },
    {
        "ctx": "transaction_id | customer_id | amount | date\nT1001 | C101 | 120.50 | 2023-01-15\nT1002 | C102 | 85.75 | 2023-02-10\nT1003 | C101 | 210.00 | 2023-03-01",
        "inst": "Calculate days between consecutive purchases for each customer",
        "code": "df['days_between'] = df.sort_values('date').groupby('customer_id')['date'].diff().dt.days"
    },
    {
        "ctx": "product_id | name | price | category | stock\n101 | Widget | 19.99 | A | 45\n102 | Gadget | 29.99 | B | 12\n103 | Tool | 14.99 | A | 0",
        "inst": "Calculate stock-out risk (1 if stock < 5, else 0)",
        "code": "df['stock_risk'] = (df['stock'] < 5).astype(int)"
    },
    {
        "ctx": "date | temperature | precipitation\n2023-01-01 | 32.5 | 0.2\n2023-01-02 | 28.3 | 0.5\n2023-01-03 | 42.1 | 0.0",
        "inst": "Categorize days as 'Cold' (<35), 'Mild' (35-60), 'Hot' (>60)",
        "code": "df['temp_category'] = pd.cut(df['temperature'], bins=[-np.inf,35,60,np.inf], labels=['Cold','Mild','Hot'])"
    },
    {
        "ctx": "customer_id | name | join_date | total_spent\n1001 | John | 2022-05-15 | 1200\n1002 | Sarah | 2023-01-10 | 850\n1003 | Mike | 2021-11-30 | 2500",
        "inst": "Calculate average spending per day as a customer",
        "code": "df['days_as_customer'] = (pd.Timestamp.today() - pd.to_datetime(df['join_date'])).dt.days\ndf['daily_spend'] = df['total_spent'] / df['days_as_customer']"
    },
    {
        "ctx": "employee_id | name | department | salary | years\nE101 | John | Sales | 75000 | 5\nE102 | Sarah | Marketing | 82000 | 3\nE103 | Mike | IT | 68000 | 7",
        "inst": "Calculate salary per year of service",
        "code": "df['salary_per_year'] = df['salary'] / df['years']"
    },
    {
        "ctx": "order_id | customer_id | items | total\n1001 | 101 | 3 | 45.99\n1002 | 102 | 1 | 12.50\n1003 | 101 | 5 | 87.25",
        "inst": "Calculate average order value per customer",
        "code": "df.groupby('customer_id')['total'].mean()"
    },
    {
        "ctx": "date | product | sales | returns\n2023-01-01 | A | 1200 | 120\n2023-01-02 | B | 1500 | 75\n2023-01-03 | A | 1800 | 90",
        "inst": "Calculate net sales and return rate",
        "code": "df['net_sales'] = df['sales'] - df['returns']\ndf['return_rate'] = (df['returns'] / df['sales']) * 100"
    },
    {
        "ctx": "student_id | name | grade | score\nS101 | Alice | A | 95\nS102 | Bob | B | 85\nS103 | Carol | A | 92\nS104 | Dave | C | 75",
        "inst": "Find the highest scoring student in each grade",
        "code": "df.sort_values('score').groupby('grade').last()"
    },
    {
        "ctx": "transaction_id | amount | currency | date\nT1001 | 120.50 | USD | 2023-01-15\nT1002 | 85.75 | EUR | 2023-02-10\nT1003 | 210.00 | GBP | 2023-03-01",
        "inst": "Convert to USD and adjust for inflation (3% per month)",
        "code": "df['months_passed'] = ((pd.Timestamp.today() - pd.to_datetime(df['date'])).dt.days / 30)\ndf['adjusted_amount'] = df['amount_usd'] * (1.03 ** df['months_passed'])"
    },
    {
        "ctx": "product_id | name | price | category | stock\n101 | Widget | 19.99 | A | 45\n102 | Gadget | 29.99 | B | 12\n103 | Tool | 14.99 | A | 0",
        "inst": "Calculate price elasticity score (price / stock)",
        "code": "df['elasticity'] = df['price'] / (df['stock'] + 1)"
    },
    {
        "ctx": "customer_id | name | purchases | last_purchase\n1001 | John | 12 | 2023-04-01\n1002 | Sarah | 5 | 2023-05-15\n1003 | Mike | 23 | 2023-03-10",
        "inst": "Calculate RFM score (1-5 scale for recency, frequency, monetary)",
        "code": "df['recency_score'] = pd.qcut(df['last_purchase'], q=5, labels=[5,4,3,2,1])\ndf['frequency_score'] = pd.qcut(df['purchases'], q=5, labels=[1,2,3,4,5])"
    },
    {
        "ctx": "date | temperature | humidity | pressure\n2023-01-01 | 32.5 | 45.2 | 1013.2\n2023-01-02 | 28.3 | 52.1 | 1012.8\n2023-01-03 | 42.1 | 65.4 | 1011.5",
        "inst": "Calculate comfort index (weighted average of temp and humidity)",
        "code": "df['comfort_index'] = (df['temperature'] * 0.7) + (df['humidity'] * 0.3)"
    },
    {
        "ctx": "employee_id | name | department | salary | rating\nE101 | John | Sales | 75000 | 4.5\nE102 | Sarah | Marketing | 82000 | 4.2\nE103 | Mike | IT | 68000 | 3.8",
        "inst": "Calculate performance-adjusted salary (salary / rating)",
        "code": "df['performance_ratio'] = df['salary'] / df['rating']"
    },
    {
        "ctx": "order_id | customer_id | items | total | date\n1001 | 101 | 3 | 45.99 | 2023-01-15\n1002 | 102 | 1 | 12.50 | 2023-02-10\n1003 | 101 | 5 | 87.25 | 2023-03-01",
        "inst": "Calculate customer lifetime value (total spend * purchase frequency)",
        "code": "df['lifetime_value'] = df.groupby('customer_id')['total'].transform('sum') * df.groupby('customer_id')['customer_id'].transform('count')"
    },
    {
        "ctx": "product_id | name | price | category | sales\n101 | Widget | 19.99 | A | 1200\n102 | Gadget | 29.99 | B | 850\n103 | Tool | 14.99 | A | 1500",
        "inst": "Calculate revenue and profit margin (assuming 30% COGS)",
        "code": "df['revenue'] = df['price'] * df['sales']\ndf['profit_margin'] = (df['price'] * 0.7) / df['price'] * 100"
    },
    {
        "ctx": "student_id | name | test1 | test2 | test3\nS101 | Alice | 85 | 92 | 88\nS102 | Bob | 78 | 85 | 82\nS103 | Carol | 90 | 85 | 92",
        "inst": "Calculate improvement from test1 to test3",
        "code": "df['improvement'] = df['test3'] - df['test1']"
    },
    {
        "ctx": "date | page_views | unique_visitors | conversions\n2023-01-01 | 1200 | 850 | 85\n2023-01-02 | 1500 | 920 | 120\n2023-01-03 | 1800 | 1050 | 95",
        "inst": "Calculate conversion rate and value per visitor ($10 per conversion)",
        "code": "df['conversion_rate'] = (df['conversions'] / df['unique_visitors']) * 100\ndf['value_per_visitor'] = (df['conversions'] * 10) / df['unique_visitors']"
    },
    {
        "ctx": "transaction_id | customer_id | amount | date\nT1001 | C101 | 120.50 | 2023-01-15\nT1002 | C102 | 85.75 | 2023-02-10\nT1003 | C101 | 210.00 | 2023-03-01",
        "inst": "Calculate customer purchase frequency (days between purchases)",
        "code": "df['purchase_frequency'] = df.sort_values('date').groupby('customer_id')['date'].diff().dt.days.mean()"
    },
    {
        "ctx": "product_id | name | price | category | sales\n101 | Widget | 19.99 | A | 1200\n102 | Gadget | 29.99 | B | 850\n103 | Tool | 14.99 | A | 1500",
        "inst": "Calculate market share within each category",
        "code": "df['market_share'] = df['sales'] / df.groupby('category')['sales'].transform('sum') * 100"
    },
    {
        "ctx": "employee_id | name | department | salary | rating\nE101 | John | Sales | 75000 | 4.5\nE102 | Sarah | Marketing | 82000 | 4.2\nE103 | Mike | IT | 68000 | 3.8",
        "inst": "Calculate salary competitiveness (salary vs department average)",
        "code": "df['salary_ratio'] = df['salary'] / df.groupby('department')['salary'].transform('mean')"
    },
    {
        "ctx": "date | temperature | humidity | precipitation\n2023-01-01 | 32.5 | 45.2 | 0.2\n2023-01-02 | 28.3 | 52.1 | 0.5\n2023-01-03 | 42.1 | 65.4 | 0.0",
        "inst": "Calculate weighted weather score (50% temp, 30% humidity, 20% precip)",
        "code": "df['weather_score'] = (df['temperature']*0.5) + (df['humidity']*0.3) + (df['precipitation']*0.2)"
    },
    {
        "ctx": "customer_id | name | join_date | total_spent | purchases\n1001 | John | 2022-05-15 | 1200 | 12\n1002 | Sarah | 2023-01-10 | 850 | 5\n1003 | Mike | 2021-11-30 | 2500 | 23",
        "inst": "Calculate average order value and purchase frequency",
        "code": "df['avg_order_value'] = df['total_spent'] / df['purchases']\ndf['purchase_frequency'] = df['purchases'] / ((pd.Timestamp.today() - pd.to_datetime(df['join_date'])).dt.days * 30"
    },
    {
        "ctx": "product_id | name | price | category | sales | returns\n101 | Widget | 19.99 | A | 1200 | 120\n102 | Gadget | 29.99 | B | 850 | 75\n103 | Tool | 14.99 | A | 1500 | 90",
        "inst": "Calculate net sales and return rate by category",
        "code": "df['net_sales'] = df['sales'] - df['returns']\ndf.groupby('category').agg({'net_sales':'sum', 'returns':'mean'})"
    },
    {
        "ctx": "student_id | name | grade | test1 | test2 | test3\nS101 | Alice | A | 85 | 92 | 88\nS102 | Bob | B | 78 | 85 | 82\nS103 | Carol | A | 90 | 85 | 92",
        "inst": "Calculate average and standard deviation by grade",
        "code": "df.groupby('grade').agg({'test1':['mean','std'], 'test2':['mean','std'], 'test3':['mean','std']})"
    },
    {
        "ctx": "date | product | sales | price | cost\n2023-01-01 | A | 1200 | 19.99 | 12.00\n2023-01-02 | B | 1500 | 29.99 | 18.00\n2023-01-03 | A | 1800 | 19.99 | 12.00",
        "inst": "Calculate gross profit and margin",
        "code": "df['gross_profit'] = (df['price'] - df['cost']) * df['sales']\ndf['gross_margin'] = ((df['price'] - df['cost']) / df['price']) * 100"
    },
    {
        "ctx": "employee_id | name | department | salary | years | rating\nE101 | John | Sales | 75000 | 5 | 4.5\nE102 | Sarah | Marketing | 82000 | 3 | 4.2\nE103 | Mike | IT | 68000 | 7 | 3.8",
        "inst": "Calculate composite performance score (rating * years / salary norm)",
        "code": "df['performance_score'] = (df['rating'] * df['years']) / (df['salary'] / df['salary'].mean())"
    },
    {
        "ctx": "order_id | customer_id | items | total | date\n1001 | 101 | 3 | 45.99 | 2023-01-15\n1002 | 102 | 1 | 12.50 | 2023-02-10\n1003 | 101 | 5 | 87.25 | 2023-03-01",
        "inst": "Calculate 30-day customer retention rate",
        "code": "df['next_order_date'] = df.sort_values('date').groupby('customer_id')['date'].shift(-1)\ndf['retained'] = (df['next_order_date'] - df['date']).dt.days <= 30"
    },
    {
        "ctx": "product_id | name | price | category | sales | returns\n101 | Widget | 19.99 | A | 1200 | 120\n102 | Gadget | 29.99 | B | 850 | 75\n103 | Tool | 14.99 | A | 1500 | 90",
        "inst": "Calculate quality score (1 - return rate)",
        "code": "df['quality_score'] = 1 - (df['returns'] / df['sales'])"
    },
    {
        "ctx": "date | temperature | humidity | precipitation | wind\n2023-01-01 | 32.5 | 45.2 | 0.2 | 10\n2023-01-02 | 28.3 | 52.1 | 0.5 | 15\n2023-01-03 | 42.1 | 65.4 | 0.0 | 8",
        "inst": "Calculate weather severity index",
        "code": "df['severity_index'] = (df['temperature']/50) + (df['humidity']/100) + df['precipitation'] + (df['wind']/20)"
    },
    {
        "ctx": "customer_id | name | join_date | total_spent | purchases | last_purchase\n1001 | John | 2022-05-15 | 1200 | 12 | 2023-04-01\n1002 | Sarah | 2023-01-10 | 850 | 5 | 2023-05-15\n1003 | Mike | 2021-11-30 | 2500 | 23 | 2023-03-10",
        "inst": "Calculate RFM score (Recency, Frequency, Monetary)",
        "code": "df['recency'] = (pd.Timestamp.today() - pd.to_datetime(df['last_purchase'])).dt.days\ndf['rfm_score'] = pd.qcut(df['recency'], q=5, labels=[5,4,3,2,1]).astype(int) + pd.qcut(df['frequency'], q=5, labels=[1,2,3,4,5]).astype(int) + pd.qcut(df['monetary'], q=5, labels=[1,2,3,4,5]).astype(int)"
    },
    {
        "ctx": "product_id | name | price | category | sales | returns | cost\n101 | Widget | 19.99 | A | 1200 | 120 | 12.00\n102 | Gadget | 29.99 | B | 850 | 75 | 18.00\n103 | Tool | 14.99 | A | 1500 | 90 | 9.00",
        "inst": "Calculate ROI (Return on Investment)",
        "code": "df['roi'] = ((df['price'] - df['cost']) * df['sales']) / (df['cost'] * df['sales']) * 100"
    },
    {
        "ctx": "student_id | name | grade | test1 | test2 | test3 | attendance\nS101 | Alice | A | 85 | 92 | 88 | 95\nS102 | Bob | B | 78 | 85 | 82 | 88\nS103 | Carol | A | 90 | 85 | 92 | 92",
        "inst": "Calculate weighted final score (tests 80%, attendance 20%)",
        "code": "df['final_score'] = (df[['test1','test2','test3']].mean(axis=1)*0.8) + (df['attendance']*0.2)"
    },
    {
        "ctx": "date | product | sales | price | cost | inventory\n2023-01-01 | A | 1200 | 19.99 | 12.00 | 5000\n2023-01-02 | B | 1500 | 29.99 | 18.00 | 3000\n2023-01-03 | A | 1800 | 19.99 | 12.00 | 3200",
        "inst": "Calculate days of inventory remaining",
        "code": "df['days_inventory'] = df['inventory'] / df['sales'] * 30"
    },
    {
        "ctx": "employee_id | name | department | salary | years | rating | projects\nE101 | John | Sales | 75000 | 5 | 4.5 | 12\nE102 | Sarah | Marketing | 82000 | 3 | 4.2 | 8\nE103 | Mike | IT | 68000 | 7 | 3.8 | 15",
        "inst": "Calculate productivity score (projects per year * rating)",
        "code": "df['productivity'] = (df['projects'] / df['years']) * df['rating']"
    },
    {
        "ctx": "order_id | customer_id | items | total | date | discount\n1001 | 101 | 3 | 45.99 | 2023-01-15 | 0.1\n1002 | 102 | 1 | 12.50 | 2023-02-10 | 0.0\n1003 | 101 | 5 | 87.25 | 2023-03-01 | 0.15",
        "inst": "Calculate pre-discount amount and discount effectiveness",
        "code": "df['pre_discount'] = df['total'] / (1 - df['discount'])\ndf['discount_effect'] = (df['pre_discount'] - df['total']) / df['pre_discount'] * 100"
    },
    {
        "ctx": "product_id | name | price | category | sales | returns | cost | inventory\n101 | Widget | 19.99 | A | 1200 | 120 | 12.00 | 5000\n102 | Gadget | 29.99 | B | 850 | 75 | 18.00 | 3000\n103 | Tool | 14.99 | A | 1500 | 90 | 9.00 | 3200",
        "inst": "Calculate inventory turnover ratio",
        "code": "df['turnover'] = df['sales'] / df['inventory'] * 12"
    },
    {
        "ctx": "date | product | sales | price | cost | inventory | competitor_price\n2023-01-01 | A | 1200 | 19.99 | 12.00 | 5000 | 18.99\n2023-01-02 | B | 1500 | 29.99 | 18.00 | 3000 | 27.50\n2023-01-03 | A | 1800 | 19.99 | 12.00 | 3200 | 18.99",
        "inst": "Calculate price competitiveness index",
        "code": "df['price_index'] = (df['price'] / df['competitor_price']) * 100"
    },
    {
        "ctx": "id | product | price\n1 | Laptop | 999.99\n2 | Phone | 699.99\n3 | Tablet | 349.99",
        "inst": "Add 20% discount to all prices",
        "code": "df['discounted_price'] = df['price'] * 0.80"
    },
    {
        "ctx": "employee | salary | years_of_service\nJohn | 75000 | 5\nSarah | 82000 | 3\nMike | 68000 | 7",
        "inst": "Calculate bonus as 5% of salary for each year of service",
        "code": "df['bonus'] = df['salary'] * df['years_of_service'] * 0.05"
    },
    {
        "ctx": "customer_id | first_name | last_name\n1001 | John | Smith\n1002 | Sarah | Lee\n1003 | Michael | Brown",
        "inst": "Create username as first 3 letters of first name + last name",
        "code": "df['username'] = df['first_name'].str[:3] + df['last_name']"
    },
    {
        "ctx": "order_id | order_date | status\n1001 | 2023-01-15 | Shipped\n1002 | 2023-02-10 | Pending\n1003 | 2023-03-01 | Delivered",
        "inst": "Flag orders that are pending for more than 7 days",
        "code": "df['is_delayed'] = (df['status'] == 'Pending') & ((pd.Timestamp.today() - pd.to_datetime(df['order_date'])).dt.days > 7"
    },
    {
        "ctx": "product | category | price\nWidget | Electronics | 19.99\nGadget | Electronics | 29.99\nTool | Hardware | 14.99",
        "inst": "Calculate average price by category",
        "code": "df.groupby('category')['price'].mean()"
    },
    {
        "ctx": "student | test1 | test2\nAlice | 85 | 92\nBob | 78 | 85\nCarol | 90 | 85",
        "inst": "Calculate the higher score between test1 and test2",
        "code": "df['best_score'] = df[['test1', 'test2']].max(axis=1)"
    },
    {
        "ctx": "date | temperature | city\n2023-01-01 | 32.5 | New York\n2023-01-02 | 28.3 | Chicago\n2023-01-03 | 42.1 | Miami",
        "inst": "Find the difference from average temperature for each city",
        "code": "df['temp_diff'] = df['temperature'] - df.groupby('city')['temperature'].transform('mean')"
    },
    {
        "ctx": "transaction_id | amount | currency\nT1001 | 120.50 | USD\nT1002 | 85.75 | EUR\nT1003 | 210.00 | GBP",
        "inst": "Convert all amounts to EUR (USD:0.9, GBP:1.15)",
        "code": "df['amount_eur'] = df.apply(lambda x: x['amount']*0.9 if x['currency']=='USD' else x['amount']*1.15 if x['currency']=='GBP' else x['amount'], axis=1)"
    },
    {
        "ctx": "employee | department | salary\nJohn | Sales | 75000\nSarah | Marketing | 82000\nMike | IT | 68000\nAnna | Sales | 79000",
        "inst": "Find the highest salary in each department",
        "code": "df.groupby('department')['salary'].max()"
    },
    {
        "ctx": "customer | join_date | purchases\nAlice | 2022-05-15 | 12\nBob | 2023-01-10 | 5\nCarol | 2021-11-30 | 23",
        "inst": "Calculate average purchases per month since joining",
        "code": "df['months_since_join'] = ((pd.Timestamp.today() - pd.to_datetime(df['join_date'])).dt.days / 30)\ndf['purchases_per_month'] = df['purchases'] / df['months_since_join']"
    },
    {
        "ctx": "product_id | name | price | discontinued\n101 | Widget | 19.99 | False\n102 | Gadget | 29.99 | True\n103 | Tool | 14.99 | False",
        "inst": "Increase price by 10% for discontinued products",
        "code": "df.loc[df['discontinued'], 'price'] = df['price'] * 1.10"
    },
    {
        "ctx": "student | math | science | english\nAlice | 85 | 92 | 88\nBob | 78 | 85 | 82\nCarol | 90 | 85 | 92",
        "inst": "Calculate total score and percentage",
        "code": "df['total'] = df['math'] + df['science'] + df['english']\ndf['percentage'] = (df['total'] / 300) * 100"
    },
    {
        "ctx": "order_id | items | total\nORD101 | \"item1,item2,item3\" | 45.99\nORD102 | \"item2,item5\" | 32.50\nORD103 | \"item1,item3,item4,item2\" | 67.80",
        "inst": "Check if order contains item3",
        "code": "df['has_item3'] = df['items'].str.contains('item3')"
    },
    {
        "ctx": "date | revenue | expenses\n2023-01-01 | 12000 | 8500\n2023-01-02 | 15000 | 9200\n2023-01-03 | 18000 | 10500",
        "inst": "Calculate profit and profit margin",
        "code": "df['profit'] = df['revenue'] - df['expenses']\ndf['margin'] = (df['profit'] / df['revenue']) * 100"
    },
    {
        "ctx": "employee_id | name | department | salary\nE101 | John | Sales | 75000\nE102 | Sarah | Marketing | 82000\nE103 | Mike | IT | 68000",
        "inst": "Give 5% raise to all employees except Sales",
        "code": "df.loc[df['department'] != 'Sales', 'salary'] = df['salary'] * 1.05"
    },
    {
        "ctx": "product | category | price | stock\nWidget | A | 19.99 | 45\nGadget | B | 29.99 | 12\nTool | A | 14.99 | 0",
        "inst": "Calculate total inventory value by category",
        "code": "df['inventory_value'] = df['price'] * df['stock']\ndf.groupby('category')['inventory_value'].sum()"
    },
    {
        "ctx": "customer_id | purchases | last_purchase\n1001 | 12 | 2023-04-01\n1002 | 5 | 2023-05-15\n1003 | 23 | 2023-03-10",
        "inst": "Segment customers based on recency and frequency",
        "code": "df['segment'] = pd.cut(df['purchases'], bins=[0,5,15,100], labels=['Low','Medium','High'])"
    },
    {
        "ctx": "date | temperature | humidity\n2023-01-01 | 32.5 | 45.2\n2023-01-02 | 28.3 | 52.1\n2023-01-03 | 42.1 | 65.4",
        "inst": "Flag days with high humidity (>60%) or low temperature (<30)",
        "code": "df['alert'] = (df['humidity'] > 60) | (df['temperature'] < 30)"
    },
    {
        "ctx": "student | grade | score\nAlice | A | 95\nBob | B | 85\nCarol | A | 92\nDave | C | 75",
        "inst": "Calculate average score by grade",
        "code": "df.groupby('grade')['score'].mean()"
    },
    {
        "ctx": "transaction_id | customer_id | amount | date\nT1001 | C101 | 120.50 | 2023-01-15\nT1002 | C102 | 85.75 | 2023-02-10\nT1003 | C101 | 210.00 | 2023-03-01",
        "inst": "Calculate total spending per customer",
        "code": "df.groupby('customer_id')['amount'].sum()"
    },
    {
        "ctx": "employee | hours_worked | hourly_rate\nJohn | 40 | 25.00\nSarah | 35 | 30.00\nMike | 45 | 28.00",
        "inst": "Calculate weekly pay with double time for hours over 40",
        "code": "df['weekly_pay'] = df.apply(lambda x: x['hours_worked']*x['hourly_rate'] + (x['hours_worked']-40)*x['hourly_rate'] if x['hours_worked']>40 else x['hours_worked']*x['hourly_rate'], axis=1)"
    },
    {
        "ctx": "product_id | name | price | category\n101 | Widget | 19.99 | A\n102 | Gadget | 29.99 | B\n103 | Tool | 14.99 | A",
        "inst": "Normalize prices within each category (0-1 scale)",
        "code": "df['normalized_price'] = df.groupby('category')['price'].transform(lambda x: (x - x.min()) / (x.max() - x.min()))"
    },
    {
        "ctx": "date | sales | region\n2023-01-01 | 12000 | North\n2023-01-02 | 15000 | South\n2023-01-03 | 18000 | North\n2023-01-04 | 14000 | South",
        "inst": "Calculate 7-day rolling average sales by region",
        "code": "df['rolling_avg'] = df.groupby('region')['sales'].transform(lambda x: x.rolling(7).mean())"
    },
    {
        "ctx": "customer_id | name | email | phone\n1001 | John Smith | john@example.com | 555-1234\n1002 | Sarah Lee | sarah@example.com | 555-5678\n1003 | Michael Brown | michael@example.com | 555-9012",
        "inst": "Mask email addresses (show first letter + *** + domain)",
        "code": "df['masked_email'] = df['email'].str[0] + '***' + df['email'].str.split('@').str[-1]"
    },
    {
        "ctx": "order_id | customer_id | order_date | amount\n1001 | 101 | 2023-01-15 | 120.50\n1002 | 102 | 2023-02-10 | 85.75\n1003 | 101 | 2023-03-01 | 210.00",
        "inst": "Find the most recent order for each customer",
        "code": "df.sort_values('order_date').groupby('customer_id').last()"
    },
    {
        "ctx": "product_id | name | price | rating\n101 | Widget | 19.99 | 4.5\n102 | Gadget | 29.99 | 3.8\n103 | Tool | 14.99 | 4.2",
        "inst": "Calculate price per rating point",
        "code": "df['price_per_rating'] = df['price'] / df['rating']"
    },
    {
        "ctx": "employee_id | name | department | salary\nE101 | John | Sales | 75000\nE102 | Sarah | Marketing | 82000\nE103 | Mike | IT | 68000",
        "inst": "Calculate salary as percentage of department total",
        "code": "df['salary_pct'] = df['salary'] / df.groupby('department')['salary'].transform('sum') * 100"
    },
    {
        "ctx": "date | page_views | unique_visitors\n2023-01-01 | 1200 | 850\n2023-01-02 | 1500 | 920\n2023-01-03 | 1800 | 1050",
        "inst": "Calculate pages per visitor and bounce rate estimate",
        "code": "df['pages_per_visit'] = df['page_views'] / df['unique_visitors']\ndf['bounce_rate'] = (1 - (df['page_views'] / df['unique_visitors'])) * 100"
    },
    {
        "ctx": "student_id | name | test1 | test2 | test3\nS101 | Alice | 85 | 92 | 88\nS102 | Bob | 78 | 85 | 82\nS103 | Carol | 90 | 85 | 92",
        "inst": "Calculate standard deviation of test scores for each student",
        "code": "df['score_std'] = df[['test1', 'test2', 'test3']].std(axis=1)"
    },
    {
        "ctx": "transaction_id | customer_id | amount | date\nT1001 | C101 | 120.50 | 2023-01-15\nT1002 | C102 | 85.75 | 2023-02-10\nT1003 | C101 | 210.00 | 2023-03-01",
        "inst": "Calculate days between consecutive purchases for each customer",
        "code": "df['days_between'] = df.sort_values('date').groupby('customer_id')['date'].diff().dt.days"
    },
    {
        "ctx": "product_id | name | price | category | stock\n101 | Widget | 19.99 | A | 45\n102 | Gadget | 29.99 | B | 12\n103 | Tool | 14.99 | A | 0",
        "inst": "Calculate stock-out risk (1 if stock < 5, else 0)",
        "code": "df['stock_risk'] = (df['stock'] < 5).astype(int)"
    },
    {
        "ctx": "date | temperature | precipitation\n2023-01-01 | 32.5 | 0.2\n2023-01-02 | 28.3 | 0.5\n2023-01-03 | 42.1 | 0.0",
        "inst": "Categorize days as 'Cold' (<35), 'Mild' (35-60), 'Hot' (>60)",
        "code": "df['temp_category'] = pd.cut(df['temperature'], bins=[-np.inf,35,60,np.inf], labels=['Cold','Mild','Hot'])"
    },
    {
        "ctx": "customer_id | name | join_date | total_spent\n1001 | John | 2022-05-15 | 1200\n1002 | Sarah | 2023-01-10 | 850\n1003 | Mike | 2021-11-30 | 2500",
        "inst": "Calculate average spending per day as a customer",
        "code": "df['days_as_customer'] = (pd.Timestamp.today() - pd.to_datetime(df['join_date'])).dt.days\ndf['daily_spend'] = df['total_spent'] / df['days_as_customer']"
    },
    {
        "ctx": "employee_id | name | department | salary | years\nE101 | John | Sales | 75000 | 5\nE102 | Sarah | Marketing | 82000 | 3\nE103 | Mike | IT | 68000 | 7",
        "inst": "Calculate salary per year of service",
        "code": "df['salary_per_year'] = df['salary'] / df['years']"
    },
    {
        "ctx": "order_id | customer_id | items | total\n1001 | 101 | 3 | 45.99\n1002 | 102 | 1 | 12.50\n1003 | 101 | 5 | 87.25",
        "inst": "Calculate average order value per customer",
        "code": "df.groupby('customer_id')['total'].mean()"
    },
    {
        "ctx": "date | product | sales | returns\n2023-01-01 | A | 1200 | 120\n2023-01-02 | B | 1500 | 75\n2023-01-03 | A | 1800 | 90",
        "inst": "Calculate net sales and return rate",
        "code": "df['net_sales'] = df['sales'] - df['returns']\ndf['return_rate'] = (df['returns'] / df['sales']) * 100"
    },
    {
        "ctx": "student_id | name | grade | score\nS101 | Alice | A | 95\nS102 | Bob | B | 85\nS103 | Carol | A | 92\nS104 | Dave | C | 75",
        "inst": "Find the highest scoring student in each grade",
        "code": "df.sort_values('score').groupby('grade').last()"
    },
    {
        "ctx": "transaction_id | amount | currency | date\nT1001 | 120.50 | USD | 2023-01-15\nT1002 | 85.75 | EUR | 2023-02-10\nT1003 | 210.00 | GBP | 2023-03-01",
        "inst": "Convert to USD and adjust for inflation (3% per month)",
        "code": "df['months_passed'] = ((pd.Timestamp.today() - pd.to_datetime(df['date'])).dt.days / 30)\ndf['adjusted_amount'] = df['amount_usd'] * (1.03 ** df['months_passed'])"
    },
    {
        "ctx": "product_id | name | price | category | stock\n101 | Widget | 19.99 | A | 45\n102 | Gadget | 29.99 | B | 12\n103 | Tool | 14.99 | A | 0",
        "inst": "Calculate price elasticity score (price / stock)",
        "code": "df['elasticity'] = df['price'] / (df['stock'] + 1)"
    },
    {
        "ctx": "customer_id | name | purchases | last_purchase\n1001 | John | 12 | 2023-04-01\n1002 | Sarah | 5 | 2023-05-15\n1003 | Mike | 23 | 2023-03-10",
        "inst": "Calculate RFM score (1-5 scale for recency, frequency, monetary)",
        "code": "df['recency_score'] = pd.qcut(df['last_purchase'], q=5, labels=[5,4,3,2,1])\ndf['frequency_score'] = pd.qcut(df['purchases'], q=5, labels=[1,2,3,4,5])"
    },
    {
        "ctx": "date | temperature | humidity | pressure\n2023-01-01 | 32.5 | 45.2 | 1013.2\n2023-01-02 | 28.3 | 52.1 | 1012.8\n2023-01-03 | 42.1 | 65.4 | 1011.5",
        "inst": "Calculate comfort index (weighted average of temp and humidity)",
        "code": "df['comfort_index'] = (df['temperature'] * 0.7) + (df['humidity'] * 0.3)"
    },
    {
        "ctx": "employee_id | name | department | salary | rating\nE101 | John | Sales | 75000 | 4.5\nE102 | Sarah | Marketing | 82000 | 4.2\nE103 | Mike | IT | 68000 | 3.8",
        "inst": "Calculate performance-adjusted salary (salary / rating)",
        "code": "df['performance_ratio'] = df['salary'] / df['rating']"
    },
    {
        "ctx": "order_id | customer_id | items | total | date\n1001 | 101 | 3 | 45.99 | 2023-01-15\n1002 | 102 | 1 | 12.50 | 2023-02-10\n1003 | 101 | 5 | 87.25 | 2023-03-01",
        "inst": "Calculate customer lifetime value (total spend * purchase frequency)",
        "code": "df['lifetime_value'] = df.groupby('customer_id')['total'].transform('sum') * df.groupby('customer_id')['customer_id'].transform('count')"
    },
    {
        "ctx": "product_id | name | price | category | sales\n101 | Widget | 19.99 | A | 1200\n102 | Gadget | 29.99 | B | 850\n103 | Tool | 14.99 | A | 1500",
        "inst": "Calculate revenue and profit margin (assuming 30% COGS)",
        "code": "df['revenue'] = df['price'] * df['sales']\ndf['profit_margin'] = (df['price'] * 0.7) / df['price'] * 100"
    },
    {
        "ctx": "student_id | name | test1 | test2 | test3\nS101 | Alice | 85 | 92 | 88\nS102 | Bob | 78 | 85 | 82\nS103 | Carol | 90 | 85 | 92",
        "inst": "Calculate improvement from test1 to test3",
        "code": "df['improvement'] = df['test3'] - df['test1']"
    },
    {
        "ctx": "date | page_views | unique_visitors | conversions\n2023-01-01 | 1200 | 850 | 85\n2023-01-02 | 1500 | 920 | 120\n2023-01-03 | 1800 | 1050 | 95",
        "inst": "Calculate conversion rate and value per visitor ($10 per conversion)",
        "code": "df['conversion_rate'] = (df['conversions'] / df['unique_visitors']) * 100\ndf['value_per_visitor'] = (df['conversions'] * 10) / df['unique_visitors']"
    },
    {
        "ctx": "transaction_id | customer_id | amount | date\nT1001 | C101 | 120.50 | 2023-01-15\nT1002 | C102 | 85.75 | 2023-02-10\nT1003 | C101 | 210.00 | 2023-03-01",
        "inst": "Calculate customer purchase frequency (days between purchases)",
        "code": "df['purchase_frequency'] = df.sort_values('date').groupby('customer_id')['date'].diff().dt.days.mean()"
    },
    {
        "ctx": "product_id | name | price | category | sales\n101 | Widget | 19.99 | A | 1200\n102 | Gadget | 29.99 | B | 850\n103 | Tool | 14.99 | A | 1500",
        "inst": "Calculate market share within each category",
        "code": "df['market_share'] = df['sales'] / df.groupby('category')['sales'].transform('sum') * 100"
    },
    {
        "ctx": "employee_id | name | department | salary | rating\nE101 | John | Sales | 75000 | 4.5\nE102 | Sarah | Marketing | 82000 | 4.2\nE103 | Mike | IT | 68000 | 3.8",
        "inst": "Calculate salary competitiveness (salary vs department average)",
        "code": "df['salary_ratio'] = df['salary'] / df.groupby('department')['salary'].transform('mean')"
    },
    {
        "ctx": "date | temperature | humidity | precipitation\n2023-01-01 | 32.5 | 45.2 | 0.2\n2023-01-02 | 28.3 | 52.1 | 0.5\n2023-01-03 | 42.1 | 65.4 | 0.0",
        "inst": "Calculate weighted weather score (50% temp, 30% humidity, 20% precip)",
        "code": "df['weather_score'] = (df['temperature']*0.5) + (df['humidity']*0.3) + (df['precipitation']*0.2)"
    },
    {
        "ctx": "customer_id | name | join_date | total_spent | purchases\n1001 | John | 2022-05-15 | 1200 | 12\n1002 | Sarah | 2023-01-10 | 850 | 5\n1003 | Mike | 2021-11-30 | 2500 | 23",
        "inst": "Calculate average order value and purchase frequency",
        "code": "df['avg_order_value'] = df['total_spent'] / df['purchases']\ndf['purchase_frequency'] = df['purchases'] / ((pd.Timestamp.today() - pd.to_datetime(df['join_date'])).dt.days * 30"
    },
    {
        "ctx": "product_id | name | price | category | sales | returns\n101 | Widget | 19.99 | A | 1200 | 120\n102 | Gadget | 29.99 | B | 850 | 75\n103 | Tool | 14.99 | A | 1500 | 90",
        "inst": "Calculate net sales and return rate by category",
        "code": "df['net_sales'] = df['sales'] - df['returns']\ndf.groupby('category').agg({'net_sales':'sum', 'returns':'mean'})"
    },
    {
        "ctx": "student_id | name | grade | test1 | test2 | test3\nS101 | Alice | A | 85 | 92 | 88\nS102 | Bob | B | 78 | 85 | 82\nS103 | Carol | A | 90 | 85 | 92",
        "inst": "Calculate average and standard deviation by grade",
        "code": "df.groupby('grade').agg({'test1':['mean','std'], 'test2':['mean','std'], 'test3':['mean','std']})"
    },
    {
        "ctx": "date | product | sales | price | cost\n2023-01-01 | A | 1200 | 19.99 | 12.00\n2023-01-02 | B | 1500 | 29.99 | 18.00\n2023-01-03 | A | 1800 | 19.99 | 12.00",
        "inst": "Calculate gross profit and margin",
        "code": "df['gross_profit'] = (df['price'] - df['cost']) * df['sales']\ndf['gross_margin'] = ((df['price'] - df['cost']) / df['price']) * 100"
    },
    {
        "ctx": "employee_id | name | department | salary | years | rating\nE101 | John | Sales | 75000 | 5 | 4.5\nE102 | Sarah | Marketing | 82000 | 3 | 4.2\nE103 | Mike | IT | 68000 | 7 | 3.8",
        "inst": "Calculate composite performance score (rating * years / salary norm)",
        "code": "df['performance_score'] = (df['rating'] * df['years']) / (df['salary'] / df['salary'].mean())"
    },
    {
        "ctx": "order_id | customer_id | items | total | date\n1001 | 101 | 3 | 45.99 | 2023-01-15\n1002 | 102 | 1 | 12.50 | 2023-02-10\n1003 | 101 | 5 | 87.25 | 2023-03-01",
        "inst": "Calculate 30-day customer retention rate",
        "code": "df['next_order_date'] = df.sort_values('date').groupby('customer_id')['date'].shift(-1)\ndf['retained'] = (df['next_order_date'] - df['date']).dt.days <= 30"
    },
    {
        "ctx": "product_id | name | price | category | sales | returns\n101 | Widget | 19.99 | A | 1200 | 120\n102 | Gadget | 29.99 | B | 850 | 75\n103 | Tool | 14.99 | A | 1500 | 90",
        "inst": "Calculate quality score (1 - return rate)",
        "code": "df['quality_score'] = 1 - (df['returns'] / df['sales'])"
    },
    {
        "ctx": "date | temperature | humidity | precipitation | wind\n2023-01-01 | 32.5 | 45.2 | 0.2 | 10\n2023-01-02 | 28.3 | 52.1 | 0.5 | 15\n2023-01-03 | 42.1 | 65.4 | 0.0 | 8",
        "inst": "Calculate weather severity index",
        "code": "df['severity_index'] = (df['temperature']/50) + (df['humidity']/100) + df['precipitation'] + (df['wind']/20)"
    },
    {
        "ctx": "customer_id | name | join_date | total_spent | purchases | last_purchase\n1001 | John | 2022-05-15 | 1200 | 12 | 2023-04-01\n1002 | Sarah | 2023-01-10 | 850 | 5 | 2023-05-15\n1003 | Mike | 2021-11-30 | 2500 | 23 | 2023-03-10",
        "inst": "Calculate RFM score (Recency, Frequency, Monetary)",
        "code": "df['recency'] = (pd.Timestamp.today() - pd.to_datetime(df['last_purchase'])).dt.days\ndf['rfm_score'] = pd.qcut(df['recency'], q=5, labels=[5,4,3,2,1]).astype(int) + pd.qcut(df['frequency'], q=5, labels=[1,2,3,4,5]).astype(int) + pd.qcut(df['monetary'], q=5, labels=[1,2,3,4,5]).astype(int)"
    },
    {
        "ctx": "product_id | name | price | category | sales | returns | cost\n101 | Widget | 19.99 | A | 1200 | 120 | 12.00\n102 | Gadget | 29.99 | B | 850 | 75 | 18.00\n103 | Tool | 14.99 | A | 1500 | 90 | 9.00",
        "inst": "Calculate ROI (Return on Investment)",
        "code": "df['roi'] = ((df['price'] - df['cost']) * df['sales']) / (df['cost'] * df['sales']) * 100"
    },
    {
        "ctx": "student_id | name | grade | test1 | test2 | test3 | attendance\nS101 | Alice | A | 85 | 92 | 88 | 95\nS102 | Bob | B | 78 | 85 | 82 | 88\nS103 | Carol | A | 90 | 85 | 92 | 92",
        "inst": "Calculate weighted final score (tests 80%, attendance 20%)",
        "code": "df['final_score'] = (df[['test1','test2','test3']].mean(axis=1)*0.8) + (df['attendance']*0.2)"
    },
    {
        "ctx": "date | product | sales | price | cost | inventory\n2023-01-01 | A | 1200 | 19.99 | 12.00 | 5000\n2023-01-02 | B | 1500 | 29.99 | 18.00 | 3000\n2023-01-03 | A | 1800 | 19.99 | 12.00 | 3200",
        "inst": "Calculate days of inventory remaining",
        "code": "df['days_inventory'] = df['inventory'] / df['sales'] * 30"
    },
    {
        "ctx": "employee_id | name | department | salary | years | rating | projects\nE101 | John | Sales | 75000 | 5 | 4.5 | 12\nE102 | Sarah | Marketing | 82000 | 3 | 4.2 | 8\nE103 | Mike | IT | 68000 | 7 | 3.8 | 15",
        "inst": "Calculate productivity score (projects per year * rating)",
        "code": "df['productivity'] = (df['projects'] / df['years']) * df['rating']"
    },
    {
        "ctx": "order_id | customer_id | items | total | date | discount\n1001 | 101 | 3 | 45.99 | 2023-01-15 | 0.1\n1002 | 102 | 1 | 12.50 | 2023-02-10 | 0.0\n1003 | 101 | 5 | 87.25 | 2023-03-01 | 0.15",
        "inst": "Calculate pre-discount amount and discount effectiveness",
        "code": "df['pre_discount'] = df['total'] / (1 - df['discount'])\ndf['discount_effect'] = (df['pre_discount'] - df['total']) / df['pre_discount'] * 100"
    },
    {
        "ctx": "product_id | name | price | category | sales | returns | cost | inventory\n101 | Widget | 19.99 | A | 1200 | 120 | 12.00 | 5000\n102 | Gadget | 29.99 | B | 850 | 75 | 18.00 | 3000\n103 | Tool | 14.99 | A | 1500 | 90 | 9.00 | 3200",
        "inst": "Calculate inventory turnover ratio",
        "code": "df['turnover'] = df['sales'] / df['inventory'] * 12"
    },
    {
        "ctx": "date | product | sales | price | cost | inventory | competitor_price\n2023-01-01 | A | 1200 | 19.99 | 12.00 | 5000 | 18.99\n2023-01-02 | B | 1500 | 29.99 | 18.00 | 3000 | 27.50\n2023-01-03 | A | 1800 | 19.99 | 12.00 | 3200 | 18.99",
        "inst": "Calculate price competitiveness index",
        "code": "df['price_index'] = (df['price'] / df['competitor_price']) * 100"
    },
    {
        "ctx": "student_id | name | grade | test1 | test2 | test3 | attendance | participation\nS101 | Alice | A | 85 | 92 | 88 | 95 | 90\nS102 | Bob | B | 78 | 85 | 82 | 88 | 85\nS103 | Carol | A | 90 | 85 | 92 | 92 | 88",
        "inst": "Calculate engagement score (weighted average)",
        "code": "df['engagement'] = (df['attendance']*0.6) + (df['participation']*0.4)"
    },
    {
        "ctx": "employee_id | name | department | salary | years | rating | projects | training_hours\nE101 | John | Sales | 75000 | 5 | 4.5 | 12 | 40\nE102 | Sarah | Marketing | 82000 | 3 | 4.2 | 8 | 35\nE103 | Mike | IT | 68000 | 7 | 3.8 | 15 | 50",
        "inst": "Calculate training ROI (rating improvement per training hour)",
        "code": "df['training_roi'] = df['rating'] / df['training_hours']"
    },
    {
        "ctx": "order_id | customer_id | items | total | date | discount | shipping_cost\n1001 | 101 | 3 | 45.99 | 2023-01-15 | 0.1 | 5.99\n1002 | 102 | 1 | 12.50 | 2023-02-10 | 0.0 | 3.99\n1003 | 101 | 5 | 87.25 | 2023-03-01 | 0.15 | 0.00",
        "inst": "Calculate net revenue after discounts and shipping",
        "code": "df['net_revenue'] = df['total'] - df['shipping_cost']"
    },
    {
        "ctx": "product_id | name | price | category | sales | returns | cost | inventory | competitor_price\n101 | Widget | 19.99 | A | 1200 | 120 | 12.00 | 5000 | 18.99\n102 | Gadget | 29.99 | B | 850 | 75 | 18.00 | 3000 | 27.50\n103 | Tool | 14.99 | A | 1500 | 90 | 9.00 | 3200 | 13.99",
        "inst": "Calculate price elasticity of demand",
        "code": "df['elasticity'] = ((df['sales'].pct_change()) / (df['price'].pct_change()))"
    },
    {
        "ctx": "date | product | sales | price | cost | inventory | marketing_spend\n2023-01-01 | A | 1200 | 19.99 | 12.00 | 5000 | 500\n2023-01-02 | B | 1500 | 29.99 | 18.00 | 3000 | 750\n2023-01-03 | A | 1800 | 19.99 | 12.00 | 3200 | 600",
        "inst": "Calculate marketing ROI",
        "code": "df['marketing_roi'] = ((df['price'] - df['cost']) * df['sales']) / df['marketing_spend']"
    },
    {
        "ctx": "student_id | name | grade | test1 | test2 | test3 | attendance | participation | homework\nS101 | Alice | A | 85 | 92 | 88 | 95 | 90 | 92\nS102 | Bob | B | 78 | 85 | 82 | 88 | 85 | 85\nS103 | Carol | A | 90 | 85 | 92 | 92 | 88 | 90",
        "inst": "Calculate comprehensive performance score",
        "code": "df['performance'] = (df[['test1','test2','test3']].mean(axis=1)*0.6) + (df['attendance']*0.1) + (df['participation']*0.1) + (df['homework']*0.2)"
    },
    {
        "ctx": "employee_id | name | department | salary | years | rating | projects | training_hours | sick_days\nE101 | John | Sales | 75000 | 5 | 4.5 | 12 | 40 | 2\nE102 | Sarah | Marketing | 82000 | 3 | 4.2 | 8 | 35 | 1\nE103 | Mike | IT | 68000 | 7 | 3.8 | 15 | 50 | 4",
        "inst": "Calculate overall employee effectiveness score",
        "code": "df['effectiveness'] = (df['rating']*0.4) + (df['projects']/df['projects'].max()*0.3) + ((1 - (df['sick_days']/10))*0.2 + (df['training_hours']/df['training_hours'].max()*0.1)"
    },
    {
        "ctx": "order_id | customer_id | items | total | date | discount | shipping_cost | payment_method\n1001 | 101 | 3 | 45.99 | 2023-01-15 | 0.1 | 5.99 | Credit\n1002 | 102 | 1 | 12.50 | 2023-02-10 | 0.0 | 3.99 | PayPal\n1003 | 101 | 5 | 87.25 | 2023-03-01 | 0.15 | 0.00 | Credit",
        "inst": "Calculate payment processing cost (2% credit, 3% PayPal)",
        "code": "df['processing_cost'] = df.apply(lambda x: x['total']*0.02 if x['payment_method']=='Credit' else x['total']*0.03, axis=1)"
    },
    {
        "ctx": "product_id | name | price | category | sales | returns | cost | inventory | competitor_price | marketing_spend\n101 | Widget | 19.99 | A | 1200 | 120 | 12.00 | 5000 | 18.99 | 500\n102 | Gadget | 29.99 | B | 850 | 75 | 18.00 | 3000 | 27.50 | 750\n103 | Tool | 14.99 | A | 1500 | 90 | 9.00 | 3200 | 13.99 | 600",
        "inst": "Calculate comprehensive product profitability score",
        "code": "df['profitability'] = ((df['price'] - df['cost']) / df['cost']) * 0.5 + (df['sales'] / df['sales'].max()) * 0.3 + (1 - (df['returns'] / df['sales'])) * 0.2"
    },
    {
        "ctx": "date | product | sales | price | cost | inventory | marketing_spend | advertising\n2023-01-01 | A | 1200 | 19.99 | 12.00 | 5000 | 500 | 'Google'\n2023-01-02 | B | 1500 | 29.99 | 18.00 | 3000 | 750 | 'Facebook'\n2023-01-03 | A | 1800 | 19.99 | 12.00 | 3200 | 600 | 'Google'",
        "inst": "Calculate advertising channel effectiveness",
        "code": "df.groupby('advertising').agg({'sales':'sum', 'marketing_spend':'sum'}).eval('sales / marketing_spend')"
    },
    {
        "ctx": "student_id | name | grade | test1 | test2 | test3 | attendance | participation | homework | extracurricular\nS101 | Alice | A | 85 | 92 | 88 | 95 | 90 | 92 | 5\nS102 | Bob | B | 78 | 85 | 82 | 88 | 85 | 85 | 3\nS103 | Carol | A | 90 | 85 | 92 | 92 | 88 | 90 | 4",
        "inst": "Calculate holistic student performance index",
        "code": "df['performance_index'] = (df[['test1','test2','test3']].mean(axis=1)*0.5) + (df['attendance']*0.1) + (df['participation']*0.1) + (df['homework']*0.2) + (df['extracurricular']*0.1)"
    },
    {
        "ctx": "employee_id | name | department | salary | years | rating | projects | training_hours | sick_days | certifications\nE101 | John | Sales | 75000 | 5 | 4.5 | 12 | 40 | 2 | 3\nE102 | Sarah | Marketing | 82000 | 3 | 4.2 | 8 | 35 | 1 | 2\nE103 | Mike | IT | 68000 | 7 | 3.8 | 15 | 50 | 4 | 5",
        "inst": "Calculate employee value score",
        "code": "df['value_score'] = (df['rating']*0.3) + (df['projects']/df['projects'].max()*0.2) + (df['certifications']/5*0.2) + ((1 - (df['sick_days']/10))*0.1) + (df['training_hours']/df['training_hours'].max()*0.2)"
    },
    {
        "ctx": "order_id | customer_id | items | total | date | discount | shipping_cost | payment_method | customer_rating\n1001 | 101 | 3 | 45.99 | 2023-01-15 | 0.1 | 5.99 | Credit | 5\n1002 | 102 | 1 | 12.50 | 2023-02-10 | 0.0 | 3.99 | PayPal | 4\n1003 | 101 | 5 | 87.25 | 2023-03-01 | 0.15 | 0.00 | Credit | 5",
        "inst": "Calculate customer satisfaction impact on revenue",
        "code": "df['satisfaction_revenue'] = df['total'] * df['customer_rating'] / 5"
    },
    {
        "ctx": "product_id | name | price | category | sales | returns | cost | inventory | competitor_price | marketing_spend | customer_rating\n101 | Widget | 19.99 | A | 1200 | 120 | 12.00 | 5000 | 18.99 | 500 | 4.5\n102 | Gadget | 29.99 | B | 850 | 75 | 18.00 | 3000 | 27.50 | 750 | 4.2\n103 | Tool | 14.99 | A | 1500 | 90 | 9.00 | 3200 | 13.99 | 600 | 4.7",
        "inst": "Calculate product success score",
        "code": "df['success_score'] = ((df['price'] - df['cost']) / df['cost']) * 0.4 + (df['sales'] / df['sales'].max()) * 0.3 + (df['customer_rating'] / 5) * 0.2 + (1 - (df['returns'] / df['sales'])) * 0.1"
    },
    {
        "ctx": "id | product | cost | price\n1 | Widget | 10.50 | 19.99\n2 | Gadget | 15.75 | 29.99\n3 | Tool | 7.25 | 14.99",
        "inst": "Calculate profit margin percentage",
        "code": "df['margin_pct'] = ((df['price'] - df['cost']) / df['price']) * 100"
    },
    {
        "ctx": "employee | department | salary | years\nJohn | Sales | 75000 | 5\nSarah | Marketing | 82000 | 3\nMike | IT | 68000 | 7",
        "inst": "Calculate salary percentile within department",
        "code": "df['salary_percentile'] = df.groupby('department')['salary'].rank(pct=True) * 100"
    },
    {
        "ctx": "date | temperature | city\n2023-01-01 | 32.5 | New York\n2023-01-02 | 28.3 | Chicago\n2023-01-03 | 42.1 | Miami",
        "inst": "Calculate 3-day moving average temperature by city",
        "code": "df['moving_avg'] = df.groupby('city')['temperature'].transform(lambda x: x.rolling(3).mean())"
    },
    {
        "ctx": "customer_id | purchases | total_spent\n1001 | 12 | 1200\n1002 | 5 | 850\n1003 | 23 | 2500",
        "inst": "Segment customers into quintiles by spending",
        "code": "df['spending_quintile'] = pd.qcut(df['total_spent'], q=5, labels=False)"
    },
    {
        "ctx": "product_id | name | category | price\n101 | Widget | A | 19.99\n102 | Gadget | B | 29.99\n103 | Tool | A | 14.99",
        "inst": "Calculate z-score for prices within each category",
        "code": "df['price_zscore'] = df.groupby('category')['price'].transform(lambda x: (x - x.mean())/x.std())"
    },
    {
        "ctx": "student | test1 | test2 | test3\nAlice | 85 | 92 | 88\nBob | 78 | 85 | 82\nCarol | 90 | 85 | 92",
        "inst": "Calculate test score volatility (standard deviation)",
        "code": "df['score_volatility'] = df[['test1','test2','test3']].std(axis=1)"
    },
    {
        "ctx": "transaction_id | customer_id | amount | date\nT1001 | C101 | 120.50 | 2023-01-15\nT1002 | C102 | 85.75 | 2023-02-10\nT1003 | C101 | 210.00 | 2023-03-01",
        "inst": "Calculate cumulative spending per customer",
        "code": "df['cumulative_spend'] = df.groupby('customer_id')['amount'].cumsum()"
    },
    {
        "ctx": "date | revenue | expenses\n2023-01-01 | 12000 | 8500\n2023-01-02 | 15000 | 9200\n2023-01-03 | 18000 | 10500",
        "inst": "Calculate running profit margin",
        "code": "df['running_margin'] = (df['revenue'].cumsum() - df['expenses'].cumsum()) / df['revenue'].cumsum() * 100"
    },
    {
        "ctx": "product_id | name | price | launch_date\n101 | Widget | 19.99 | 2022-05-15\n102 | Gadget | 29.99 | 2023-01-10\n103 | Tool | 14.99 | 2021-11-30",
        "inst": "Calculate months since product launch",
        "code": "df['months_since_launch'] = ((pd.Timestamp.today() - pd.to_datetime(df['launch_date'])).dt.days / 30).astype(int)"
    },
    {
        "ctx": "employee_id | name | salary | start_date\nE101 | John | 75000 | 2018-05-15\nE102 | Sarah | 82000 | 2020-01-10\nE103 | Mike | 68000 | 2016-11-30",
        "inst": "Calculate salary growth per year (assuming starting at 50k)",
        "code": "df['years_employed'] = ((pd.Timestamp.today() - pd.to_datetime(df['start_date'])).dt.days / 365)\ndf['yearly_growth'] = (df['salary'] - 50000) / df['years_employed']"
    },
    {
        "ctx": "order_id | customer_id | items | total\n1001 | 101 | 3 | 45.99\n1002 | 102 | 1 | 12.50\n1003 | 101 | 5 | 87.25",
        "inst": "Calculate customer lifetime value (CLV)",
        "code": "df['clv'] = df.groupby('customer_id')['total'].transform('sum') * 0.3" 
    },
    {
        "ctx": "date | product | sales | returns\n2023-01-01 | A | 1200 | 120\n2023-01-02 | B | 1500 | 75\n2023-01-03 | A | 1800 | 90",
        "inst": "Calculate net promoter score (NPS) approximation",
        "code": "df['nps_score'] = ((df['sales'] - df['returns']) / df['sales']) * 100 - 50"
    },
    {
        "ctx": "student_id | name | grade | attendance\nS101 | Alice | A | 95\nS102 | Bob | B | 88\nS103 | Carol | A | 92",
        "inst": "Calculate attendance percentile",
        "code": "df['attendance_percentile'] = df['attendance'].rank(pct=True) * 100"
    },
    {
        "ctx": "property_id | bedrooms | bathrooms | sq_ft | price\nPROP001 | 3 | 2 | 1800 | 350000\nPROP002 | 4 | 3 | 2400 | 475000\nPROP003 | 2 | 1 | 1200 | 275000",
        "inst": "Calculate price per bedroom and bathroom",
        "code": "df['price_per_room'] = df['price'] / (df['bedrooms'] + df['bathrooms'])"
    },
    {
        "ctx": "employee_id | name | department | salary | rating\nE101 | John | Sales | 75000 | 4.5\nE102 | Sarah | Marketing | 82000 | 4.2\nE103 | Mike | IT | 68000 | 3.8",
        "inst": "Calculate salary to rating ratio",
        "code": "df['salary_rating_ratio'] = df['salary'] / df['rating']"
    },
    {
        "ctx": "date | product | sales | price | inventory\n2023-01-01 | A | 1200 | 19.99 | 5000\n2023-01-02 | B | 1500 | 29.99 | 3000\n2023-01-03 | A | 1800 | 19.99 | 3200",
        "inst": "Calculate days to stockout at current sales rate",
        "code": "df['days_to_stockout'] = df['inventory'] / (df['sales'] / 30)"
    },
    {
        "ctx": "customer_id | name | purchases | total_spent | last_purchase\n1001 | John | 12 | 1200 | 2023-04-01\n1002 | Sarah | 5 | 850 | 2023-05-15\n1003 | Mike | 23 | 2500 | 2023-03-10",
        "inst": "Calculate customer health score",
        "code": "df['health_score'] = (df['purchases']/df['purchases'].max()*40) + (df['total_spent']/df['total_spent'].max()*40) + ((1 - (pd.Timestamp.today() - pd.to_datetime(df['last_purchase'])).dt.days/365)*20)"
    },
    {
        "ctx": "student_id | name | math | science | english | attendance\nS101 | Alice | 85 | 92 | 88 | 95\nS102 | Bob | 78 | 85 | 82 | 88\nS103 | Carol | 90 | 85 | 92 | 92",
        "inst": "Calculate weighted final grade",
        "code": "df['final_grade'] = (df['math']*0.4) + (df['science']*0.3) + (df['english']*0.2) + (df['attendance']*0.1)"
    },
    {
        "ctx": "transaction_id | customer_id | amount | date | category\nT1001 | C101 | 120.50 | 2023-01-15 | Electronics\nT1002 | C102 | 85.75 | 2023-02-10 | Clothing\nT1003 | C101 | 210.00 | 2023-03-01 | Electronics",
        "inst": "Calculate average spend per category",
        "code": "df.groupby('category')['amount'].mean()"
    },
    {
        "ctx": "date | product | sales | price | cost | marketing\n2023-01-01 | A | 1200 | 19.99 | 12.00 | 500\n2023-01-02 | B | 1500 | 29.99 | 18.00 | 750\n2023-01-03 | A | 1800 | 19.99 | 12.00 | 600",
        "inst": "Calculate marketing efficiency",
        "code": "df['marketing_efficiency'] = ((df['price'] - df['cost']) * df['sales']) / df['marketing']"
    },
    {
        "ctx": "employee_id | name | department | salary | projects | rating\nE101 | John | Sales | 75000 | 12 | 4.5\nE102 | Sarah | Marketing | 82000 | 8 | 4.2\nE103 | Mike | IT | 68000 | 15 | 3.8",
        "inst": "Calculate productivity index",
        "code": "df['productivity'] = (df['projects'] * df['rating']) / df['salary'] * 10000"
    },
    {
        "ctx": "order_id | customer_id | items | total | date | channel\n1001 | 101 | 3 | 45.99 | 2023-01-15 | Online\n1002 | 102 | 1 | 12.50 | 2023-02-10 | In-store\n1003 | 101 | 5 | 87.25 | 2023-03-01 | Online",
        "inst": "Calculate average order value by channel",
        "code": "df.groupby('channel')['total'].mean()"
    },
    {
        "ctx": "product_id | name | price | category | sales | returns\n101 | Widget | 19.99 | A | 1200 | 120\n102 | Gadget | 29.99 | B | 850 | 75\n103 | Tool | 14.99 | A | 1500 | 90",
        "inst": "Calculate return rate by category",
        "code": "df.groupby('category').apply(lambda x: x['returns'].sum() / x['sales'].sum() * 100)"
    },
    {
        "ctx": "date | temperature | humidity | precipitation\n2023-01-01 | 32.5 | 45.2 | 0.2\n2023-01-02 | 28.3 | 52.1 | 0.5\n2023-01-03 | 42.1 | 65.4 | 0.0",
        "inst": "Calculate weather discomfort index",
        "code": "df['discomfort_index'] = df['temperature'] + (df['humidity'] * 0.7)"
    },
    {
        "ctx": "student_id | name | grade | test1 | test2 | test3 | improvement\nS101 | Alice | A | 85 | 92 | 88 | 3\nS102 | Bob | B | 78 | 85 | 82 | 4\nS103 | Carol | A | 90 | 85 | 92 | 2",
        "inst": "Calculate weighted score with improvement bonus",
        "code": "df['weighted_score'] = (df[['test1','test2','test3']].mean(axis=1)) + df['improvement']"
    },
    {
        "ctx": "transaction_id | customer_id | amount | date | loyalty_tier\nT1001 | C101 | 120.50 | 2023-01-15 | Gold\nT1002 | C102 | 85.75 | 2023-02-10 | Silver\nT1003 | C101 | 210.00 | 2023-03-01 | Gold",
        "inst": "Calculate average spend by loyalty tier",
        "code": "df.groupby('loyalty_tier')['amount'].mean()"
    },
    {
        "ctx": "date | product | sales | price | cost | inventory | rating\n2023-01-01 | A | 1200 | 19.99 | 12.00 | 5000 | 4.5\n2023-01-02 | B | 1500 | 29.99 | 18.00 | 3000 | 4.2\n2023-01-03 | A | 1800 | 19.99 | 12.00 | 3200 | 4.7",
        "inst": "Calculate quality-adjusted inventory value",
        "code": "df['quality_inventory_value'] = (df['price'] * df['inventory']) * (df['rating'] / 5)"
    },
    {
        "ctx": "employee_id | name | department | salary | years | rating\nE101 | John | Sales | 75000 | 5 | 4.5\nE102 | Sarah | Marketing | 82000 | 3 | 4.2\nE103 | Mike | IT | 68000 | 7 | 3.8",
        "inst": "Calculate expected salary based on experience and performance",
        "code": "df['expected_salary'] = 50000 + (df['years'] * 5000) + (df['rating'] * 10000)"
    },
    {
        "ctx": "order_id | customer_id | items | total | date | discount | shipping\n1001 | 101 | 3 | 45.99 | 2023-01-15 | 0.1 | 5.99\n1002 | 102 | 1 | 12.50 | 2023-02-10 | 0.0 | 3.99\n1003 | 101 | 5 | 87.25 | 2023-03-01 | 0.15 | 0.00",
        "inst": "Calculate net profit (assuming 30% COGS)",
        "code": "df['net_profit'] = (df['total'] * 0.7) - df['shipping']"
    },
    {
        "ctx": "product_id | name | price | category | sales | returns | cost\n101 | Widget | 19.99 | A | 1200 | 120 | 12.00\n102 | Gadget | 29.99 | B | 850 | 75 | 18.00\n103 | Tool | 14.99 | A | 1500 | 90 | 9.00",
        "inst": "Calculate profit after returns",
        "code": "df['net_profit'] = ((df['price'] - df['cost']) * (df['sales'] - df['returns']))"
    },
    {
        "ctx": "date | temperature | humidity | precipitation | wind\n2023-01-01 | 32.5 | 45.2 | 0.2 | 10\n2023-01-02 | 28.3 | 52.1 | 0.5 | 15\n2023-01-03 | 42.1 | 65.4 | 0.0 | 8",
        "inst": "Calculate wind chill factor",
        "code": "df['wind_chill'] = 35.74 + (0.6215 * df['temperature']) - (35.75 * (df['wind']**0.16)) + (0.4275 * df['temperature'] * (df['wind']**0.16))"
    },
    {
        "ctx": "student_id | name | grade | test1 | test2 | test3 | attendance\nS101 | Alice | A | 85 | 92 | 88 | 95\nS102 | Bob | B | 78 | 85 | 82 | 88\nS103 | Carol | A | 90 | 85 | 92 | 92",
        "inst": "Flag students with any test below 80",
        "code": "df['needs_improvement'] = (df[['test1','test2','test3']] < 80).any(axis=1)"
    },
    {
        "ctx": "transaction_id | customer_id | amount | date | payment_method\nT1001 | C101 | 120.50 | 2023-01-15 | Credit\nT1002 | C102 | 85.75 | 2023-02-10 | PayPal\nT1003 | C101 | 210.00 | 2023-03-01 | Credit",
        "inst": "Calculate payment method frequency",
        "code": "df['payment_method'].value_counts()"
    },
    {
        "ctx": "date | product | sales | price | cost | inventory | rating\n2023-01-01 | A | 1200 | 19.99 | 12.00 | 5000 | 4.5\n2023-01-02 | B | 1500 | 29.99 | 18.00 | 3000 | 4.2\n2023-01-03 | A | 1800 | 19.99 | 12.00 | 3200 | 4.7",
        "inst": "Calculate inventory turnover rate",
        "code": "df['turnover_rate'] = df['sales'] / df['inventory'] * 30"
    },
    {
        "ctx": "employee_id | name | department | salary | years | rating\nE101 | John | Sales | 75000 | 5 | 4.5\nE102 | Sarah | Marketing | 82000 | 3 | 4.2\nE103 | Mike | IT | 68000 | 7 | 3.8",
        "inst": "Calculate salary competitiveness score",
        "code": "df['competitiveness'] = (df['salary'] / df.groupby('department')['salary'].transform('mean')) * 100"
    },
    {
        "ctx": "order_id | customer_id | items | total | date | discount | shipping\n1001 | 101 | 3 | 45.99 | 2023-01-15 | 0.1 | 5.99\n1002 | 102 | 1 | 12.50 | 2023-02-10 | 0.0 | 3.99\n1003 | 101 | 5 | 87.25 | 2023-03-01 | 0.15 | 0.00",
        "inst": "Calculate discount effectiveness",
        "code": "df['discount_effect'] = df['discount'] / (df['total'] + df['shipping']) * 100"
    },
    {
        "ctx": "product_id | name | price | category | sales | returns | cost | inventory\n101 | Widget | 19.99 | A | 1200 | 120 | 12.00 | 5000\n102 | Gadget | 29.99 | B | 850 | 75 | 18.00 | 3000\n103 | Tool | 14.99 | A | 1500 | 90 | 9.00 | 3200",
        "inst": "Calculate inventory health score",
        "code": "df['inventory_health'] = (df['inventory'] / (df['sales'] / 30)) * (1 - (df['returns'] / df['sales']))"
    },
    {
        "ctx": "date | temperature | humidity | precipitation | wind\n2023-01-01 | 32.5 | 45.2 | 0.2 | 10\n2023-01-02 | 28.3 | 52.1 | 0.5 | 15\n2023-01-03 | 42.1 | 65.4 | 0.0 | 8",
        "inst": "Calculate comfort index with wind adjustment",
        "code": "df['comfort_index'] = (df['temperature'] * 0.6) + (df['humidity'] * 0.3) - (df['wind'] * 0.1)"
    },
    {
        "ctx": "student_id | name | grade | test1 | test2 | test3 | attendance | participation\nS101 | Alice | A | 85 | 92 | 88 | 95 | 90\nS102 | Bob | B | 78 | 85 | 82 | 88 | 85\nS103 | Carol | A | 90 | 85 | 92 | 92 | 88",
        "inst": "Calculate engagement-adjusted grade",
        "code": "df['adjusted_grade'] = (df[['test1','test2','test3']].mean(axis=1)) * (df['attendance'] * 0.005 + df['participation'] * 0.005)"
    },
    {
        "ctx": "transaction_id | customer_id | amount | date | category | loyalty_tier\nT1001 | C101 | 120.50 | 2023-01-15 | Electronics | Gold\nT1002 | C102 | 85.75 | 2023-02-10 | Clothing | Silver\nT1003 | C101 | 210.00 | 2023-03-01 | Electronics | Gold",
        "inst": "Calculate average spend by category and loyalty tier",
        "code": "df.groupby(['category', 'loyalty_tier'])['amount'].mean()"
    },
    {
        "ctx": "date | product | sales | price | cost | inventory | rating | marketing\n2023-01-01 | A | 1200 | 19.99 | 12.00 | 5000 | 4.5 | 500\n2023-01-02 | B | 1500 | 29.99 | 18.00 | 3000 | 4.2 | 750\n2023-01-03 | A | 1800 | 19.99 | 12.00 | 3200 | 4.7 | 600",
        "inst": "Calculate marketing ROI by product",
        "code": "df['marketing_roi'] = ((df['price'] - df['cost']) * df['sales']) / df['marketing']"
    },
    {
        "ctx": "employee_id | name | department | salary | years | rating | projects | certifications\nE101 | John | Sales | 75000 | 5 | 4.5 | 12 | 3\nE102 | Sarah | Marketing | 82000 | 3 | 4.2 | 8 | 2\nE103 | Mike | IT | 68000 | 7 | 3.8 | 15 | 5",
        "inst": "Calculate comprehensive employee score",
        "code": "df['employee_score'] = (df['rating']*0.4) + (df['projects']/df['projects'].max()*0.3) + (df['certifications']/5*0.2) + (df['years']/10*0.1)"
    },
    {
        "ctx": "order_id | customer_id | items | total | date | discount | shipping | payment_method\n1001 | 101 | 3 | 45.99 | 2023-01-15 | 0.1 | 5.99 | Credit\n1002 | 102 | 1 | 12.50 | 2023-02-10 | 0.0 | 3.99 | PayPal\n1003 | 101 | 5 | 87.25 | 2023-03-01 | 0.15 | 0.00 | Credit",
        "inst": "Calculate payment processing cost by method",
        "code": "df['processing_cost'] = df.apply(lambda x: x['total']*0.02 if x['payment_method']=='Credit' else x['total']*0.03 if x['payment_method']=='PayPal' else x['total']*0.01, axis=1)"
    },
    {
        "ctx": "product_id | name | price | category | sales | returns | cost | inventory | rating | marketing\n101 | Widget | 19.99 | A | 1200 | 120 | 12.00 | 5000 | 4.5 | 500\n102 | Gadget | 29.99 | B | 850 | 75 | 18.00 | 3000 | 4.2 | 750\n103 | Tool | 14.99 | A | 1500 | 90 | 9.00 | 3200 | 4.7 | 600",
        "inst": "Calculate product success index",
        "code": "df['success_index'] = ((df['price'] - df['cost']) / df['cost']) * 0.5 + (df['rating'] / 5) * 0.3 + (1 - (df['returns'] / df['sales'])) * 0.2"
    },
    {
        "ctx": "date | temperature | humidity | precipitation | wind | pressure\n2023-01-01 | 32.5 | 45.2 | 0.2 | 10 | 1013.2\n2023-01-02 | 28.3 | 52.1 | 0.5 | 15 | 1012.8\n2023-01-03 | 42.1 | 65.4 | 0.0 | 8 | 1011.5",
        "inst": "Calculate weather severity score",
        "code": "df['severity_score'] = (df['temperature']/50) + (df['humidity']/100) + df['precipitation'] + (df['wind']/20) + ((1013 - df['pressure'])/10)"
    },
    {
        "ctx": "student_id | name | grade | test1 | test2 | test3 | attendance | participation | homework\nS101 | Alice | A | 85 | 92 | 88 | 95 | 90 | 92\nS102 | Bob | B | 78 | 85 | 82 | 88 | 85 | 85\nS103 | Carol | A | 90 | 85 | 92 | 92 | 88 | 90",
        "inst": "Calculate comprehensive performance score",
        "code": "df['performance_score'] = (df[['test1','test2','test3']].mean(axis=1)*0.6) + (df['attendance']*0.1) + (df['participation']*0.1) + (df['homework']*0.2)"
    },
    {
        "ctx": "transaction_id | customer_id | amount | date | category | loyalty_tier | discount\nT1001 | C101 | 120.50 | 2023-01-15 | Electronics | Gold | 0.1\nT1002 | C102 | 85.75 | 2023-02-10 | Clothing | Silver | 0.0\nT1003 | C101 | 210.00 | 2023-03-01 | Electronics | Gold | 0.15",
        "inst": "Calculate net revenue by category and loyalty tier",
        "code": "df['net_revenue'] = df['amount'] * (1 - df['discount'])\ndf.groupby(['category', 'loyalty_tier'])['net_revenue'].sum()"
    },
    {
        "ctx": "date | product | sales | price | cost | inventory | rating | marketing | competitor_price\n2023-01-01 | A | 1200 | 19.99 | 12.00 | 5000 | 4.5 | 500 | 18.99\n2023-01-02 | B | 1500 | 29.99 | 18.00 | 3000 | 4.2 | 750 | 27.50\n2023-01-03 | A | 1800 | 19.99 | 12.00 | 3200 | 4.7 | 600 | 18.99",
        "inst": "Calculate price competitiveness and marketing efficiency",
        "code": "df['price_competitiveness'] = (df['price'] / df['competitor_price']) * 100\ndf['marketing_efficiency'] = ((df['price'] - df['cost']) * df['sales']) / df['marketing']"
    },
    {
        "ctx": "employee_id | name | department | salary | years | rating | projects | certifications | sick_days\nE101 | John | Sales | 75000 | 5 | 4.5 | 12 | 3 | 2\nE102 | Sarah | Marketing | 82000 | 3 | 4.2 | 8 | 2 | 1\nE103 | Mike | IT | 68000 | 7 | 3.8 | 15 | 5 | 4",
        "inst": "Calculate employee value score with attendance adjustment",
        "code": "df['value_score'] = (df['rating']*0.3) + (df['projects']/df['projects'].max()*0.2) + (df['certifications']/5*0.2) + (df['years']/10*0.2) + ((1 - (df['sick_days']/10))*0.1)"
    },
    {
        "ctx": "order_id | customer_id | items | total | date | discount | shipping | payment_method | customer_rating\n1001 | 101 | 3 | 45.99 | 2023-01-15 | 0.1 | 5.99 | Credit | 5\n1002 | 102 | 1 | 12.50 | 2023-02-10 | 0.0 | 3.99 | PayPal | 4\n1003 | 101 | 5 | 87.25 | 2023-03-01 | 0.15 | 0.00 | Credit | 5",
        "inst": "Calculate customer satisfaction impact on net profit",
        "code": "df['net_profit'] = (df['total'] * 0.7) - df['shipping']\ndf['satisfaction_profit'] = df['net_profit'] * (df['customer_rating'] / 5)"
    },
    {
        "ctx": "product_id | name | price | category | sales | returns | cost | inventory | rating | marketing | competitor_price\n101 | Widget | 19.99 | A | 1200 | 120 | 12.00 | 5000 | 4.5 | 500 | 18.99\n102 | Gadget | 29.99 | B | 850 | 75 | 18.00 | 3000 | 4.2 | 750 | 27.50\n103 | Tool | 14.99 | A | 1500 | 90 | 9.00 | 3200 | 4.7 | 600 | 13.99",
        "inst": "Calculate comprehensive product performance index",
        "code": "df['performance_index'] = ((df['price'] - df['cost']) / df['cost']) * 0.4 + (df['sales'] / df['sales'].max()) * 0.2 + (df['rating'] / 5) * 0.2 + (1 - (df['returns'] / df['sales'])) * 0.1 + (df['price'] / df['competitor_price']) * 0.1"
    },
    {
        "ctx": "date | temperature | humidity | precipitation | wind | pressure | air_quality\n2023-01-01 | 32.5 | 45.2 | 0.2 | 10 | 1013.2 | 45\n2023-01-02 | 28.3 | 52.1 | 0.5 | 15 | 1012.8 | 60\n2023-01-03 | 42.1 | 65.4 | 0.0 | 8 | 1011.5 | 55",
        "inst": "Calculate environmental health index",
        "code": "df['health_index'] = (df['temperature']/50) + (df['humidity']/100) + (df['precipitation']*2) + (df['wind']/20) + ((1013 - df['pressure'])/10) + (df['air_quality']/100)"
    },
    {
        "ctx": "student_id | name | grade | test1 | test2 | test3 | attendance | participation | homework | extracurricular\nS101 | Alice | A | 85 | 92 | 88 | 95 | 90 | 92 | 5\nS102 | Bob | B | 78 | 85 | 82 | 88 | 85 | 85 | 3\nS103 | Carol | A | 90 | 85 | 92 | 92 | 88 | 90 | 4",
        "inst": "Calculate holistic student assessment score",
        "code": "df['assessment_score'] = (df[['test1','test2','test3']].mean(axis=1)*0.5) + (df['attendance']*0.1) + (df['participation']*0.1) + (df['homework']*0.2) + (df['extracurricular']*0.1)"
    },
    {
        "ctx": "transaction_id | customer_id | amount | date | category | loyalty_tier | discount | customer_rating\nT1001 | C101 | 120.50 | 2023-01-15 | Electronics | Gold | 0.1 | 5\nT1002 | C102 | 85.75 | 2023-02-10 | Clothing | Silver | 0.0 | 4\nT1003 | C101 | 210.00 | 2023-03-01 | Electronics | Gold | 0.15 | 5",
        "inst": "Calculate customer value score",
        "code": "df['value_score'] = (df['amount'] / df['amount'].max()) * 0.5 + (df['customer_rating'] / 5) * 0.3 + (1 - df['discount']) * 0.2"
    },
    {
        "ctx": "date | product | sales | price | cost | inventory | rating | marketing | competitor_price | season\n2023-01-01 | A | 1200 | 19.99 | 12.00 | 5000 | 4.5 | 500 | 18.99 | Winter\n2023-01-02 | B | 1500 | 29.99 | 18.00 | 3000 | 4.2 | 750 | 27.50 | Winter\n2023-01-03 | A | 1800 | 19.99 | 12.00 | 3200 | 4.7 | 600 | 18.99 | Winter",
        "inst": "Calculate season-adjusted performance metrics",
        "code": "season_weights = {'Winter': 0.9, 'Spring': 1.0, 'Summer': 1.1, 'Fall': 1.0}\ndf['season_adjusted_sales'] = df['sales'] * df['season'].map(season_weights)"
    },
    {
        "ctx": "employee_id | name | department | salary | years | rating | projects | certifications | sick_days | training_hours\nE101 | John | Sales | 75000 | 5 | 4.5 | 12 | 3 | 2 | 40\nE102 | Sarah | Marketing | 82000 | 3 | 4.2 | 8 | 2 | 1 | 35\nE103 | Mike | IT | 68000 | 7 | 3.8 | 15 | 5 | 4 | 50",
        "inst": "Calculate comprehensive employee effectiveness index",
        "code": "df['effectiveness_index'] = (df['rating']*0.3) + (df['projects']/df['projects'].max()*0.2) + (df['certifications']/5*0.1) + (df['years']/10*0.1) + ((1 - (df['sick_days']/10))*0.1) + (df['training_hours']/df['training_hours'].max()*0.2)"
    },
    {
        "ctx": "order_id | customer_id | items | total | date | discount | shipping | payment_method | customer_rating | order_source\n1001 | 101 | 3 | 45.99 | 2023-01-15 | 0.1 | 5.99 | Credit | 5 | Web\n1002 | 102 | 1 | 12.50 | 2023-02-10 | 0.0 | 3.99 | PayPal | 4 | Mobile\n1003 | 101 | 5 | 87.25 | 2023-03-01 | 0.15 | 0.00 | Credit | 5 | Web",
        "inst": "Calculate channel-specific customer satisfaction metrics",
        "code": "df.groupby('order_source')['customer_rating'].mean()"
    },
    {
        "ctx": "product_id | name | price | category | sales | returns | cost | inventory | rating | marketing | competitor_price | season\n101 | Widget | 19.99 | A | 1200 | 120 | 12.00 | 5000 | 4.5 | 500 | 18.99 | Winter\n102 | Gadget | 29.99 | B | 850 | 75 | 18.00 | 3000 | 4.2 | 750 | 27.50 | Winter\n103 | Tool | 14.99 | A | 1500 | 90 | 9.00 | 3200 | 4.7 | 600 | 13.99 | Winter",
        "inst": "Calculate seasonally-adjusted product performance score",
        "code": "season_factors = {'Winter': 0.9, 'Spring': 1.0, 'Summer': 1.1, 'Fall': 1.0}\ndf['adjusted_performance'] = (((df['price'] - df['cost']) / df['cost']) * 0.4 + (df['sales'] / df['sales'].max()) * 0.2 + (df['rating'] / 5) * 0.2 + (1 - (df['returns'] / df['sales'])) * 0.1 + (df['price'] / df['competitor_price']) * 0.1) * df['season'].map(season_factors)"
    },
    {
        "ctx": "date | temperature | humidity | precipitation | wind | pressure | air_quality | location\n2023-01-01 | 32.5 | 45.2 | 0.2 | 10 | 1013.2 | 45 | Urban\n2023-01-02 | 28.3 | 52.1 | 0.5 | 15 | 1012.8 | 60 | Suburban\n2023-01-03 | 42.1 | 65.4 | 0.0 | 8 | 1011.5 | 55 | Rural",
        "inst": "Calculate location-adjusted environmental quality index",
        "code": "location_factors = {'Urban': 0.8, 'Suburban': 1.0, 'Rural': 1.2}\ndf['env_quality'] = ((100 - df['air_quality']) * 0.5 + (df['humidity'] * 0.3) + (df['precipitation'] * 20) + (df['wind'] * 0.2)) * df['location'].map(location_factors)"
    },
    {
        "ctx": "student_id | name | grade | test1 | test2 | test3 | attendance | participation | homework | extracurricular | learning_style\nS101 | Alice | A | 85 | 92 | 88 | 95 | 90 | 92 | 5 | Visual\nS102 | Bob | B | 78 | 85 | 82 | 88 | 85 | 85 | 3 | Auditory\nS103 | Carol | A | 90 | 85 | 92 | 92 | 88 | 90 | 4 | Kinesthetic",
        "inst": "Calculate learning-style adjusted performance score",
        "code": "style_factors = {'Visual': 1.0, 'Auditory': 0.95, 'Kinesthetic': 1.05}\ndf['adjusted_score'] = (df[['test1','test2','test3']].mean(axis=1)) * df['learning_style'].map(style_factors)"
    },
    {
        "ctx": "transaction_id | customer_id | amount | date | category | loyalty_tier | discount | customer_rating | order_channel\nT1001 | C101 | 120.50 | 2023-01-15 | Electronics | Gold | 0.1 | 5 | Online\nT1002 | C102 | 85.75 | 2023-02-10 | Clothing | Silver | 0.0 | 4 | Mobile\nT1003 | C101 | 210.00 | 2023-03-01 | Electronics | Gold | 0.15 | 5 | Web",
        "inst": "Calculate channel-specific customer value metrics",
        "code": "df.groupby('order_channel').agg({'amount':'mean', 'customer_rating':'mean', 'discount':'mean'})"
    },
    {
        "ctx": "date | product | sales | price | cost | inventory | rating | marketing | competitor_price | season | promotion\n2023-01-01 | A | 1200 | 19.99 | 12.00 | 5000 | 4.5 | 500 | 18.99 | Winter | Yes\n2023-01-02 | B | 1500 | 29.99 | 18.00 | 3000 | 4.2 | 750 | 27.50 | Winter | No\n2023-01-03 | A | 1800 | 19.99 | 12.00 | 3200 | 4.7 | 600 | 18.99 | Winter | Yes",
        "inst": "Calculate promotion effectiveness by season",
        "code": "df.groupby(['season', 'promotion']).agg({'sales':'sum', 'marketing':'sum'}).eval('sales / marketing')"
    },
    {
        "ctx": "employee_id | name | department | salary | years | rating | projects | certifications | sick_days | training_hours | education\nE101 | John | Sales | 75000 | 5 | 4.5 | 12 | 3 | 2 | 40 | Bachelor\nE102 | Sarah | Marketing | 82000 | 3 | 4.2 | 8 | 2 | 1 | 35 | Master\nE103 | Mike | IT | 68000 | 7 | 3.8 | 15 | 5 | 4 | 50 | PhD",
        "inst": "Calculate education-adjusted employee value score",
        "code": "education_factors = {'High School': 0.8, 'Bachelor': 1.0, 'Master': 1.2, 'PhD': 1.3}\ndf['value_score'] = (df['rating']*0.3 + df['projects']/df['projects'].max()*0.2 + df['certifications']/5*0.1 + df['years']/10*0.1 + (1 - df['sick_days']/10)*0.1 + df['training_hours']/df['training_hours'].max()*0.2) * df['education'].map(education_factors)"
    },
    {
        "ctx": "order_id | customer_id | items | total | date | discount | shipping | payment_method | customer_rating | order_source | delivery_time\n1001 | 101 | 3 | 45.99 | 2023-01-15 | 0.1 | 5.99 | Credit | 5 | Web | 2\n1002 | 102 | 1 | 12.50 | 2023-02-10 | 0.0 | 3.99 | PayPal | 4 | Mobile | 3\n1003 | 101 | 5 | 87.25 | 2023-03-01 | 0.15 | 0.00 | Credit | 5 | Web | 1",
        "inst": "Calculate delivery performance impact on customer satisfaction",
        "code": "df['delivery_impact'] = df['customer_rating'] / df['delivery_time']"
    },
    {
        "ctx": "product_id | name | price | category | sales | returns | cost | inventory | rating | marketing | competitor_price | season | eco_friendly\n101 | Widget | 19.99 | A | 1200 | 120 | 12.00 | 5000 | 4.5 | 500 | 18.99 | Winter | Yes\n102 | Gadget | 29.99 | B | 850 | 75 | 18.00 | 3000 | 4.2 | 750 | 27.50 | Winter | No\n103 | Tool | 14.99 | A | 1500 | 90 | 9.00 | 3200 | 4.7 | 600 | 13.99 | Winter | Yes",
        "inst": "Calculate sustainability-adjusted product score",
        "code": "df['sustainability_score'] = ((df['price'] - df['cost']) / df['cost']) * 0.4 + (df['sales'] / df['sales'].max()) * 0.2 + (df['rating'] / 5) * 0.2 + (1 - (df['returns'] / df['sales'])) * 0.1 + df['eco_friendly'].map({'Yes':0.1, 'No':0.0})"
    },
    {
        "ctx": "date | temperature | humidity | precipitation | wind | pressure | air_quality | location | season\n2023-01-01 | 32.5 | 45.2 | 0.2 | 10 | 1013.2 | 45 | Urban | Winter\n2023-01-02 | 28.3 | 52.1 | 0.5 | 15 | 1012.8 | 60 | Suburban | Winter\n2023-01-03 | 42.1 | 65.4 | 0.0 | 8 | 1011.5 | 55 | Rural | Winter",
        "inst": "Calculate season-and-location adjusted comfort index",
        "code": "season_factors = {'Winter': 0.9, 'Spring': 1.0, 'Summer': 1.1, 'Fall': 1.0}\nlocation_factors = {'Urban': 0.8, 'Suburban': 1.0, 'Rural': 1.2}\ndf['comfort_index'] = (df['temperature'] * 0.6 + df['humidity'] * 0.3 - df['wind'] * 0.1) * df['season'].map(season_factors) * df['location'].map(location_factors)"
    },
    {
        "ctx": "student_id | name | grade | test1 | test2 | test3 | attendance | participation | homework | extracurricular | learning_style | special_needs\nS101 | Alice | A | 85 | 92 | 88 | 95 | 90 | 92 | 5 | Visual | No\nS102 | Bob | B | 78 | 85 | 82 | 88 | 85 | 85 | 3 | Auditory | Yes\nS103 | Carol | A | 90 | 85 | 92 | 92 | 88 | 90 | 4 | Kinesthetic | No",
        "inst": "Calculate inclusive performance score with accommodations",
        "code": "df['inclusive_score'] = (df[['test1','test2','test3']].mean(axis=1)*0.5 + df['attendance']*0.1 + df['participation']*0.1 + df['homework']*0.2 + df['extracurricular']*0.1) * df['special_needs'].map({'Yes':1.1, 'No':1.0})"
    },
    {
        "ctx": "transaction_id | customer_id | amount | date | category | loyalty_tier | discount | customer_rating | order_channel | delivery_time\nT1001 | C101 | 120.50 | 2023-01-15 | Electronics | Gold | 0.1 | 5 | Online | 2\nT1002 | C102 | 85.75 | 2023-02-10 | Clothing | Silver | 0.0 | 4 | Mobile | 3\nT1003 | C101 | 210.00 | 2023-03-01 | Electronics | Gold | 0.15 | 5 | Web | 1",
        "inst": "Calculate comprehensive customer experience score",
        "code": "df['experience_score'] = (df['customer_rating']*0.5 + (1 - df['discount'])*0.2 + (1 / df['delivery_time'])*0.3) * df['loyalty_tier'].map({'Gold':1.2, 'Silver':1.0, 'Bronze':0.8})"
    },
    {
        "ctx": "date | product | sales | price | cost | inventory | rating | marketing | competitor_price | season | promotion | eco_friendly\n2023-01-01 | A | 1200 | 19.99 | 12.00 | 5000 | 4.5 | 500 | 18.99 | Winter | Yes | Yes\n2023-01-02 | B | 1500 | 29.99 | 18.00 | 3000 | 4.2 | 750 | 27.50 | Winter | No | No\n2023-01-03 | A | 1800 | 19.99 | 12.00 | 3200 | 4.7 | 600 | 18.99 | Winter | Yes | Yes",
        "inst": "Calculate holistic product performance index",
        "code": "df['performance_index'] = ((df['price'] - df['cost']) / df['cost']) * 0.4 + (df['sales'] / df['sales'].max()) * 0.2 + (df['rating'] / 5) * 0.1 + (1 - (df['returns'] / df['sales'])) * 0.1 + df['promotion'].map({'Yes':0.1, 'No':0.0}) + df['eco_friendly'].map({'Yes':0.1, 'No':0.0})"
    },
    {
        "ctx": "employee_id | name | department | salary | years | rating | projects | certifications | sick_days | training_hours | education | remote\nE101 | John | Sales | 75000 | 5 | 4.5 | 12 | 3 | 2 | 40 | Bachelor | No\nE102 | Sarah | Marketing | 82000 | 3 | 4.2 | 8 | 2 | 1 | 35 | Master | Yes\nE103 | Mike | IT | 68000 | 7 | 3.8 | 15 | 5 | 4 | 50 | PhD | Yes",
        "inst": "Calculate remote work-adjusted employee productivity",
        "code": "df['remote_productivity'] = (df['rating']*0.3 + df['projects']/df['projects'].max()*0.2 + df['certifications']/5*0.1 + df['years']/10*0.1 + (1 - df['sick_days']/10)*0.1 + df['training_hours']/df['training_hours'].max()*0.2) * df['remote'].map({'Yes':1.1, 'No':1.0})"
    },
    {
        "ctx": "order_id | customer_id | items | total | date | discount | shipping | payment_method | customer_rating | order_source | delivery_time | return_status\n1001 | 101 | 3 | 45.99 | 2023-01-15 | 0.1 | 5.99 | Credit | 5 | Web | 2 | No\n1002 | 102 | 1 | 12.50 | 2023-02-10 | 0.0 | 3.99 | PayPal | 4 | Mobile | 3 | Yes\n1003 | 101 | 5 | 87.25 | 2023-03-01 | 0.15 | 0.00 | Credit | 5 | Web | 1 | No",
        "inst": "Calculate net profit adjusted for returns",
        "code": "df['net_profit'] = (df['total'] * 0.7) - df['shipping']\ndf['adjusted_profit'] = df['net_profit'] * df['return_status'].map({'Yes':0.8, 'No':1.0})"
    },
    {
        "ctx": "product_id | name | price | category | sales | returns | cost | inventory | rating | marketing | competitor_price | season | promotion | eco_friendly | warranty\n101 | Widget | 19.99 | A | 1200 | 120 | 12.00 | 5000 | 4.5 | 500 | 18.99 | Winter | Yes | Yes | 1\n102 | Gadget | 29.99 | B | 850 | 75 | 18.00 | 3000 | 4.2 | 750 | 27.50 | Winter | No | No | 2\n103 | Tool | 14.99 | A | 1500 | 90 | 9.00 | 3200 | 4.7 | 600 | 13.99 | Winter | Yes | Yes | 1",
        "inst": "Calculate comprehensive product value score",
        "code": "df['value_score'] = ((df['price'] - df['cost']) / df['cost']) * 0.4 + (df['sales'] / df['sales'].max()) * 0.2 + (df['rating'] / 5) * 0.1 + (1 - (df['returns'] / df['sales'])) * 0.1 + df['promotion'].map({'Yes':0.05, 'No':0.0}) + df['eco_friendly'].map({'Yes':0.05, 'No':0.0}) + (1 / df['warranty']) * 0.1"
    },
    {
        "ctx": "date | temperature | humidity | precipitation | wind | pressure | air_quality | location | season | pollution_level\n2023-01-01 | 32.5 | 45.2 | 0.2 | 10 | 1013.2 | 45 | Urban | Winter | Moderate\n2023-01-02 | 28.3 | 52.1 | 0.5 | 15 | 1012.8 | 60 | Suburban | Winter | Low\n2023-01-03 | 42.1 | 65.4 | 0.0 | 8 | 1011.5 | 55 | Rural | Winter | Moderate",
        "inst": "Calculate health risk index",
        "code": "pollution_factors = {'Low': 0.8, 'Moderate': 1.0, 'High': 1.3, 'Very High': 1.5}\ndf['health_risk'] = ((100 - df['air_quality']) * 0.5 + df['humidity'] * 0.3 + df['precipitation'] * 20 + df['wind'] * 0.2) * df['pollution_level'].map(pollution_factors) * df['location'].map({'Urban':1.2, 'Suburban':1.0, 'Rural':0.9})"
    },
    {
        "ctx": "student_id | name | grade | test1 | test2 | test3 | attendance | participation | homework | extracurricular | learning_style | special_needs | iep\nS101 | Alice | A | 85 | 92 | 88 | 95 | 90 | 92 | 5 | Visual | No | No\nS102 | Bob | B | 78 | 85 | 82 | 88 | 85 | 85 | 3 | Auditory | Yes | Yes\nS103 | Carol | A | 90 | 85 | 92 | 92 | 88 | 90 | 4 | Kinesthetic | No | No",
        "inst": "Calculate IEP-adjusted performance score",
        "code": "df['iep_adjusted_score'] = (df[['test1','test2','test3']].mean(axis=1)*0.5 + df['attendance']*0.1 + df['participation']*0.1 + df['homework']*0.2 + df['extracurricular']*0.1) * df['iep'].map({'Yes':1.2, 'No':1.0})"
    },
    {
        "ctx": "transaction_id | customer_id | amount | date | category | loyalty_tier | discount | customer_rating | order_channel | delivery_time | return_status | fraud_risk\nT1001 | C101 | 120.50 | 2023-01-15 | Electronics | Gold | 0.1 | 5 | Online | 2 | No | Low\nT1002 | C102 | 85.75 | 2023-02-10 | Clothing | Silver | 0.0 | 4 | Mobile | 3 | Yes | Medium\nT1003 | C101 | 210.00 | 2023-03-01 | Electronics | Gold | 0.15 | 5 | Web | 1 | No | Low",
        "inst": "Calculate risk-adjusted revenue",
        "code": "risk_factors = {'Low': 1.0, 'Medium': 0.9, 'High': 0.7}\ndf['risk_adjusted_revenue'] = df['amount'] * df['fraud_risk'].map(risk_factors)"
    },
    {
        "ctx": "date | product | sales | price | cost | inventory | rating | marketing | competitor_price | season | promotion | eco_friendly | warranty | supply_risk\n2023-01-01 | A | 1200 | 19.99 | 12.00 | 5000 | 4.5 | 500 | 18.99 | Winter | Yes | Yes | 1 | Low\n2023-01-02 | B | 1500 | 29.99 | 18.00 | 3000 | 4.2 | 750 | 27.50 | Winter | No | No | 2 | Medium\n2023-01-03 | A | 1800 | 19.99 | 12.00 | 3200 | 4.7 | 600 | 18.99 | Winter | Yes | Yes | 1 | Low",
        "inst": "Calculate supply-chain risk adjusted inventory value",
        "code": "risk_factors = {'Low': 1.0, 'Medium': 0.8, 'High': 0.6}\ndf['adjusted_inventory_value'] = (df['price'] * df['inventory']) * df['supply_risk'].map(risk_factors)"
    },
    {
        "ctx": "employee_id | name | department | salary | years | rating | projects | certifications | sick_days | training_hours | education | remote | commute_time\nE101 | John | Sales | 75000 | 5 | 4.5 | 12 | 3 | 2 | 40 | Bachelor | No | 30\nE102 | Sarah | Marketing | 82000 | 3 | 4.2 | 8 | 2 | 1 | 35 | Master | Yes | 0\nE103 | Mike | IT | 68000 | 7 | 3.8 | 15 | 5 | 4 | 50 | PhD | Yes | 0",
        "inst": "Calculate work-life balance score",
        "code": "df['work_life_score'] = (1 - (df['sick_days']/10)) * 0.4 + (1 - (df['commute_time']/60)) * 0.3 + (df['training_hours']/df['training_hours'].max()) * 0.2 + df['remote'].map({'Yes':0.1, 'No':0.0})"
    },
    {
        "ctx": "order_id | customer_id | items | total | date | discount | shipping | payment_method | customer_rating | order_source | delivery_time | return_status | fraud_risk | customer_tenure\n1001 | 101 | 3 | 45.99 | 2023-01-15 | 0.1 | 5.99 | Credit | 5 | Web | 2 | No | Low | 24\n1002 | 102 | 1 | 12.50 | 2023-02-10 | 0.0 | 3.99 | PayPal | 4 | Mobile | 3 | Yes | Medium | 6\n1003 | 101 | 5 | 87.25 | 2023-03-01 | 0.15 | 0.00 | Credit | 5 | Web | 1 | No | Low | 24",
        "inst": "Calculate customer lifetime value with risk adjustment",
        "code": "risk_factors = {'Low': 1.0, 'Medium': 0.8, 'High': 0.5}\ndf['clv'] = (df['total'] * (df['customer_tenure']/12) * df['customer_rating']/5) * df['fraud_risk'].map(risk_factors)"
    },
    {
        "ctx": "product_id | name | price | category | sales | returns | cost | inventory | rating | marketing | competitor_price | season | promotion | eco_friendly | warranty | supply_risk | time_to_market\n101 | Widget | 19.99 | A | 1200 | 120 | 12.00 | 5000 | 4.5 | 500 | 18.99 | Winter | Yes | Yes | 1 | Low | 90\n102 | Gadget | 29.99 | B | 850 | 75 | 18.00 | 3000 | 4.2 | 750 | 27.50 | Winter | No | No | 2 | Medium | 120\n103 | Tool | 14.99 | A | 1500 | 90 | 9.00 | 3200 | 4.7 | 600 | 13.99 | Winter | Yes | Yes | 1 | Low | 60",
        "inst": "Calculate product lifecycle efficiency score",
        "code": "df['lifecycle_score'] = ((df['sales'] / df['time_to_market']) * 0.5 + (df['rating'] / 5) * 0.3 + (1 - (df['returns'] / df['sales'])) * 0.2) * df['supply_risk'].map({'Low':1.0, 'Medium':0.9, 'High':0.7})"
    },
    {
        "ctx": "date | temperature | humidity | precipitation | wind | pressure | air_quality | location | season | pollution_level | uv_index\n2023-01-01 | 32.5 | 45.2 | 0.2 | 10 | 1013.2 | 45 | Urban | Winter | Moderate | 2\n2023-01-02 | 28.3 | 52.1 | 0.5 | 15 | 1012.8 | 60 | Suburban | Winter | Low | 3\n2023-01-03 | 42.1 | 65.4 | 0.0 | 8 | 1011.5 | 55 | Rural | Winter | Moderate | 4",
        "inst": "Calculate comprehensive outdoor activity score",
        "code": "df['activity_score'] = (df['temperature']/50 * 0.3 + (100 - df['humidity'])/100 * 0.2 + (1 - df['precipitation']) * 0.2 + (100 - df['air_quality'])/100 * 0.1 + df['uv_index']/10 * 0.2) * df['pollution_level'].map({'Low':1.1, 'Moderate':1.0, 'High':0.9})"
    },
    {
        "ctx": "student_id | name | grade | test1 | test2 | test3 | attendance | participation | homework | extracurricular | learning_style | special_needs | iep | family_support\nS101 | Alice | A | 85 | 92 | 88 | 95 | 90 | 92 | 5 | Visual | No | No | High\nS102 | Bob | B | 78 | 85 | 82 | 88 | 85 | 85 | 3 | Auditory | Yes | Yes | Medium\nS103 | Carol | A | 90 | 85 | 92 | 92 | 88 | 90 | 4 | Kinesthetic | No | No | High",
        "inst": "Calculate family-support adjusted performance score",
        "code": "support_factors = {'High': 1.1, 'Medium': 1.0, 'Low': 0.9}\ndf['family_adjusted_score'] = (df[['test1','test2','test3']].mean(axis=1)*0.5 + df['attendance']*0.1 + df['participation']*0.1 + df['homework']*0.2 + df['extracurricular']*0.1) * df['family_support'].map(support_factors)"
    },
    {
        "ctx": "transaction_id | customer_id | amount | date | category | loyalty_tier | discount | customer_rating | order_channel | delivery_time | return_status | fraud_risk | customer_tenure | customer_age\nT1001 | C101 | 120.50 | 2023-01-15 | Electronics | Gold | 0.1 | 5 | Online | 2 | No | Low | 24 | 35\nT1002 | C102 | 85.75 | 2023-02-10 | Clothing | Silver | 0.0 | 4 | Mobile | 3 | Yes | Medium | 6 | 28\nT1003 | C101 | 210.00 | 2023-03-01 | Electronics | Gold | 0.15 | 5 | Web | 1 | No | Low | 24 | 35",
        "inst": "Calculate age-and-tenure adjusted customer value",
        "code": "df['age_tenure_value'] = (df['amount'] * (df['customer_tenure']/12) * (df['customer_age']/100) * df['customer_rating']/5"
    },
    {
        "ctx": "product_id | name | price | category | sales | returns | cost | inventory | rating | marketing | competitor_price | season | promotion | eco_friendly | warranty | supply_risk | time_to_market | product_complexity\n101 | Widget | 19.99 | A | 1200 | 120 | 12.00 | 5000 | 4.5 | 500 | 18.99 | Winter | Yes | Yes | 1 | Low | 90 | Simple\n102 | Gadget | 29.99 | B | 850 | 75 | 18.00 | 3000 | 4.2 | 750 | 27.50 | Winter | No | No | 2 | Medium | 120 | Complex\n103 | Tool | 14.99 | A | 1500 | 90 | 9.00 | 3200 | 4.7 | 600 | 13.99 | Winter | Yes | Yes | 1 | Low | 60 | Medium",
        "inst": "Calculate complexity-adjusted product performance",
        "code": "complexity_factors = {'Simple': 1.1, 'Medium': 1.0, 'Complex': 0.9}\ndf['complexity_adjusted_perf'] = ((df['price'] - df['cost']) / df['cost']) * 0.4 + (df['sales'] / df['sales'].max()) * 0.2 + (df['rating'] / 5) * 0.2 + (1 - (df['returns'] / df['sales'])) * 0.2) * df['product_complexity'].map(complexity_factors)"
    },
    {
        "ctx": "employee_id | name | department | salary | years | rating | projects | certifications | sick_days | training_hours | education | remote | commute_time | stress_level\nE101 | John | Sales | 75000 | 5 | 4.5 | 12 | 3 | 2 | 40 | Bachelor | No | 30 | Medium\nE102 | Sarah | Marketing | 82000 | 3 | 4.2 | 8 | 2 | 1 | 35 | Master | Yes | 0 | Low\nE103 | Mike | IT | 68000 | 7 | 3.8 | 15 | 5 | 4 | 50 | PhD | Yes | 0 | High",
        "inst": "Calculate stress-adjusted productivity score",
        "code": "stress_factors = {'Low': 1.1, 'Medium': 1.0, 'High': 0.8}\ndf['stress_adjusted_productivity'] = (df['rating']*0.3 + df['projects']/df['projects'].max()*0.2 + df['certifications']/5*0.1 + df['years']/10*0.1 + (1 - df['sick_days']/10)*0.1 + df['training_hours']/df['training_hours'].max()*0.2) * df['stress_level'].map(stress_factors)"
    },
    {
        "ctx": "id | product | price\n1 | Apple | 0.99\n2 | Banana | 0.59\n3 | Orange | 1.29",
        "inst": "Convert prices from dollars to cents",
        "code": "df['price_cents'] = df['price'] * 100"
    },
    {
        "ctx": "name | age\nJohn | 25\nSarah | 30\nMike | 28",
        "inst": "Add 1 year to everyone's age",
        "code": "df['age'] = df['age'] + 1"
    },
    {
        "ctx": "student | score\nAlice | 85\nBob | 72\nCarol | 90",
        "inst": "Add 5 bonus points to scores below 80",
        "code": "df.loc[df['score'] < 80, 'score'] += 5"
    },
    {
        "ctx": "item | quantity | price\nA | 5 | 10\nB | 3 | 15\nC | 2 | 20",
        "inst": "Calculate total value for each item",
        "code": "df['total'] = df['quantity'] * df['price']"
    },
    {
        "ctx": "city | temp_F\nNY | 68\nLA | 75\nCHI | 62",
        "inst": "Convert Fahrenheit to Celsius",
        "code": "df['temp_C'] = (df['temp_F'] - 32) * 5/9"
    },
    {
        "ctx": "first | last\nJohn | Smith\nSarah | Lee\nMike | Brown",
        "inst": "Combine first and last names",
        "code": "df['full_name'] = df['first'] + ' ' + df['last']"
    },
    {
        "ctx": "email\njohn@example.com\nsarah@test.org\nmike@sample.net",
        "inst": "Extract domain names from emails",
        "code": "df['domain'] = df['email'].str.split('@').str[1]"
    },
    {
        "ctx": "date | sales\n2023-01-01 | 1500\n2023-01-02 | 1800\n2023-01-03 | 2100",
        "inst": "Extract day of week from dates",
        "code": "df['day'] = pd.to_datetime(df['date']).dt.day_name()"
    },
    {
        "ctx": "id | name | department\n101 | John | Sales\n102 | Sarah | Marketing\n103 | Mike | IT",
        "inst": "Create employee IDs with department prefix",
        "code": "df['emp_id'] = df['department'].str[:3] + df['id'].astype(str)"
    },
    {
        "ctx": "product | price\nWidget | 19.99\nGadget | 29.99\nTool | 14.99",
        "inst": "Round prices to nearest dollar",
        "code": "df['price_rounded'] = df['price'].round()"
    },
    {
        "ctx": "name | height_cm\nJohn | 175\nSarah | 163\nMike | 182",
        "inst": "Convert height to inches",
        "code": "df['height_in'] = df['height_cm'] / 2.54"
    },
    {
        "ctx": "id | value\n1 | 15\n2 | 20\n3 | 10",
        "inst": "Calculate percentage of total for each value",
        "code": "df['pct'] = (df['value'] / df['value'].sum()) * 100"
    },
    {
        "ctx": "word | length\napple | 5\nbanana | 6\norange | 6",
        "inst": "Check if word length is even",
        "code": "df['is_even'] = df['length'] % 2 == 0"
    },
    {
        "ctx": "transaction | amount\nA001 | 120.50\nA002 | 85.75\nA003 | 210.00",
        "inst": "Categorize amounts as small (<100), medium (100-200), large (>200)",
        "code": "df['size'] = pd.cut(df['amount'], bins=[0,100,200,999], labels=['small','medium','large'])"
    },
    {
        "ctx": "name | birth_year\nJohn | 1990\nSarah | 1985\nMike | 1992",
        "inst": "Calculate current age",
        "code": "df['age'] = 2023 - df['birth_year']"
    },
    {
        "ctx": "item | price | in_stock\nA | 19.99 | yes\nB | 29.99 | no\nC | 14.99 | yes",
        "inst": "Convert yes/no to boolean",
        "code": "df['in_stock'] = df['in_stock'].map({'yes': True, 'no': False})"
    },
    {
        "ctx": "id | name | score\n1 | Alice | 85\n2 | Bob | 72\n3 | Carol | 90",
        "inst": "Add rank column based on score",
        "code": "df['rank'] = df['score'].rank(ascending=False)"
    },
    {
        "ctx": "date | value\n2023-01-01 | 100\n2023-01-02 | 110\n2023-01-03 | 105",
        "inst": "Calculate day-over-day change",
        "code": "df['change'] = df['value'].diff()"
    },
    {
        "ctx": "product | category | price\nA | X | 19.99\nB | Y | 29.99\nC | X | 14.99",
        "inst": "Calculate average price by category",
        "code": "df['avg_price'] = df.groupby('category')['price'].transform('mean')"
    },
    {
        "ctx": "first | middle | last\nJohn | A | Smith\nSarah | B | Lee\nMike | C | Brown",
        "inst": "Create initials from names",
        "code": "df['initials'] = df['first'].str[0] + df['middle'].str[0] + df['last'].str[0]"
    },
    {
        "ctx": "id | value\n1 | 15\n2 | 20\n3 | 10",
        "inst": "Calculate running total",
        "code": "df['running_total'] = df['value'].cumsum()"
    },
    {
        "ctx": "name | joined\nJohn | 2020-05-15\nSarah | 2021-01-10\nMike | 2019-11-30",
        "inst": "Calculate days since joining",
        "code": "df['days_joined'] = (pd.Timestamp.today() - pd.to_datetime(df['joined'])).dt.days"
    },
    {
        "ctx": "word | length\napple | 5\nbanana | 6\norange | 6",
        "inst": "Check if word contains 'a'",
        "code": "df['has_a'] = df['word'].str.contains('a')"
    },
    {
        "ctx": "id | name | score\n1 | Alice | 85\n2 | Bob | 72\n3 | Carol | 90",
        "inst": "Normalize scores to 0-1 scale",
        "code": "df['normalized'] = (df['score'] - df['score'].min()) / (df['score'].max() - df['score'].min())"
    },
    {
        "ctx": "date | sales\n2023-01-01 | 1500\n2023-01-02 | 1800\n2023-01-03 | 2100",
        "inst": "Calculate 2-day moving average",
        "code": "df['moving_avg'] = df['sales'].rolling(2).mean()"
    },
    {
        "ctx": "product | price | discount\nA | 19.99 | 10\nB | 29.99 | 15\nC | 14.99 | 5",
        "inst": "Calculate final price after discount",
        "code": "df['final_price'] = df['price'] * (1 - df['discount']/100)"
    },
    {
        "ctx": "name | age | city\nJohn | 25 | NY\nSarah | 30 | LA\nMike | 28 | CHI",
        "inst": "Create description string",
        "code": "df['description'] = df['name'] + ' (' + df['age'].astype(str) + ') from ' + df['city']"
    },
    {
        "ctx": "id | value\n1 | 15\n2 | 20\n3 | 10",
        "inst": "Calculate z-scores",
        "code": "df['z_score'] = (df['value'] - df['value'].mean()) / df['value'].std()"
    },
    {
        "ctx": "product | category | price\nA | X | 19.99\nB | Y | 29.99\nC | X | 14.99",
        "inst": "Flag products in category X",
        "code": "df['is_category_x'] = df['category'] == 'X'"
    },
    {
        "ctx": "first | last\nJohn | Smith\nSarah | Lee\nMike | Brown",
        "inst": "Create email addresses (first.last@company.com)",
        "code": "df['email'] = df['first'].str.lower() + '.' + df['last'].str.lower() + '@company.com'"
    },
    {
        "ctx": "date | value\n2023-01-01 | 100\n2023-01-02 | 110\n2023-01-03 | 105",
        "inst": "Calculate percent change",
        "code": "df['pct_change'] = df['value'].pct_change() * 100"
    },
    {
        "ctx": "id | name | score\n1 | Alice | 85\n2 | Bob | 72\n3 | Carol | 90",
        "inst": "Assign letter grades (A:90+, B:80-89, C:70-79)",
        "code": "df['grade'] = np.where(df['score']>=90, 'A', np.where(df['score']>=80, 'B', 'C'))"
    },
    {
        "ctx": "product | price | stock\nA | 19.99 | 45\nB | 29.99 | 12\nC | 14.99 | 0",
        "inst": "Flag out-of-stock items",
        "code": "df['out_of_stock'] = df['stock'] == 0"
    },
    {
        "ctx": "name | height | weight\nJohn | 175 | 72\nSarah | 163 | 58\nMike | 182 | 85",
        "inst": "Calculate BMI (weight_kg / (height_m)^2)",
        "code": "df['bmi'] = df['weight'] / (df['height']/100)**2"
    },
    {
        "ctx": "id | value\n1 | 15\n2 | 20\n3 | 10",
        "inst": "Calculate percentile rank",
        "code": "df['percentile'] = df['value'].rank(pct=True) * 100"
    },
    {
        "ctx": "date | temperature\n2023-01-01 | 32.5\n2023-01-02 | 28.3\n2023-01-03 | 42.1",
        "inst": "Flag days below freezing",
        "code": "df['freezing'] = df['temperature'] < 32"
    },
    {
        "ctx": "first | last | age\nJohn | Smith | 25\nSarah | Lee | 30\nMike | Brown | 28",
        "inst": "Create username (first letter + last name + age)",
        "code": "df['username'] = df['first'].str[0].str.lower() + df['last'].str.lower() + df['age'].astype(str)"
    },
    {
        "ctx": "product | price | category\nA | 19.99 | X\nB | 29.99 | Y\nC | 14.99 | X",
        "inst": "Calculate price difference from category average",
        "code": "df['price_diff'] = df['price'] - df.groupby('category')['price'].transform('mean')"
    },
    {
        "ctx": "id | name | score\n1 | Alice | 85\n2 | Bob | 72\n3 | Carol | 90",
        "inst": "Calculate score above/below average",
        "code": "df['vs_avg'] = df['score'] - df['score'].mean()"
    },
    {
        "ctx": "word | length\napple | 5\nbanana | 6\norange | 6",
        "inst": "Check if length is prime number",
        "code": "def is_prime(n):\n    return n > 1 and all(n % i for i in range(2, int(n**0.5)+1)\ndf['is_prime'] = df['length'].apply(is_prime)"
    },
    {
        "ctx": "date | sales\n2023-01-01 | 1500\n2023-01-02 | 1800\n2023-01-03 | 2100",
        "inst": "Extract month from date",
        "code": "df['month'] = pd.to_datetime(df['date']).dt.month"
    },
    {
        "ctx": "id | value\n1 | 15\n2 | 20\n3 | 10",
        "inst": "Calculate log of values",
        "code": "df['log_value'] = np.log(df['value'])"
    },
    {
        "ctx": "name | age | city\nJohn | 25 | NY\nSarah | 30 | LA\nMike | 28 | CHI",
        "inst": "Create age group categories (20-29, 30-39)",
        "code": "df['age_group'] = pd.cut(df['age'], bins=[20,29,39], labels=['20s','30s'])"
    },
    {
        "ctx": "product | price | tax\nA | 19.99 | 0.08\nB | 29.99 | 0.10\nC | 14.99 | 0.07",
        "inst": "Calculate total price with tax",
        "code": "df['total'] = df['price'] * (1 + df['tax'])"
    },
    {
        "ctx": "first | last\nJohn | Smith\nSarah | Lee\nMike | Brown",
        "inst": "Count letters in full name",
        "code": "df['name_length'] = (df['first'] + df['last']).str.len()"
    },
    {
        "ctx": "date | value\n2023-01-01 | 100\n2023-01-02 | 110\n2023-01-03 | 105",
        "inst": "Calculate 3-day sum",
        "code": "df['3day_sum'] = df['value'].rolling(3).sum()"
    },
    {
        "ctx": "id | name | score\n1 | Alice | 85\n2 | Bob | 72\n3 | Carol | 90",
        "inst": "Flag top scorer",
        "code": "df['top_scorer'] = df['score'] == df['score'].max()"
    },
    {
        "ctx": "product | price | category\nA | 19.99 | X\nB | 29.99 | Y\nC | 14.99 | X",
        "inst": "Calculate price rank within category",
        "code": "df['category_rank'] = df.groupby('category')['price'].rank(ascending=False)"
    },
    {
        "ctx": "word | length\napple | 5\nbanana | 6\norange | 6",
        "inst": "Check if word is palindrome",
        "code": "df['is_palindrome'] = df['word'].str.lower() == df['word'].str.lower().str[::-1]"
    },
    {
        "ctx": "date | temperature\n2023-01-01 | 32.5\n2023-01-02 | 28.3\n2023-01-03 | 42.1",
        "inst": "Calculate temperature change from previous day",
        "code": "df['temp_change'] = df['temperature'].diff()"
    },
    {
        "ctx": "id | value\n1 | 15\n2 | 20\n3 | 10",
        "inst": "Calculate exponential values",
        "code": "df['exp_value'] = np.exp(df['value'])"
    },
    {
        "ctx": "name | age | city\nJohn | 25 | NY\nSarah | 30 | LA\nMike | 28 | CHI",
        "inst": "Create location code (first 2 letters of city + age)",
        "code": "df['location_code'] = df['city'].str[:2] + df['age'].astype(str)"
    },
    {
        "ctx": "product | price | stock\nA | 19.99 | 45\nB | 29.99 | 12\nC | 14.99 | 0",
        "inst": "Calculate inventory value",
        "code": "df['inventory_value'] = df['price'] * df['stock']"
    },
    {
        "ctx": "first | last | dob\nJohn | Smith | 1990-05-15\nSarah | Lee | 1985-01-10\nMike | Brown | 1992-11-30",
        "inst": "Extract birth year from date",
        "code": "df['birth_year'] = pd.to_datetime(df['dob']).dt.year"
    },
    {
        "ctx": "date | value\n2023-01-01 | 100\n2023-01-02 | 110\n2023-01-03 | 105",
        "inst": "Calculate cumulative maximum",
        "code": "df['cummax'] = df['value'].cummax()"
    },
    {
        "ctx": "id | name | score\n1 | Alice | 85\n2 | Bob | 72\n3 | Carol | 90",
        "inst": "Calculate percentage of maximum score",
        "code": "df['pct_of_max'] = (df['score'] / df['score'].max()) * 100"
    },
    {
        "ctx": "product | price | category\nA | 19.99 | X\nB | 29.99 | Y\nC | 14.99 | X",
        "inst": "Calculate price ratio to category minimum",
        "code": "df['price_ratio'] = df['price'] / df.groupby('category')['price'].transform('min')"
    },
    {
        "ctx": "word | length\napple | 5\nbanana | 6\norange | 6",
        "inst": "Check if word starts with vowel",
        "code": "df['starts_vowel'] = df['word'].str.lower().str[0].isin(['a','e','i','o','u'])"
    },
    {
        "ctx": "date | temperature\n2023-01-01 | 32.5\n2023-01-02 | 28.3\n2023-01-03 | 42.1",
        "inst": "Calculate 7-day temperature average",
        "code": "df['7day_avg'] = df['temperature'].rolling(7).mean()"
    },
    {
        "ctx": "id | value\n1 | 15\n2 | 20\n3 | 10",
        "inst": "Calculate square root of values",
        "code": "df['sqrt_value'] = np.sqrt(df['value'])"
    },
    {
        "ctx": "name | age | city\nJohn | 25 | NY\nSarah | 30 | LA\nMike | 28 | CHI",
        "inst": "Create age category flags",
        "code": "df['is_20s'] = df['age'].between(20, 29)\ndf['is_30s'] = df['age'].between(30, 39)"
    },
    {
        "ctx": "product | price | discount_pct\nA | 19.99 | 10\nB | 29.99 | 15\nC | 14.99 | 5",
        "inst": "Calculate discount amount",
        "code": "df['discount_amt'] = df['price'] * (df['discount_pct']/100)"
    },
    {
        "ctx": "first | last\nJohn | Smith\nSarah | Lee\nMike | Brown",
        "inst": "Create abbreviated name (J. Smith)",
        "code": "df['abbr_name'] = df['first'].str[0] + '. ' + df['last']"
    },
    {
        "ctx": "date | value\n2023-01-01 | 100\n2023-01-02 | 110\n2023-01-03 | 105",
        "inst": "Calculate cumulative product",
        "code": "df['cumprod'] = df['value'].cumprod()"
    },
    {
        "ctx": "id | name | score\n1 | Alice | 85\n2 | Bob | 72\n3 | Carol | 90",
        "inst": "Calculate z-score normalized scores",
        "code": "df['z_score'] = (df['score'] - df['score'].mean()) / df['score'].std()"
    },
    {
        "ctx": "product | price | category\nA | 19.99 | X\nB | 29.99 | Y\nC | 14.99 | X",
        "inst": "Calculate price percentage of category max",
        "code": "df['pct_of_max'] = (df['price'] / df.groupby('category')['price'].transform('max')) * 100"
    },
    {
        "ctx": "word | length\napple | 5\nbanana | 6\norange | 6",
        "inst": "Check if word ends with 'e'",
        "code": "df['ends_e'] = df['word'].str.lower().str[-1] == 'e'"
    },
    {
        "ctx": "date | temperature\n2023-01-01 | 32.5\n2023-01-02 | 28.3\n2023-01-03 | 42.1",
        "inst": "Calculate temperature difference from average",
        "code": "df['diff_from_avg'] = df['temperature'] - df['temperature'].mean()"
    },
    {
        "ctx": "id | value\n1 | 15\n2 | 20\n3 | 10",
        "inst": "Calculate absolute difference from median",
        "code": "df['abs_diff_median'] = abs(df['value'] - df['value'].median())"
    },
    {
        "ctx": "name | age | city\nJohn | 25 | NY\nSarah | 30 | LA\nMike | 28 | CHI",
        "inst": "Create location-age code (NY25)",
        "code": "df['loc_age_code'] = df['city'] + df['age'].astype(str)"
    },
    {
        "ctx": "product | price | stock\nA | 19.99 | 45\nB | 29.99 | 12\nC | 14.99 | 0",
        "inst": "Calculate days of supply (assuming 3 sales/day)",
        "code": "df['days_supply'] = df['stock'] / 3"
    },
    {
        "ctx": "first | last | dob\nJohn | Smith | 1990-05-15\nSarah | Lee | 1985-01-10\nMike | Brown | 1992-11-30",
        "inst": "Extract month from birth date",
        "code": "df['birth_month'] = pd.to_datetime(df['dob']).dt.month"
    },
    {
        "ctx": "date | value\n2023-01-01 | 100\n2023-01-02 | 110\n2023-01-03 | 105",
        "inst": "Calculate cumulative minimum",
        "code": "df['cummin'] = df['value'].cummin()"
    },
    {
        "ctx": "id | name | score\n1 | Alice | 85\n2 | Bob | 72\n3 | Carol | 90",
        "inst": "Calculate score difference from median",
        "code": "df['diff_median'] = df['score'] - df['score'].median()"
    },
    {
        "ctx": "product | price | category\nA | 19.99 | X\nB | 29.99 | Y\nC | 14.99 | X",
        "inst": "Calculate price quartile within category",
        "code": "df['quartile'] = pd.qcut(df.groupby('category')['price'].rank(), q=4, labels=False)"
    },
    {
        "ctx": "word | length\napple | 5\nbanana | 6\norange | 6",
        "inst": "Check if word has double letters",
        "code": "df['has_double'] = df['word'].apply(lambda x: any(x[i] == x[i+1] for i in range(len(x)-1)))"
    },
    {
        "ctx": "date | temperature\n2023-01-01 | 32.5\n2023-01-02 | 28.3\n2023-01-03 | 42.1",
        "inst": "Calculate 30-day rolling standard deviation",
        "code": "df['30day_std'] = df['temperature'].rolling(30).std()"
    },
    {
        "ctx": "id | value\n1 | 15\n2 | 20\n3 | 10",
        "inst": "Calculate squared values",
        "code": "df['squared'] = df['value']**2"
    },
    {
        "ctx": "name | age | city\nJohn | 25 | NY\nSarah | 30 | LA\nMike | 28 | CHI",
        "inst": "Create age category (Young <30, Adult 30+)",
        "code": "df['age_cat'] = np.where(df['age'] < 30, 'Young', 'Adult')"
    },
    {
        "ctx": "product | price | discount_pct\nA | 19.99 | 10\nB | 29.99 | 15\nC | 14.99 | 5",
        "inst": "Calculate price after discount",
        "code": "df['final_price'] = df['price'] * (1 - df['discount_pct']/100)"
    },
    {
        "ctx": "first | last\nJohn | Smith\nSarah | Lee\nMike | Brown",
        "inst": "Create last name, first name format",
        "code": "df['last_first'] = df['last'] + ', ' + df['first']"
    },
    {
        "ctx": "date | value\n2023-01-01 | 100\n2023-01-02 | 110\n2023-01-03 | 105",
        "inst": "Calculate 5-day sum",
        "code": "df['5day_sum'] = df['value'].rolling(5).sum()"
    },
    {
        "ctx": "id | name | score\n1 | Alice | 85\n2 | Bob | 72\n3 | Carol | 90",
        "inst": "Flag scores within 5 points of average",
        "code": "avg = df['score'].mean()\ndf['near_avg'] = abs(df['score'] - avg) <= 5"
    },
    {
        "ctx": "product | price | category\nA | 19.99 | X\nB | 29.99 | Y\nC | 14.99 | X",
        "inst": "Calculate price difference from category median",
        "code": "df['diff_median'] = df['price'] - df.groupby('category')['price'].transform('median')"
    },
    {
        "ctx": "word | length\napple | 5\nbanana | 6\norange | 6",
        "inst": "Check if word contains vowels only",
        "code": "df['vowels_only'] = df['word'].str.lower().str.replace('[^aeiou]', '').eq(df['word'].str.lower())"
    },
    {
        "ctx": "date | temperature\n2023-01-01 | 32.5\n2023-01-02 | 28.3\n2023-01-03 | 42.1",
        "inst": "Calculate 10-day temperature range",
        "code": "df['10day_range'] = df['temperature'].rolling(10).max() - df['temperature'].rolling(10).min()"
    },
    {
        "ctx": "id | value\n1 | 15\n2 | 20\n3 | 10",
        "inst": "Calculate reciprocal of values",
        "code": "df['reciprocal'] = 1 / df['value']"
    },
    {
        "ctx": "name | age | city\nJohn | 25 | NY\nSarah | 30 | LA\nMike | 28 | CHI",
        "inst": "Create city-age category (NY_20s)",
        "code": "df['city_age'] = df['city'] + '_' + np.where(df['age'] < 30, '20s', '30s')"
    },
    {
        "ctx": "product | price | stock\nA | 19.99 | 45\nB | 29.99 | 12\nC | 14.99 | 0",
        "inst": "Calculate stock status (Low <10, Medium 10-20, High >20)",
        "code": "df['stock_status'] = pd.cut(df['stock'], bins=[-1,9,20,999], labels=['Low','Medium','High'])"
    },
    {
        "ctx": "first | last | dob\nJohn | Smith | 1990-05-15\nSarah | Lee | 1985-01-10\nMike | Brown | 1992-11-30",
        "inst": "Extract day of week from birth date",
        "code": "df['birth_dow'] = pd.to_datetime(df['dob']).dt.day_name()"
    },
    {
        "ctx": "date | value\n2023-01-01 | 100\n2023-01-02 | 110\n2023-01-03 | 105",
        "inst": "Calculate 7-day rolling median",
        "code": "df['7day_median'] = df['value'].rolling(7).median()"
    },
    {
        "ctx": "id | name | score\n1 | Alice | 85\n2 | Bob | 72\n3 | Carol | 90",
        "inst": "Calculate score ratio to average",
        "code": "df['score_ratio'] = df['score'] / df['score'].mean()"
    },
    {
        "ctx": "product | price | category\nA | 19.99 | X\nB | 29.99 | Y\nC | 14.99 | X",
        "inst": "Calculate price percentage difference from category mean",
        "code": "df['pct_diff_mean'] = (df['price'] / df.groupby('category')['price'].transform('mean') - 1) * 100"
    },
    {
        "ctx": "word | length\napple | 5\nbanana | 6\norange | 6",
        "inst": "Check if word is all uppercase",
        "code": "df['is_upper'] = df['word'].str.isupper()"
    },
    {
        "ctx": "date | temperature\n2023-01-01 | 32.5\n2023-01-02 | 28.3\n2023-01-03 | 42.1",
        "inst": "Calculate 14-day exponential moving average",
        "code": "df['14day_ema'] = df['temperature'].ewm(span=14).mean()"
    },
    {
        "ctx": "id | value\n1 | 15\n2 | 20\n3 | 10",
        "inst": "Calculate cube of values",
        "code": "df['cubed'] = df['value']**3"
    },
    {
        "ctx": "name | age | city\nJohn | 25 | NY\nSarah | 30 | LA\nMike | 28 | CHI",
        "inst": "Create generation label (GenZ <26, Millennial 27-42)",
        "code": "df['generation'] = np.where(df['age'] < 26, 'GenZ', 'Millennial')"
    },
    {
        "ctx": "product | price | discount_pct\nA | 19.99 | 10\nB | 29.99 | 15\nC | 14.99 | 5",
        "inst": "Calculate savings amount",
        "code": "df['savings'] = df['price'] * (df['discount_pct']/100)"
    },
    {
        "ctx": "first | last\nJohn | Smith\nSarah | Lee\nMike | Brown",
        "inst": "Create username (first 3 letters + last 3 letters)",
        "code": "df['username'] = df['first'].str[:3] + df['last'].str[-3:]"
    },
    {
        "ctx": "date | value\n2023-01-01 | 100\n2023-01-02 | 110\n2023-01-03 | 105",
        "inst": "Calculate 10-day sum",
        "code": "df['10day_sum'] = df['value'].rolling(10).sum()"
    },
    {
        "ctx": "id | name | score\n1 | Alice | 85\n2 | Bob | 72\n3 | Carol | 90",
        "inst": "Calculate score difference from top score",
        "code": "df['diff_top'] = df['score'].max() - df['score']"
    },
    {
        "ctx": "product | price | category\nA | 19.99 | X\nB | 29.99 | Y\nC | 14.99 | X",
        "inst": "Calculate price rank (1=highest) within category",
        "code": "df['price_rank'] = df.groupby('category')['price'].rank(ascending=False, method='min')"
    },
    {
        "ctx": "id | product | price | in_stock\n1 | Widget | 19.99 | True\n2 | Gadget | 29.99 | False\n3 | Tool | 14.99 | True",
        "inst": "Apply 10% discount only to in-stock items",
        "code": "df.loc[df['in_stock'], 'price'] = df['price'] * 0.9"
    },
    {
        "ctx": "name | birth_date\nJohn | 1990-05-15\nSarah | 1985-01-10\nMike | 1992-11-30",
        "inst": "Calculate age and add 'years old' suffix",
        "code": "df['age'] = (pd.Timestamp.today() - pd.to_datetime(df['birth_date'])).dt.days // 365\ndf['age_text'] = df['age'].astype(str) + ' years old'"
    },
    {
        "ctx": "order_id | items | total\n1001 | 3 | 45.99\n1002 | 1 | 12.50\n1003 | 5 | 87.25",
        "inst": "Add shipping cost ($5 base + $2 per item)",
        "code": "df['shipping'] = 5 + (df['items'] * 2)\ndf['total_with_shipping'] = df['total'] + df['shipping']"
    },
    {
        "ctx": "student | test1 | test2 | test3\nAlice | 85 | 92 | 88\nBob | 78 | 85 | 82\nCarol | 90 | 85 | 92",
        "inst": "Keep only the top 2 test scores for each student",
        "code": "df['average'] = df[['test1','test2','test3']].apply(lambda x: x.nlargest(2).mean(), axis=1)"
    },
    {
        "ctx": "date | temp_F | condition\n2023-01-01 | 32.5 | Snow\n2023-01-02 | 28.3 | Snow\n2023-01-03 | 42.1 | Rain",
        "inst": "Convert temp to Celsius and flag freezing days",
        "code": "df['temp_C'] = (df['temp_F'] - 32) * 5/9\ndf['freezing'] = df['temp_C'] <= 0"
    },
    {
        "ctx": "customer_id | purchases | last_purchase\n101 | 12 | 2023-04-01\n102 | 5 | 2023-05-15\n103 | 23 | 2023-03-10",
        "inst": "Create customer tier (Gold:10+, Silver:5-9, Bronze:<5)",
        "code": "df['tier'] = pd.cut(df['purchases'], bins=[0,5,10,999], labels=['Bronze','Silver','Gold'])"
    },
    {
        "ctx": "product | category | price\nWidget | A | 19.99\nGadget | B | 29.99\nTool | A | 14.99",
        "inst": "Flag products priced above category average",
        "code": "df['above_avg'] = df['price'] > df.groupby('category')['price'].transform('mean')"
    },
    {
        "ctx": "employee | hours | rate\nJohn | 40 | 25.00\nSarah | 35 | 30.00\nMike | 45 | 28.00",
        "inst": "Calculate pay with overtime (1.5x after 40 hours)",
        "code": "df['pay'] = np.where(df['hours'] > 40, \n                   40*df['rate'] + (df['hours']-40)*df['rate']*1.5, \n                   df['hours']*df['rate'])"
    },
    {
        "ctx": "transaction_id | amount | currency\nT1001 | 120.50 | USD\nT1002 | 85.75 | EUR\nT1003 | 210.00 | GBP",
        "inst": "Convert all to USD (EUR=1.1, GBP=1.3) and round to 2 decimals",
        "code": "df['amount_usd'] = df.apply(lambda x: round(x['amount']*1.1,2) if x['currency']=='EUR' \n                  else round(x['amount']*1.3,2) if x['currency']=='GBP' \n                  else round(x['amount'],2), axis=1)"
    },
    {
        "ctx": "student | grade | score\nAlice | A | 95\nBob | B | 85\nCarol | A | 92",
        "inst": "Calculate average score by grade and add as new column",
        "code": "df['grade_avg'] = df.groupby('grade')['score'].transform('mean')"
    },
    {
        "ctx": "date | revenue | expenses\n2023-01-01 | 12000 | 8500\n2023-01-02 | 15000 | 9200\n2023-01-03 | 18000 | 10500",
        "inst": "Calculate running profit and % profit margin",
        "code": "df['running_profit'] = df['revenue'].cumsum() - df['expenses'].cumsum()\ndf['margin_pct'] = df['running_profit'] / df['revenue'].cumsum() * 100"
    },
    {
        "ctx": "product_id | name | price | cost\n101 | Widget | 19.99 | 12.00\n102 | Gadget | 29.99 | 18.00\n103 | Tool | 14.99 | 9.00",
        "inst": "Calculate markup % and profit per unit",
        "code": "df['markup_pct'] = ((df['price'] - df['cost']) / df['cost']) * 100\ndf['profit'] = df['price'] - df['cost']"
    },
    {
        "ctx": "employee_id | name | salary | department\nE101 | John | 75000 | Sales\nE102 | Sarah | 82000 | Marketing\nE103 | Mike | 68000 | IT",
        "inst": "Calculate salary percentile within department",
        "code": "df['dept_percentile'] = df.groupby('department')['salary'].rank(pct=True) * 100"
    },
    {
        "ctx": "order_id | customer_id | items | total\n1001 | 101 | 3 | 45.99\n1002 | 102 | 1 | 12.50\n1003 | 101 | 5 | 87.25",
        "inst": "Calculate customer's average order value and total spend",
        "code": "df['avg_order_value'] = df.groupby('customer_id')['total'].transform('mean')\ndf['total_spend'] = df.groupby('customer_id')['total'].transform('sum')"
    },
    {
        "ctx": "city | jan_temp | jul_temp\nNY | 32.5 | 78.3\nLA | 58.1 | 88.7\nCHI | 28.3 | 82.5",
        "inst": "Calculate annual temperature range and average",
        "code": "df['temp_range'] = df['jul_temp'] - df['jan_temp']\ndf['avg_temp'] = (df['jan_temp'] + df['jul_temp']) / 2"
    },
    {
        "ctx": "student | math | science | english\nAlice | 85 | 92 | 88\nBob | 78 | 85 | 82\nCarol | 90 | 85 | 92",
        "inst": "Calculate subject z-scores for each student",
        "code": "for subject in ['math','science','english']:\n    df[f'{subject}_z'] = (df[subject] - df[subject].mean()) / df[subject].std()"
    },
    {
        "ctx": "date | product | sales | price\n2023-01-01 | A | 1200 | 19.99\n2023-01-02 | B | 1500 | 29.99\n2023-01-03 | A | 1800 | 19.99",
        "inst": "Calculate revenue and 3-day moving average sales",
        "code": "df['revenue'] = df['sales'] * df['price']\ndf['3day_avg_sales'] = df['sales'].rolling(3).mean()"
    },
    {
        "ctx": "customer_id | join_date | purchases\n101 | 2022-05-15 | 12\n102 | 2023-01-10 | 5\n103 | 2021-11-30 | 23",
        "inst": "Calculate purchases per month since joining",
        "code": "df['months_active'] = ((pd.Timestamp.today() - pd.to_datetime(df['join_date'])).dt.days / 30)\ndf['purchases_per_month'] = df['purchases'] / df['months_active']"
    },
    {
        "ctx": "product | category | price | rating\nWidget | A | 19.99 | 4.5\nGadget | B | 29.99 | 3.8\nTool | A | 14.99 | 4.2",
        "inst": "Calculate price per rating point and value score",
        "code": "df['price_per_rating'] = df['price'] / df['rating']\ndf['value_score'] = (df['rating'] * 10) / df['price']"
    },
    {
        "ctx": "employee | hours | rate | overtime\nJohn | 40 | 25.00 | 0\nSarah | 35 | 30.00 | 0\nMike | 45 | 28.00 | 5",
        "inst": "Calculate total pay (regular + 1.5x overtime)",
        "code": "df['total_pay'] = (df['hours'] - df['overtime']) * df['rate'] + df['overtime'] * df['rate'] * 1.5"
    },
    {
        "ctx": "transaction_id | amount | fee | payment_type\nT1001 | 120.50 | 2.99 | credit\nT1002 | 85.75 | 0.00 | debit\nT1003 | 210.00 | 3.50 | credit",
        "inst": "Calculate net amount and flag free transactions",
        "code": "df['net_amount'] = df['amount'] - df['fee']\ndf['is_free'] = df['fee'] == 0"
    },
    {
        "ctx": "student | grade | test1 | test2 | test3\nAlice | A | 85 | 92 | 88\nBob | B | 78 | 85 | 82\nCarol | A | 90 | 85 | 92",
        "inst": "Calculate grade average and student's difference from it",
        "code": "df['grade_avg'] = df.groupby('grade')[['test1','test2','test3']].transform('mean').mean(axis=1)\ndf['diff_from_grade'] = df[['test1','test2','test3']].mean(axis=1) - df['grade_avg']"
    },
    {
        "ctx": "date | revenue | expenses | category\n2023-01-01 | 12000 | 8500 | retail\n2023-01-02 | 15000 | 9200 | online\n2023-01-03 | 18000 | 10500 | retail",
        "inst": "Calculate profit and category profit ratio",
        "code": "df['profit'] = df['revenue'] - df['expenses']\ndf['category_ratio'] = df['profit'] / df.groupby('category')['profit'].transform('sum')"
    },
    {
        "ctx": "product_id | name | price | cost | stock\n101 | Widget | 19.99 | 12.00 | 45\n102 | Gadget | 29.99 | 18.00 | 12\n103 | Tool | 14.99 | 9.00 | 0",
        "inst": "Calculate inventory value and days of supply (10 sales/day)",
        "code": "df['inventory_value'] = df['cost'] * df['stock']\ndf['days_supply'] = df['stock'] / 10"
    },
    {
        "ctx": "city | population | area | metro\nNY | 8500000 | 302.6 | yes\nLA | 3900000 | 468.7 | yes\nCHI | 2700000 | 227.6 | no",
        "inst": "Calculate density and flag metro areas over 5M",
        "code": "df['density'] = df['population'] / df['area']\ndf['major_metro'] = (df['metro'] == 'yes') & (df['population'] > 5000000)"
    },
    {
        "ctx": "employee_id | name | salary | department | years\nE101 | John | 75000 | Sales | 5\nE102 | Sarah | 82000 | Marketing | 3\nE103 | Mike | 68000 | IT | 7",
        "inst": "Calculate salary per year and compare to department avg",
        "code": "df['salary_per_year'] = df['salary'] / df['years']\ndf['dept_avg'] = df.groupby('department')['salary_per_year'].transform('mean')"
    },
    {
        "ctx": "order_id | customer_id | items | total | discount\n1001 | 101 | 3 | 45.99 | 0.1\n1002 | 102 | 1 | 12.50 | 0.0\n1003 | 101 | 5 | 87.25 | 0.15",
        "inst": "Calculate pre-discount amount and effective discount rate",
        "code": "df['pre_discount'] = df['total'] / (1 - df['discount'])\ndf['effective_rate'] = (df['pre_discount'] - df['total']) / df['pre_discount']"
    },
    {
        "ctx": "date | product | sales | returns | price\n2023-01-01 | A | 1200 | 120 | 19.99\n2023-01-02 | B | 1500 | 75 | 29.99\n2023-01-03 | A | 1800 | 90 | 19.99",
        "inst": "Calculate net sales and return rate",
        "code": "df['net_sales'] = df['sales'] - df['returns']\ndf['return_rate'] = df['returns'] / df['sales'] * 100"
    },
    {
        "ctx": "student | grade | attendance | homework | participation\nAlice | A | 95 | 90 | 88\nBob | B | 88 | 85 | 82\nCarol | A | 92 | 92 | 90",
        "inst": "Calculate engagement score (weighted average)",
        "code": "df['engagement'] = (df['attendance']*0.4 + df['homework']*0.3 + df['participation']*0.3)"
    },
    {
        "ctx": "transaction_id | amount | date | customer_type\nT1001 | 120.50 | 2023-01-15 | premium\nT1002 | 85.75 | 2023-02-10 | regular\nT1003 | 210.00 | 2023-03-01 | premium",
        "inst": "Calculate days since transaction and apply tier multiplier",
        "code": "df['days_ago'] = (pd.Timestamp.today() - pd.to_datetime(df['date'])).dt.days\ndf['weighted_amount'] = df['amount'] * df['customer_type'].map({'premium':1.2, 'regular':1.0})"
    },
    {
        "ctx": "product_id | name | price | cost | category\n101 | Widget | 19.99 | 12.00 | A\n102 | Gadget | 29.99 | 18.00 | B\n103 | Tool | 14.99 | 9.00 | A",
        "inst": "Calculate profit margin and category rank",
        "code": "df['margin'] = (df['price'] - df['cost']) / df['price'] * 100\ndf['category_rank'] = df.groupby('category')['margin'].rank(ascending=False)"
    },
    {
        "ctx": "employee | base_salary | bonus | department\nJohn | 75000 | 5000 | Sales\nSarah | 82000 | 3000 | Marketing\nMike | 68000 | 7000 | IT",
        "inst": "Calculate total comp and department percentage",
        "code": "df['total_comp'] = df['base_salary'] + df['bonus']\ndf['dept_pct'] = df['total_comp'] / df.groupby('department')['total_comp'].transform('sum') * 100"
    },
    {
        "ctx": "date | product | units_sold | unit_price | unit_cost\n2023-01-01 | A | 1200 | 19.99 | 12.00\n2023-01-02 | B | 1500 | 29.99 | 18.00\n2023-01-03 | A | 1800 | 19.99 | 12.00",
        "inst": "Calculate gross profit and profit per unit",
        "code": "df['gross_profit'] = df['units_sold'] * (df['unit_price'] - df['unit_cost'])\ndf['profit_per_unit'] = df['unit_price'] - df['unit_cost']"
    },
    {
        "ctx": "city | population | area | country\nNY | 8500000 | 302.6 | US\nLA | 3900000 | 468.7 | US\nLN | 8900000 | 607.0 | UK",
        "inst": "Calculate density and add country prefix to city",
        "code": "df['density'] = df['population'] / df['area']\ndf['city_country'] = df['city'] + ', ' + df['country']"
    },
    {
        "ctx": "student_id | name | grade | test1 | test2 | test3\nS101 | Alice | A | 85 | 92 | 88\nS102 | Bob | B | 78 | 85 | 82\nS103 | Carol | A | 90 | 85 | 92",
        "inst": "Calculate best test score and improvement from first to last test",
        "code": "df['best_score'] = df[['test1','test2','test3']].max(axis=1)\ndf['improvement'] = df['test3'] - df['test1']"
    },
    {
        "ctx": "order_id | customer_id | items | total | date\n1001 | 101 | 3 | 45.99 | 2023-01-15\n1002 | 102 | 1 | 12.50 | 2023-02-10\n1003 | 101 | 5 | 87.25 | 2023-03-01",
        "inst": "Calculate days between orders for each customer",
        "code": "df['days_between'] = df.sort_values('date').groupby('customer_id')['date'].diff().dt.days"
    },
    {
        "ctx": "product_id | name | price | category | sales\n101 | Widget | 19.99 | A | 1200\n102 | Gadget | 29.99 | B | 850\n103 | Tool | 14.99 | A | 1500",
        "inst": "Calculate revenue and market share within category",
        "code": "df['revenue'] = df['price'] * df['sales']\ndf['category_share'] = df['revenue'] / df.groupby('category')['revenue'].transform('sum') * 100"
    },
    {
        "ctx": "employee_id | name | salary | department | start_date\nE101 | John | 75000 | Sales | 2018-05-15\nE102 | Sarah | 82000 | Marketing | 2020-01-10\nE103 | Mike | 68000 | IT | 2016-11-30",
        "inst": "Calculate tenure in years and salary per year of tenure",
        "code": "df['tenure'] = (pd.Timestamp.today() - pd.to_datetime(df['start_date'])).dt.days / 365\ndf['salary_per_tenure'] = df['salary'] / df['tenure']"
    },
    {
        "ctx": "transaction_id | amount | date | customer_id\nT1001 | 120.50 | 2023-01-15 | 101\nT1002 | 85.75 | 2023-02-10 | 102\nT1003 | 210.00 | 2023-03-01 | 101",
        "inst": "Calculate customer's average transaction amount and frequency",
        "code": "df['avg_amount'] = df.groupby('customer_id')['amount'].transform('mean')\ndf['trans_freq'] = df.groupby('customer_id')['date'].transform('count')"
    },
    {
        "ctx": "product | category | price | sales | returns\nWidget | A | 19.99 | 1200 | 120\nGadget | B | 29.99 | 850 | 75\nTool | A | 14.99 | 1500 | 90",
        "inst": "Calculate net sales and quality score (1 - return rate)",
        "code": "df['net_sales'] = df['sales'] - df['returns']\ndf['quality_score'] = 1 - (df['returns'] / df['sales'])"
    },
    {
        "ctx": "city | jan_temp | jul_temp | population\nNY | 32.5 | 78.3 | 8500000\nLA | 58.1 | 88.7 | 3900000\nCHI | 28.3 | 82.5 | 2700000",
        "inst": "Calculate temp range and population-adjusted comfort score",
        "code": "df['temp_range'] = df['jul_temp'] - df['jan_temp']\ndf['comfort_score'] = (df['jul_temp'] * 0.6 + df['jan_temp'] * 0.4) * (df['population'] / 1000000)"
    },
    {
        "ctx": "student | grade | test1 | test2 | test3 | attendance\nAlice | A | 85 | 92 | 88 | 95\nBob | B | 78 | 85 | 82 | 88\nCarol | A | 90 | 85 | 92 | 92",
        "inst": "Calculate weighted final score (tests 70%, attendance 30%)",
        "code": "df['final_score'] = (df[['test1','test2','test3']].mean(axis=1)*0.7 + df['attendance']*0.3"
    },
    {
        "ctx": "date | revenue | expenses | category\n2023-01-01 | 12000 | 8500 | retail\n2023-01-02 | 15000 | 9200 | online\n2023-01-03 | 18000 | 10500 | retail",
        "inst": "Calculate cumulative profit by category",
        "code": "df['profit'] = df['revenue'] - df['expenses']\ndf['cum_profit'] = df.groupby('category')['profit'].cumsum()"
    },
    {
        "ctx": "product_id | name | price | cost | stock | min_stock\n101 | Widget | 19.99 | 12.00 | 45 | 20\n102 | Gadget | 29.99 | 18.00 | 12 | 15\n103 | Tool | 14.99 | 9.00 | 0 | 10",
        "inst": "Calculate inventory status and reorder flag",
        "code": "df['stock_status'] = df['stock'] / df['min_stock']\ndf['needs_reorder'] = df['stock'] < df['min_stock']"
    },
    {
        "ctx": "employee_id | name | salary | department | rating\nE101 | John | 75000 | Sales | 4.5\nE102 | Sarah | 82000 | Marketing | 4.2\nE103 | Mike | 68000 | IT | 3.8",
        "inst": "Calculate performance-adjusted salary ratio",
        "code": "df['salary_ratio'] = (df['salary'] / df.groupby('department')['salary'].transform('mean')) * (df['rating'] / 5)"
    },
    {
        "ctx": "order_id | customer_id | items | total | date | discount\n1001 | 101 | 3 | 45.99 | 2023-01-15 | 0.1\n1002 | 102 | 1 | 12.50 | 2023-02-10 | 0.0\n1003 | 101 | 5 | 87.25 | 2023-03-01 | 0.15",
        "inst": "Calculate discount effectiveness (discount per item)",
        "code": "df['discount_per_item'] = (df['total'] * df['discount']) / df['items']"
    },
    {
        "ctx": "date | product | sales | returns | price | cost\n2023-01-01 | A | 1200 | 120 | 19.99 | 12.00\n2023-01-02 | B | 1500 | 75 | 29.99 | 18.00\n2023-01-03 | A | 1800 | 90 | 19.99 | 12.00",
        "inst": "Calculate net profit and return impact",
        "code": "df['net_profit'] = (df['sales'] - df['returns']) * (df['price'] - df['cost'])\ndf['return_impact'] = df['returns'] * (df['price'] - df['cost'])"
    },
    {
        "ctx": "student | grade | test1 | test2 | test3 | participation\nAlice | A | 85 | 92 | 88 | 90\nBob | B | 78 | 85 | 82 | 85\nCarol | A | 90 | 85 | 92 | 88",
        "inst": "Calculate consistency score (1 - stdev) and engagement score",
        "code": "df['consistency'] = 1 - (df[['test1','test2','test3']].std(axis=1) / 100\ndf['engagement'] = (df[['test1','test2','test3']].mean(axis=1) * 0.7 + df['participation'] * 0.3"
    },
    {
        "ctx": "transaction_id | amount | date | customer_type | loyalty_years\nT1001 | 120.50 | 2023-01-15 | premium | 5\nT1002 | 85.75 | 2023-02-10 | regular | 2\nT1003 | 210.00 | 2023-03-01 | premium | 3",
        "inst": "Calculate loyalty-weighted transaction value",
        "code": "df['weighted_value'] = df['amount'] * (1 + df['loyalty_years']/10) * df['customer_type'].map({'premium':1.2, 'regular':1.0})"
    },
    {
        "ctx": "product_id | name | price | cost | category | rating\n101 | Widget | 19.99 | 12.00 | A | 4.5\n102 | Gadget | 29.99 | 18.00 | B | 3.8\n103 | Tool | 14.99 | 9.00 | A | 4.2",
        "inst": "Calculate value score and category percentile",
        "code": "df['value_score'] = (df['rating'] * 10) / df['price']\ndf['category_percentile'] = df.groupby('category')['value_score'].rank(pct=True) * 100"
    },
    {
        "ctx": "employee | base | bonus | department | years\nJohn | 75000 | 5000 | Sales | 5\nSarah | 82000 | 3000 | Marketing | 3\nMike | 68000 | 7000 | IT | 7",
        "inst": "Calculate total comp and comp per year of service",
        "code": "df['total_comp'] = df['base'] + df['bonus']\ndf['comp_per_year'] = df['total_comp'] / df['years']"
    },
    {
        "ctx": "date | product | units | price | cost | promo\n2023-01-01 | A | 1200 | 19.99 | 12.00 | yes\n2023-01-02 | B | 1500 | 29.99 | 18.00 | no\n2023-01-03 | A | 1800 | 19.99 | 12.00 | yes",
        "inst": "Calculate promo effectiveness (units per dollar)",
        "code": "df['profit_per_unit'] = df['price'] - df['cost']\ndf['promo_effect'] = df['units'] / df['price'] * df['promo'].map({'yes':1.2, 'no':1.0})"
    },
    {
        "ctx": "city | population | area | country | capital\nNY | 8500000 | 302.6 | US | no\nLA | 3900000 | 468.7 | US | no\nLN | 8900000 | 607.0 | UK | yes",
        "inst": "Calculate density and flag capital cities",
        "code": "df['density'] = df['population'] / df['area']\ndf['is_capital'] = df['capital'] == 'yes'"
    },
    {
        "ctx": "student_id | name | grade | test1 | test2 | test3 | attendance\nS101 | Alice | A | 85 | 92 | 88 | 95\nS102 | Bob | B | 78 | 85 | 82 | 88\nS103 | Carol | A | 90 | 85 | 92 | 92",
        "inst": "Calculate improvement from test1 to test3 and attendance impact",
        "code": "df['improvement'] = df['test3'] - df['test1']\ndf['attendance_impact'] = df['improvement'] * (df['attendance'] / 100)"
    },
    {
        "ctx": "order_id | customer_id | items | total | date | channel\n1001 | 101 | 3 | 45.99 | 2023-01-15 | online\n1002 | 102 | 1 | 12.50 | 2023-02-10 | mobile\n1003 | 101 | 5 | 87.25 | 2023-03-01 | online",
        "inst": "Calculate channel-specific average order value",
        "code": "df['channel_avg'] = df.groupby('channel')['total'].transform('mean')"
    },
    {
        "ctx": "product_id | name | price | category | sales | returns | rating\n101 | Widget | 19.99 | A | 1200 | 120 | 4.5\n102 | Gadget | 29.99 | B | 850 | 75 | 3.8\n103 | Tool | 14.99 | A | 1500 | 90 | 4.2",
        "inst": "Calculate net promoter score approximation",
        "code": "df['nps'] = ((df['sales'] - df['returns']) / df['sales']) * 100 - 50 + (df['rating'] * 10)"
    },
    {
        "ctx": "employee_id | name | salary | department | start_date | projects\nE101 | John | 75000 | Sales | 2018-05-15 | 12\nE102 | Sarah | 82000 | Marketing | 2020-01-10 | 8\nE103 | Mike | 68000 | IT | 2016-11-30 | 15",
        "inst": "Calculate projects per year and productivity score",
        "code": "df['tenure'] = (pd.Timestamp.today() - pd.to_datetime(df['start_date'])).dt.days / 365\ndf['projects_per_year'] = df['projects'] / df['tenure']\ndf['productivity'] = (df['projects_per_year'] * 0.6) + (df['salary'] / df['salary'].max() * 0.4)"
    },
    {
        "ctx": "transaction_id | amount | date | customer_id | loyalty_tier\nT1001 | 120.50 | 2023-01-15 | 101 | gold\nT1002 | 85.75 | 2023-02-10 | 102 | silver\nT1003 | 210.00 | 2023-03-01 | 101 | gold",
        "inst": "Calculate loyalty-weighted transaction value",
        "code": "df['weighted_amount'] = df['amount'] * df['loyalty_tier'].map({'gold':1.2, 'silver':1.1, 'bronze':1.0})"
    },
    {
        "ctx": "product | category | price | cost | sales | rating\nWidget | A | 19.99 | 12.00 | 1200 | 4.5\nGadget | B | 29.99 | 18.00 | 850 | 3.8\nTool | A | 14.99 | 9.00 | 1500 | 4.2",
        "inst": "Calculate profit margin and quality-adjusted margin",
        "code": "df['margin'] = (df['price'] - df['cost']) / df['price'] * 100\ndf['quality_margin'] = df['margin'] * (df['rating'] / 5)"
    },
    {
        "ctx": "city | jan_temp | jul_temp | population | coastal\nNY | 32.5 | 78.3 | 8500000 | yes\nLA | 58.1 | 88.7 | 3900000 | yes\nCHI | 28.3 | 82.5 | 2700000 | no",
        "inst": "Calculate climate score and coastal premium",
        "code": "df['climate_score'] = (df['jul_temp'] * 0.6 + df['jan_temp'] * 0.4) * df['coastal'].map({'yes':1.1, 'no':1.0})"
    },
    {
        "ctx": "student | grade | test1 | test2 | test3 | attendance | participation\nAlice | A | 85 | 92 | 88 | 95 | 90\nBob | B | 78 | 85 | 82 | 88 | 85\nCarol | A | 90 | 85 | 92 | 92 | 88",
        "inst": "Calculate comprehensive performance score",
        "code": "df['performance'] = (df[['test1','test2','test3']].mean(axis=1)*0.6 + df['attendance']*0.2 + df['participation']*0.2)"
    },
    {
        "ctx": "date | revenue | expenses | category | promo\n2023-01-01 | 12000 | 8500 | retail | yes\n2023-01-02 | 15000 | 9200 | online | no\n2023-01-03 | 18000 | 10500 | retail | yes",
        "inst": "Calculate promo impact on profit margin",
        "code": "df['profit'] = df['revenue'] - df['expenses']\ndf['margin'] = df['profit'] / df['revenue'] * 100\ndf['promo_impact'] = df.groupby('promo')['margin'].transform('mean')"
    },
    {
        "ctx": "product_id | name | price | cost | stock | min_stock | lead_time\n101 | Widget | 19.99 | 12.00 | 45 | 20 | 7\n102 | Gadget | 29.99 | 18.00 | 12 | 15 | 14\n103 | Tool | 14.99 | 9.00 | 0 | 10 | 10",
        "inst": "Calculate inventory risk score",
        "code": "df['stock_ratio'] = df['stock'] / df['min_stock']\ndf['risk_score'] = (1 - df['stock_ratio']) * df['lead_time']"
    },
    {
        "ctx": "employee_id | name | salary | department | rating | remote\nE101 | John | 75000 | Sales | 4.5 | no\nE102 | Sarah | 82000 | Marketing | 4.2 | yes\nE103 | Mike | 68000 | IT | 3.8 | yes",
        "inst": "Calculate remote-adjusted productivity score",
        "code": "df['productivity'] = (df['rating'] * 0.7) + (df['salary'] / df.groupby('department')['salary'].transform('mean') * 0.3)\ndf['remote_adjusted'] = df['productivity'] * df['remote'].map({'yes':1.1, 'no':1.0})"
    },
    {
        "ctx": "order_id | customer_id | items | total | date | discount | channel\n1001 | 101 | 3 | 45.99 | 2023-01-15 | 0.1 | web\n1002 | 102 | 1 | 12.50 | 2023-02-10 | 0.0 | mobile\n1003 | 101 | 5 | 87.25 | 2023-03-01 | 0.15 | web",
        "inst": "Calculate channel efficiency (discount per item)",
        "code": "df['discount_per_item'] = (df['total'] * df['discount']) / df['items']\ndf['channel_efficiency'] = df.groupby('channel')['discount_per_item'].transform('mean')"
    },
    {
        "ctx": "date | product | sales | returns | price | cost | season\n2023-01-01 | A | 1200 | 120 | 19.99 | 12.00 | winter\n2023-01-02 | B | 1500 | 75 | 29.99 | 18.00 | winter\n2023-01-03 | A | 1800 | 90 | 19.99 | 12.00 | winter",
        "inst": "Calculate season-adjusted profit",
        "code": "season_factors = {'winter':0.9, 'spring':1.0, 'summer':1.1, 'fall':1.0}\ndf['season_profit'] = (df['sales'] - df['returns']) * (df['price'] - df['cost']) * df['season'].map(season_factors)"
    },
    {
        "ctx": "student | grade | test1 | test2 | test3 | attendance | homework\nAlice | A | 85 | 92 | 88 | 95 | 90\nBob | B | 78 | 85 | 82 | 88 | 85\nCarol | A | 90 | 85 | 92 | 92 | 88",
        "inst": "Calculate consistency and engagement scores",
        "code": "df['consistency'] = 1 - (df[['test1','test2','test3']].std(axis=1) / 100)\ndf['engagement'] = (df['attendance'] * 0.5) + (df['homework'] * 0.5)"
    },
    {
        "ctx": "transaction_id | amount | date | customer_type | loyalty_years | fraud_risk\nT1001 | 120.50 | 2023-01-15 | premium | 5 | low\nT1002 | 85.75 | 2023-02-10 | regular | 2 | medium\nT1003 | 210.00 | 2023-03-01 | premium | 3 | low",
        "inst": "Calculate risk-adjusted transaction value",
        "code": "risk_factors = {'low':1.0, 'medium':0.8, 'high':0.5}\ndf['adjusted_value'] = df['amount'] * (1 + df['loyalty_years']/10) * df['customer_type'].map({'premium':1.2, 'regular':1.0}) * df['fraud_risk'].map(risk_factors)"
    },
    {
        "ctx": "product_id | name | price | cost | category | rating | eco_friendly\n101 | Widget | 19.99 | 12.00 | A | 4.5 | yes\n102 | Gadget | 29.99 | 18.00 | B | 3.8 | no\n103 | Tool | 14.99 | 9.00 | A | 4.2 | yes",
        "inst": "Calculate sustainability premium score",
        "code": "df['value_score'] = (df['rating'] * 10) / df['price']\ndf['sustainability_score'] = df['value_score'] * df['eco_friendly'].map({'yes':1.2, 'no':1.0})"
    },
    {
        "ctx": "employee | base | bonus | department | years | certifications\nJohn | 75000 | 5000 | Sales | 5 | 3\nSarah | 82000 | 3000 | Marketing | 3 | 2\nMike | 68000 | 7000 | IT | 7 | 5",
        "inst": "Calculate certification-adjusted comp score",
        "code": "df['total_comp'] = df['base'] + df['bonus']\ndf['comp_score'] = (df['total_comp'] / df['years']) * (1 + df['certifications']/10)"
    },
    {
        "ctx": "date | product | units | price | cost | promo | inventory\n2023-01-01 | A | 1200 | 19.99 | 12.00 | yes | 5000\n2023-01-02 | B | 1500 | 29.99 | 18.00 | no | 3000\n2023-01-03 | A | 1800 | 19.99 | 12.00 | yes | 3200",
        "inst": "Calculate inventory turnover and promo effectiveness",
        "code": "df['turnover'] = df['units'] / df['inventory']\ndf['promo_effect'] = df.groupby('promo')['turnover'].transform('mean')"
    },
    {
        "ctx": "city | population | area | country | capital | coastal\nNY | 8500000 | 302.6 | US | no | yes\nLA | 3900000 | 468.7 | US | no | yes\nLN | 8900000 | 607.0 | UK | yes | no",
        "inst": "Calculate composite desirability score",
        "code": "df['density'] = df['population'] / df['area']\ndf['desirability'] = df['density'] * df['coastal'].map({'yes':1.2, 'no':1.0}) * df['capital'].map({'yes':1.1, 'no':1.0})"
    },
    {
        "ctx": "student_id | name | grade | test1 | test2 | test3 | attendance | iep\nS101 | Alice | A | 85 | 92 | 88 | 95 | no\nS102 | Bob | B | 78 | 85 | 82 | 88 | yes\nS103 | Carol | A | 90 | 85 | 92 | 92 | no",
        "inst": "Calculate IEP-adjusted performance score",
        "code": "df['performance'] = (df[['test1','test2','test3']].mean(axis=1)*0.7 + df['attendance']*0.3) * df['iep'].map({'yes':1.1, 'no':1.0})"
    },
    {
        "ctx": "order_id | customer_id | items | total | date | channel | device\n1001 | 101 | 3 | 45.99 | 2023-01-15 | online | desktop\n1002 | 102 | 1 | 12.50 | 2023-02-10 | mobile | phone\n1003 | 101 | 5 | 87.25 | 2023-03-01 | online | tablet",
        "inst": "Calculate device-specific conversion metrics",
        "code": "df['aov'] = df['total'] / df['items']\ndf['device_avg'] = df.groupby('device')['aov'].transform('mean')"
    },
    {
        "ctx": "product_id | name | price | cost | category | sales | returns | warranty\n101 | Widget | 19.99 | 12.00 | A | 1200 | 120 | 1\n102 | Gadget | 29.99 | 18.00 | B | 850 | 75 | 2\n103 | Tool | 14.99 | 9.00 | A | 1500 | 90 | 1",
        "inst": "Calculate warranty-adjusted return rate",
        "code": "df['return_rate'] = df['returns'] / df['sales'] * 100\ndf['warranty_adj_rate'] = df['return_rate'] / df['warranty']"
    },
    {
        "ctx": "employee_id | name | salary | department | rating | remote | commute\nE101 | John | 75000 | Sales | 4.5 | no | 30\nE102 | Sarah | 82000 | Marketing | 4.2 | yes | 0\nE103 | Mike | 68000 | IT | 3.8 | yes | 0",
        "inst": "Calculate work-life balance score",
        "code": "df['work_life'] = (df['rating'] * 0.5) + ((1 - (df['commute']/60)) * 0.3) + (df['remote'].map({'yes':0.2, 'no':0.0}))"
    },
    {
        "ctx": "transaction_id | amount | date | customer_id | loyalty | fraud_risk\nT1001 | 120.50 | 2023-01-15 | 101 | gold | low\nT1002 | 85.75 | 2023-02-10 | 102 | silver | medium\nT1003 | 210.00 | 2023-03-01 | 101 | gold | low",
        "inst": "Calculate net present value of transactions",
        "code": "df['days_ago'] = (pd.Timestamp.today() - pd.to_datetime(df['date'])).dt.days\ndf['npv'] = df['amount'] / (1 + 0.05)**(df['days_ago']/365) * df['loyalty'].map({'gold':1.1, 'silver':1.05, 'bronze':1.0})"
    },
    {
        "ctx": "product | category | price | cost | sales | rating | eco | warranty\nWidget | A | 19.99 | 12.00 | 1200 | 4.5 | yes | 1\nGadget | B | 29.99 | 18.00 | 850 | 3.8 | no | 2\nTool | A | 14.99 | 9.00 | 1500 | 4.2 | yes | 1",
        "inst": "Calculate comprehensive product score",
        "code": "df['profit_margin'] = (df['price'] - df['cost']) / df['price']\ndf['quality_score'] = df['rating'] / 5\ndf['product_score'] = (df['profit_margin']*0.5 + df['quality_score']*0.3 + df['eco'].map({'yes':0.2, 'no':0.0}) + (1/df['warranty']*0.1))"
    },
    {
        "ctx": "city | jan_temp | jul_temp | population | coastal | airport\nNY | 32.5 | 78.3 | 8500000 | yes | yes\nLA | 58.1 | 88.7 | 3900000 | yes | yes\nCHI | 28.3 | 82.5 | 2700000 | no | yes",
        "inst": "Calculate business hub score",
        "code": "df['climate_score'] = (df['jul_temp'] * 0.6 + df['jan_temp'] * 0.4)\ndf['hub_score'] = (df['climate_score']*0.3 + (df['population']/1000000)*0.4 + df['coastal'].map({'yes':0.2, 'no':0.1}) + df['airport'].map({'yes':0.1, 'no':0.0}))"
    },
    {
        "ctx": "student | grade | test1 | test2 | test3 | attendance | iep | support\nAlice | A | 85 | 92 | 88 | 95 | no | high\nBob | B | 78 | 85 | 82 | 88 | yes | medium\nCarol | A | 90 | 85 | 92 | 92 | no | high",
        "inst": "Calculate comprehensive student success score",
        "code": "support_map = {'high':1.2, 'medium':1.0, 'low':0.8}\ndf['success_score'] = (df[['test1','test2','test3']].mean(axis=1)*0.6 + df['attendance']*0.2 + df['iep'].map({'yes':1.1, 'no':1.0})*0.1 + df['support'].map(support_map)*0.1)"
    },
    {
        "ctx": "order_id | customer_id | items | total | date | channel | device | time\n1001 | 101 | 3 | 45.99 | 2023-01-15 | online | desktop | evening\n1002 | 102 | 1 | 12.50 | 2023-02-10 | mobile | phone | morning\n1003 | 101 | 5 | 87.25 | 2023-03-01 | online | tablet | afternoon",
        "inst": "Calculate time-of-day efficiency metric",
        "code": "time_factors = {'morning':1.1, 'afternoon':1.0, 'evening':0.9}\ndf['time_efficiency'] = (df['total'] / df['items']) * df['time'].map(time_factors)"
    },
    {
        "ctx": "product_id | name | price | cost | category | sales | returns | rating | warranty\n101 | Widget | 19.99 | 12.00 | A | 1200 | 120 | 4.5 | 1\n102 | Gadget | 29.99 | 18.00 | B | 850 | 75 | 3.8 | 2\n103 | Tool | 14.99 | 9.00 | A | 1500 | 90 | 4.2 | 1",
        "inst": "Calculate customer lifetime value estimate",
        "code": "df['clv'] = ((df['sales'] - df['returns']) * (df['price'] - df['cost'])) * (df['rating']/5) * (1 + (1/df['warranty']))"
    },
    {
        "ctx": "employee_id | name | salary | department | rating | remote | commute | certs\nE101 | John | 75000 | Sales | 4.5 | no | 30 | 3\nE102 | Sarah | 82000 | Marketing | 4.2 | yes | 0 | 2\nE103 | Mike | 68000 | IT | 3.8 | yes | 0 | 5",
        "inst": "Calculate comprehensive employee value score",
        "code": "df['value_score'] = (df['salary']/df.groupby('department')['salary'].transform('mean')*0.4 + \n                     df['rating']/5*0.3 + \n                     (1 - (df['commute']/60))*0.1 + \n                     df['remote'].map({'yes':0.1, 'no':0.0}) + \n                     (df['certs']/5)*0.1)"
    },
    {
    "ctx": "id | product | price | category\n1 | Widget | 19.99 | A\n2 | Gadget | 29.99 | B\n3 | Tool | 14.99 | A",
    "inst": "Add 5% price increase for category A only",
    "code": "df.loc[df['category'] == 'A', 'price'] = df['price'] * 1.05"
    },
    {
    "ctx": "name | hours_worked | hourly_rate\nJohn | 40 | 25.00\nSarah | 37 | 30.00\nMike | 42 | 28.00",
    "inst": "Calculate weekly pay with overtime (1.5x after 40 hours)",
    "code": "df['pay'] = np.where(df['hours_worked'] > 40, \n                   40*df['hourly_rate'] + (df['hours_worked']-40)*df['hourly_rate']*1.5, \n                   df['hours_worked']*df['hourly_rate'])"
    },
    {
    "ctx": "date | temperature | city\n2023-01-01 | 32.5 | NY\n2023-01-02 | 28.3 | CHI\n2023-01-03 | 42.1 | LA",
    "inst": "Convert temps to Celsius and flag extreme temps (<0°C or >35°C)",
    "code": "df['temp_C'] = (df['temperature'] - 32) * 5/9\ndf['extreme'] = (df['temp_C'] < 0) | (df['temp_C'] > 35)"
    },
    {
    "ctx": "customer_id | purchases | avg_order\n101 | 12 | 45.99\n102 | 5 | 32.50\n103 | 23 | 28.75",
    "inst": "Calculate total spend and customer lifetime value (3x avg yearly spend)",
    "code": "df['total_spend'] = df['purchases'] * df['avg_order']\ndf['clv'] = (df['total_spend'] / df['purchases'] * 12) * 3"
    },
    {
    "ctx": "product | cost | price | stock\nWidget | 12.00 | 19.99 | 45\nGadget | 18.00 | 29.99 | 12\nTool | 9.00 | 14.99 | 0",
    "inst": "Calculate margin % and inventory value",
    "code": "df['margin_pct'] = ((df['price'] - df['cost']) / df['price']) * 100\ndf['inventory_value'] = df['cost'] * df['stock']"
    },
    {
    "ctx": "employee | dept | salary | rating\nJohn | Sales | 75000 | 4.5\nSarah | Marketing | 82000 | 4.2\nMike | IT | 68000 | 3.8",
    "inst": "Calculate bonus (10% salary for rating >=4, 5% otherwise)",
    "code": "df['bonus'] = np.where(df['rating'] >= 4, df['salary']*0.10, df['salary']*0.05)"
    },
    {
    "ctx": "order_id | items | subtotal | tax_rate\n1001 | 3 | 45.99 | 0.08\n1002 | 1 | 12.50 | 0.06\n1003 | 5 | 87.25 | 0.10",
    "inst": "Calculate total with tax and shipping ($5 + $1 per item)",
    "code": "df['tax'] = df['subtotal'] * df['tax_rate']\ndf['shipping'] = 5 + df['items']\ndf['total'] = df['subtotal'] + df['tax'] + df['shipping']"
    },
    {
    "ctx": "student | test1 | test2 | test3\nAlice | 85 | 92 | 88\nBob | 72 | 85 | 82\nCarol | 90 | 85 | 92",
    "inst": "Drop lowest test score and calculate average",
    "code": "df['average'] = df[['test1','test2','test3']].apply(lambda x: x.sum() - x.min()) / 2"
    },
    {
    "ctx": "date | revenue | expenses | store\n2023-01-01 | 12000 | 8500 | NY\n2023-01-02 | 15000 | 9200 | CHI\n2023-01-03 | 18000 | 10500 | NY",
    "inst": "Calculate daily profit and running profit by store",
    "code": "df['profit'] = df['revenue'] - df['expenses']\ndf['running_profit'] = df.groupby('store')['profit'].cumsum()"
    },
    {
    "ctx": "product_id | name | price | cost | category\n101 | Widget | 19.99 | 12.00 | A\n102 | Gadget | 29.99 | 18.00 | B\n103 | Tool | 14.99 | 9.00 | A",
    "inst": "Flag products priced below category average cost",
    "code": "df['below_avg_cost'] = df['price'] < df.groupby('category')['cost'].transform('mean')"
    },
    {
    "ctx": "transaction_id | amount | currency | exchange_rate\nT1001 | 120.50 | USD | 1.0\nT1002 | 85.75 | EUR | 1.12\nT1003 | 210.00 | GBP | 1.31",
    "inst": "Convert all to USD and flag large transactions (>$150)",
    "code": "df['amount_usd'] = np.where(df['currency'] == 'USD', \n                          df['amount'], \n                          df['amount'] * df['exchange_rate'])\ndf['large_txn'] = df['amount_usd'] > 150"
    },
    {
    "ctx": "employee_id | name | salary | department | tenure\nE101 | John | 75000 | Sales | 5\nE102 | Sarah | 82000 | Marketing | 3\nE103 | Mike | 68000 | IT | 7",
    "inst": "Calculate salary percentile within department and tenure group",
    "code": "df['tenure_group'] = pd.cut(df['tenure'], bins=[0,3,5,10], labels=['junior','mid','senior'])\ndf['percentile'] = df.groupby(['department','tenure_group'])['salary'].rank(pct=True)"
    },
    {
    "ctx": "date | product | units_sold | unit_price | promo\n2023-01-01 | A | 1200 | 19.99 | yes\n2023-01-02 | B | 1500 | 29.99 | no\n2023-01-03 | A | 1800 | 19.99 | yes",
    "inst": "Calculate promo lift (avg units sold with/without promo)",
    "code": "df['promo_lift'] = df.groupby('promo')['units_sold'].transform('mean') / df['units_sold'].mean()"
    },
    {
    "ctx": "customer_id | first_purchase | last_purchase | total_orders\n101 | 2022-01-15 | 2023-04-01 | 12\n102 | 2023-01-10 | 2023-05-15 | 5\n103 | 2021-11-30 | 2023-03-10 | 23",
    "inst": "Calculate days as customer and purchase frequency",
    "code": "df['days_active'] = (pd.to_datetime(df['last_purchase']) - pd.to_datetime(df['first_purchase'])).dt.days\ndf['purchase_freq'] = df['days_active'] / df['total_orders']"
    },
    {
    "ctx": "student_id | math | science | english | attendance\nS101 | 85 | 92 | 88 | 95\nS102 | 72 | 85 | 82 | 88\nS103 | 90 | 85 | 92 | 92",
    "inst": "Calculate weighted grade (tests 80%, attendance 20%) and rank",
    "code": "df['weighted_grade'] = (df[['math','science','english']].mean(axis=1)*0.8 + df['attendance']*0.2)\ndf['rank'] = df['weighted_grade'].rank(ascending=False)"
    },
    {
    "ctx": "property_id | bedrooms | bathrooms | sq_ft | price\nP001 | 3 | 2 | 1800 | 350000\nP002 | 4 | 3 | 2400 | 475000\nP003 | 2 | 1 | 1200 | 275000",
    "inst": "Calculate price per sqft and bedroom premium",
    "code": "df['price_per_sqft'] = df['price'] / df['sq_ft']\ndf['bedroom_premium'] = df['price'] / (df['bedrooms'] + df['bathrooms'])"
    },
    {
    "ctx": "transaction_id | customer_id | amount | date | channel\nT1001 | 101 | 120.50 | 2023-01-15 | online\nT1002 | 102 | 85.75 | 2023-02-10 | mobile\nT1003 | 101 | 210.00 | 2023-03-01 | online",
    "inst": "Calculate days between transactions per customer and channel",
    "code": "df['days_between'] = df.sort_values('date').groupby(['customer_id','channel'])['date'].diff().dt.days"
    },
    {
    "ctx": "product_id | name | price | cost | category | rating\n101 | Widget | 19.99 | 12.00 | A | 4.5\n102 | Gadget | 29.99 | 18.00 | B | 3.8\n103 | Tool | 14.99 | 9.00 | A | 4.2",
    "inst": "Calculate value score (rating/price) and category rank",
    "code": "df['value_score'] = df['rating'] / df['price']\ndf['category_rank'] = df.groupby('category')['value_score'].rank(ascending=False)"
    },
    {
    "ctx": "date | store | sales | returns | employees\n2023-01-01 | NY | 12000 | 1200 | 8\n2023-01-02 | CHI | 15000 | 750 | 10\n2023-01-03 | NY | 18000 | 900 | 9",
    "inst": "Calculate net sales per employee and return rate",
    "code": "df['net_sales'] = df['sales'] - df['returns']\ndf['sales_per_employee'] = df['net_sales'] / df['employees']\ndf['return_rate'] = df['returns'] / df['sales'] * 100"
    },
    {
    "ctx": "employee_id | name | salary | department | start_date\nE101 | John | 75000 | Sales | 2018-05-15\nE102 | Sarah | 82000 | Marketing | 2020-01-10\nE103 | Mike | 68000 | IT | 2016-11-30",
    "inst": "Calculate tenure in years and salary growth per year (assuming starting at 50k)",
    "code": "df['tenure'] = (pd.Timestamp.today() - pd.to_datetime(df['start_date'])).dt.days / 365\ndf['annual_growth'] = (df['salary'] - 50000) / df['tenure']"
    },
    {
    "ctx": "order_id | customer_id | items | subtotal | discount | shipping\n1001 | 101 | 3 | 45.99 | 0.1 | 5.99\n1002 | 102 | 1 | 12.50 | 0.0 | 3.99\n1003 | 101 | 5 | 87.25 | 0.15 | 0.00",
    "inst": "Calculate net revenue and discount effectiveness",
    "code": "df['net_revenue'] = df['subtotal'] * (1 - df['discount']) - df['shipping']\ndf['discount_effect'] = (df['subtotal'] * df['discount']) / (df['items'] + 1)"
    },
    {
    "ctx": "city | population | area_sq_mi | metro_area\nNY | 8500000 | 302.6 | yes\nLA | 3900000 | 468.7 | yes\nCHI | 2700000 | 227.6 | no",
    "inst": "Calculate density and flag major metros (density > 10k and metro)",
    "code": "df['density'] = df['population'] / df['area_sq_mi']\ndf['major_metro'] = (df['density'] > 10000) & (df['metro_area'] == 'yes')"
    },
    {
    "ctx": "student_id | test1 | test2 | test3 | improvement_goal\nS101 | 85 | 92 | 88 | 5\nS102 | 72 | 85 | 82 | 8\nS103 | 90 | 85 | 92 | 3",
    "inst": "Calculate actual improvement and goal achievement",
    "code": "df['improvement'] = df['test3'] - df['test1']\ndf['met_goal'] = df['improvement'] >= df['improvement_goal']"
    },
    {
    "ctx": "date | product | sales | price | inventory\n2023-01-01 | A | 1200 | 19.99 | 5000\n2023-01-02 | B | 1500 | 29.99 | 3000\n2023-01-03 | A | 1800 | 19.99 | 3200",
    "inst": "Calculate days of inventory remaining and restock flag (<30 days)",
    "code": "df['days_remaining'] = df['inventory'] / (df['sales'] / 30)\ndf['needs_restock'] = df['days_remaining'] < 30"
    },
    {
    "ctx": "employee_id | name | base_salary | bonus | department | rating\nE101 | John | 75000 | 5000 | Sales | 4.5\nE102 | Sarah | 82000 | 3000 | Marketing | 4.2\nE103 | Mike | 68000 | 7000 | IT | 3.8",
    "inst": "Calculate total comp and performance ratio (comp vs dept avg)",
    "code": "df['total_comp'] = df['base_salary'] + df['bonus']\ndf['performance_ratio'] = df['total_comp'] / df.groupby('department')['total_comp'].transform('mean') * (df['rating'] / 5)"
    },
    {
    "ctx": "transaction_id | customer_id | amount | date | loyalty_tier\nT1001 | 101 | 120.50 | 2023-01-15 | gold\nT1002 | 102 | 85.75 | 2023-02-10 | silver\nT1003 | 101 | 210.00 | 2023-03-01 | gold",
    "inst": "Calculate 30-day customer spend and loyalty multiplier",
    "code": "df['30day_spend'] = df.groupby('customer_id')['amount'].rolling('30D', on='date').sum().reset_index(level=0, drop=True)\ndf['loyalty_multiplier'] = df['loyalty_tier'].map({'gold':1.2, 'silver':1.1, 'bronze':1.0})"
    },
    {
    "ctx": "product_id | name | price | cost | category | units_sold\n101 | Widget | 19.99 | 12.00 | A | 1200\n102 | Gadget | 29.99 | 18.00 | B | 850\n103 | Tool | 14.99 | 9.00 | A | 1500",
    "inst": "Calculate profit and market share within category",
    "code": "df['profit'] = (df['price'] - df['cost']) * df['units_sold']\ndf['category_share'] = df['profit'] / df.groupby('category')['profit'].transform('sum') * 100"
    },
    {
    "ctx": "date | store | revenue | expenses | sq_ft\n2023-01-01 | NY | 12000 | 8500 | 5000\n2023-01-02 | CHI | 15000 | 9200 | 4500\n2023-01-03 | NY | 18000 | 10500 | 5000",
    "inst": "Calculate revenue per sqft and profit margin",
    "code": "df['rev_per_sqft'] = df['revenue'] / df['sq_ft']\ndf['profit_margin'] = (df['revenue'] - df['expenses']) / df['revenue'] * 100"
    },
    {
    "ctx": "student_id | name | grade | test1 | test2 | test3 | prev_avg\nS101 | Alice | A | 85 | 92 | 88 | 82\nS102 | Bob | B | 72 | 85 | 82 | 75\nS103 | Carol | A | 90 | 85 | 92 | 88",
    "inst": "Calculate improvement from previous average and growth rate",
    "code": "df['current_avg'] = df[['test1','test2','test3']].mean(axis=1)\ndf['improvement'] = df['current_avg'] - df['prev_avg']\ndf['growth_rate'] = df['improvement'] / df['prev_avg'] * 100"
    },
    {
    "ctx": "order_id | customer_id | items | subtotal | tax | shipping | date\n1001 | 101 | 3 | 45.99 | 3.68 | 5.99 | 2023-01-15\n1002 | 102 | 1 | 12.50 | 1.00 | 3.99 | 2023-02-10\n1003 | 101 | 5 | 87.25 | 6.98 | 0.00 | 2023-03-01",
    "inst": "Calculate total and days since customer's last order",
    "code": "df['total'] = df['subtotal'] + df['tax'] + df['shipping']\ndf['days_since_last'] = df.groupby('customer_id')['date'].diff().dt.days"
    },
    {
    "ctx": "city | population | median_age | median_income | state\nNY | 8500000 | 36.2 | 75000 | NY\nLA | 3900000 | 34.5 | 65000 | CA\nCHI | 2700000 | 35.1 | 72000 | IL",
    "inst": "Calculate income per capita and state ranking",
    "code": "df['income_per_capita'] = df['median_income'] / df['population'] * 100000\ndf['state_rank'] = df.groupby('state')['median_income'].rank(ascending=False)"
    },
    {
    "ctx": "employee_id | name | salary | department | tenure | remote\nE101 | John | 75000 | Sales | 5 | no\nE102 | Sarah | 82000 | Marketing | 3 | yes\nE103 | Mike | 68000 | IT | 7 | yes",
    "inst": "Calculate adjusted salary (remote +10%) and tenure group",
    "code": "df['adjusted_salary'] = df['salary'] * np.where(df['remote'] == 'yes', 1.1, 1.0)\ndf['tenure_group'] = pd.cut(df['tenure'], bins=[0,3,5,10], labels=['junior','mid','senior'])"
    },
    {
    "ctx": "product_id | name | price | cost | category | rating | units_sold\n101 | Widget | 19.99 | 12.00 | A | 4.5 | 1200\n102 | Gadget | 29.99 | 18.00 | B | 3.8 | 850\n103 | Tool | 14.99 | 9.00 | A | 4.2 | 1500",
    "inst": "Calculate ROI and quality-adjusted ROI",
    "code": "df['roi'] = (df['price'] - df['cost']) / df['cost'] * 100\ndf['quality_roi'] = df['roi'] * (df['rating'] / 5)"
    },
    {
    "ctx": "date | store | sales | returns | customers | employees\n2023-01-01 | NY | 12000 | 1200 | 850 | 8\n2023-01-02 | CHI | 15000 | 750 | 920 | 10\n2023-01-03 | NY | 18000 | 900 | 1050 | 9",
    "inst": "Calculate sales per employee and conversion rate",
    "code": "df['sales_per_employee'] = df['sales'] / df['employees']\ndf['conversion_rate'] = df['customers'] / (df['sales'] / df['sales'].mean())"
    },
    {
    "ctx": "student_id | name | grade | test1 | test2 | test3 | prev_score\nS101 | Alice | A | 85 | 92 | 88 | 82\nS102 | Bob | B | 72 | 85 | 82 | 75\nS103 | Carol | A | 90 | 85 | 92 | 88",
    "inst": "Calculate standard deviation and consistency flag (stdev < 5)",
    "code": "df['stdev'] = df[['test1','test2','test3']].std(axis=1)\ndf['consistent'] = df['stdev'] < 5"
    },
    {
    "ctx": "order_id | customer_id | items | subtotal | date | channel\n1001 | 101 | 3 | 45.99 | 2023-01-15 | web\n1002 | 102 | 1 | 12.50 | 2023-02-10 | mobile\n1003 | 101 | 5 | 87.25 | 2023-03-01 | web",
    "inst": "Calculate average order value by channel and customer",
    "code": "df['channel_avg'] = df.groupby('channel')['subtotal'].transform('mean')\ndf['customer_avg'] = df.groupby('customer_id')['subtotal'].transform('mean')"
    },
    {
    "ctx": "city | population | area | public_transit_score | bike_score\nNY | 8500000 | 302.6 | 85 | 72\nLA | 3900000 | 468.7 | 68 | 65\nCHI | 2700000 | 227.6 | 78 | 82",
    "inst": "Calculate mobility score and density tier",
    "code": "df['mobility_score'] = (df['public_transit_score'] * 0.6 + df['bike_score'] * 0.4)\ndf['density_tier'] = pd.qcut(df['population'] / df['area'], q=3, labels=['low','medium','high'])"
    },
    {
    "ctx": "employee_id | name | salary | department | projects | rating\nE101 | John | 75000 | Sales | 12 | 4.5\nE102 | Sarah | 82000 | Marketing | 8 | 4.2\nE103 | Mike | 68000 | IT | 15 | 3.8",
    "inst": "Calculate productivity score and performance tier",
    "code": "df['productivity'] = df['projects'] * (df['rating'] / 5)\ndf['performance_tier'] = pd.qcut(df['productivity'], q=3, labels=['low','medium','high'])"
    },
    {
    "ctx": "product_id | name | price | cost | category | rating | units_sold\n101 | Widget | 19.99 | 12.00 | A | 4.5 | 1200\n102 | Gadget | 29.99 | 18.00 | B | 3.8 | 850\n103 | Tool | 14.99 | 9.00 | A | 4.2 | 1500",
    "inst": "Calculate profit per unit and customer satisfaction score",
    "code": "df['profit_per_unit'] = df['price'] - df['cost']\ndf['satisfaction_score'] = df['rating'] * 20 + (df['units_sold'] / df['units_sold'].max() * 20)"
    },
    {
    "ctx": "date | store | sales | returns | customers | day_of_week\n2023-01-01 | NY | 12000 | 1200 | 850 | Sunday\n2023-01-02 | CHI | 15000 | 750 | 920 | Monday\n2023-01-03 | NY | 18000 | 900 | 1050 | Tuesday",
    "inst": "Calculate net sales and weekday/weekend flag",
    "code": "df['net_sales'] = df['sales'] - df['returns']\ndf['is_weekend'] = df['day_of_week'].isin(['Saturday','Sunday'])"
    },
    {
    "ctx": "student_id | name | grade | test1 | test2 | test3 | attendance\nS101 | Alice | A | 85 | 92 | 88 | 95\nS102 | Bob | B | 72 | 85 | 82 | 88\nS103 | Carol | A | 90 | 85 | 92 | 92",
    "inst": "Calculate final grade with attendance penalty (<90% loses 5 points)",
    "code": "df['raw_avg'] = df[['test1','test2','test3']].mean(axis=1)\ndf['final_grade'] = np.where(df['attendance'] < 90, df['raw_avg'] - 5, df['raw_avg'])"
    },
    {
    "ctx": "order_id | customer_id | items | subtotal | date | promo\n1001 | 101 | 3 | 45.99 | 2023-01-15 | yes\n1002 | 102 | 1 | 12.50 | 2023-02-10 | no\n1003 | 101 | 5 | 87.25 | 2023-03-01 | yes",
    "inst": "Calculate days between orders and promo effectiveness",
    "code": "df['days_between'] = df.groupby('customer_id')['date'].diff().dt.days\ndf['promo_effect'] = df.groupby('promo')['subtotal'].transform('mean') / df['subtotal'].mean()"
    },
    {
    "ctx": "city | population | median_age | median_income | state | coastal\nNY | 8500000 | 36.2 | 75000 | NY | yes\nLA | 3900000 | 34.5 | 65000 | CA | yes\nCHI | 2700000 | 35.1 | 72000 | IL | no",
    "inst": "Calculate income to age ratio and coastal premium flag",
    "code": "df['income_age_ratio'] = df['median_income'] / df['median_age']\ndf['coastal_premium'] = (df['coastal'] == 'yes') & (df['median_income'] > 70000)"
    },
    {
    "ctx": "employee_id | name | salary | department | tenure | remote\nE101 | John | 75000 | Sales | 5 | no\nE102 | Sarah | 82000 | Marketing | 3 | yes\nE103 | Mike | 68000 | IT | 7 | yes",
    "inst": "Calculate salary adjusted for tenure and remote status",
    "code": "df['tenure_adjustment'] = 1 + (df['tenure'] * 0.02)\ndf['remote_adjustment'] = np.where(df['remote'] == 'yes', 1.1, 1.0)\ndf['adjusted_salary'] = df['salary'] * df['tenure_adjustment'] * df['remote_adjustment']"
    },
    {
    "ctx": "product_id | name | price | cost | category | rating | units_sold | warranty\n101 | Widget | 19.99 | 12.00 | A | 4.5 | 1200 | 1\n102 | Gadget | 29.99 | 18.00 | B | 3.8 | 850 | 2\n103 | Tool | 14.99 | 9.00 | A | 4.2 | 1500 | 1",
    "inst": "Calculate warranty-adjusted profit and value score",
    "code": "df['warranty_profit'] = (df['price'] - df['cost']) * (1 + (1 / df['warranty']))\ndf['value_score'] = (df['rating'] * 20) / (df['price'] * df['warranty'])"
    },
    {
    "ctx": "date | store | sales | returns | customers | employees | sq_ft\n2023-01-01 | NY | 12000 | 1200 | 850 | 8 | 5000\n2023-01-02 | CHI | 15000 | 750 | 920 | 10 | 4500\n2023-01-03 | NY | 18000 | 900 | 1050 | 9 | 5000",
    "inst": "Calculate efficiency metrics per sqft and per employee",
    "code": "df['sales_per_sqft'] = df['sales'] / df['sq_ft']\ndf['sales_per_employee'] = df['sales'] / df['employees']\ndf['customers_per_sqft'] = df['customers'] / df['sq_ft']"
    },
    {
    "ctx": "student_id | name | grade | test1 | test2 | test3 | prev_avg | attendance\nS101 | Alice | A | 85 | 92 | 88 | 82 | 95\nS102 | Bob | B | 72 | 85 | 82 | 75 | 88\nS103 | Carol | A | 90 | 85 | 92 | 88 | 92",
    "inst": "Calculate comprehensive performance score",
    "code": "df['current_avg'] = df[['test1','test2','test3']].mean(axis=1)\ndf['improvement'] = df['current_avg'] - df['prev_avg']\ndf['performance_score'] = (df['current_avg']*0.6 + df['improvement']*0.2 + df['attendance']*0.2)"
    },
    {
    "ctx": "order_id | customer_id | items | subtotal | date | channel | device\n1001 | 101 | 3 | 45.99 | 2023-01-15 | online | desktop\n1002 | 102 | 1 | 12.50 | 2023-02-10 | mobile | phone\n1003 | 101 | 5 | 87.25 | 2023-03-01 | online | tablet",
    "inst": "Calculate device-specific conversion rates and AOV",
    "code": "df['aov'] = df['subtotal'] / df['items']\ndf['device_conversion'] = df.groupby('device')['subtotal'].transform('count') / df['subtotal'].count() * 100"
    },
    {
    "ctx": "city | population | median_age | median_income | state | coastal | public_transit\nNY | 8500000 | 36.2 | 75000 | NY | yes | 85\nLA | 3900000 | 34.5 | 65000 | CA | yes | 68\nCHI | 2700000 | 35.1 | 72000 | IL | no | 78",
    "inst": "Calculate livability score and income-transit ratio",
    "code": "df['livability'] = (df['median_income']/1000 * 0.5) + (df['public_transit'] * 0.3) + (df['coastal'].map({'yes':20, 'no':10}) * 0.2)\ndf['income_transit_ratio'] = df['median_income'] / df['public_transit']"
    },
    {
    "ctx": "employee_id | name | salary | department | tenure | remote | certifications\nE101 | John | 75000 | Sales | 5 | no | 3\nE102 | Sarah | 82000 | Marketing | 3 | yes | 2\nE103 | Mike | 68000 | IT | 7 | yes | 5",
    "inst": "Calculate comprehensive employee value score",
    "code": "df['tenure_value'] = df['tenure'] * 1000\ndf['cert_value'] = df['certifications'] * 2000\ndf['remote_value'] = np.where(df['remote'] == 'yes', 5000, 0)\ndf['total_value'] = df['salary'] + df['tenure_value'] + df['cert_value'] + df['remote_value']"
    },
    {
    "ctx": "product_id | name | price | cost | category | rating | units_sold | warranty | eco_friendly\n101 | Widget | 19.99 | 12.00 | A | 4.5 | 1200 | 1 | yes\n102 | Gadget | 29.99 | 18.00 | B | 3.8 | 850 | 2 | no\n103 | Tool | 14.99 | 9.00 | A | 4.2 | 1500 | 1 | yes",
    "inst": "Calculate sustainability premium and comprehensive product score",
    "code": "df['sustainability_premium'] = df['eco_friendly'].map({'yes':1.1, 'no':1.0})\ndf['product_score'] = ((df['price'] - df['cost']) * 0.4 + (df['rating'] * 20) * 0.3 + (df['units_sold'] / df['units_sold'].max() * 100) * 0.2 + df['warranty'] * 0.1) * df['sustainability_premium']"
    },
    {
    "ctx": "date | store | sales | returns | customers | employees | sq_ft | day_type\n2023-01-01 | NY | 12000 | 1200 | 850 | 8 | 5000 | weekend\n2023-01-02 | CHI | 15000 | 750 | 920 | 10 | 4500 | weekday\n2023-01-03 | NY | 18000 | 900 | 1050 | 9 | 5000 | weekday",
    "inst": "Calculate day-type efficiency metrics and comparisons",
    "code": "df['weekday_sales'] = df.groupby('day_type')['sales'].transform('mean')\ndf['efficiency_ratio'] = df['sales'] / (df['employees'] * df['sq_ft'])\ndf['weekday_ratio'] = df['sales'] / df['weekday_sales']"
    },
    {
        "ctx": "date | temperature | humidity\n2023-01-01 | 32.5 | 65\n2023-01-02 | 28.3 | 70\n2023-01-03 | 42.1 | 55",
        "inst": "Calculate heat index using temperature and humidity",
        "code": "df['heat_index'] = 0.5 * (df['temperature'] + 61.0 + ((df['temperature']-68.0)*1.2) + (df['humidity']*0.094))"
    },
    {
        "ctx": "product | price_2022 | price_2023\nA | 19.99 | 21.99\nB | 29.99 | 31.49\nC | 14.99 | 15.99",
        "inst": "Calculate price inflation rate",
        "code": "df['inflation_rate'] = ((df['price_2023'] - df['price_2022']) / df['price_2022']) * 100"
    },
    {
        "ctx": "customer_id | purchase_date | amount\n101 | 2023-01-15 | 120.50\n102 | 2023-02-10 | 85.75\n101 | 2023-03-01 | 210.00",
        "inst": "Calculate days since last purchase for each customer",
        "code": "df['days_since_last'] = df.groupby('customer_id')['purchase_date'].diff().dt.days"
    },
    {
        "ctx": "employee | hours_worked | hourly_rate | overtime_hours\nJohn | 40 | 25.00 | 5\nSarah | 35 | 30.00 | 0\nMike | 45 | 28.00 | 10",
        "inst": "Calculate total pay with double time for overtime",
        "code": "df['total_pay'] = (df['hours_worked'] - df['overtime_hours']) * df['hourly_rate'] + df['overtime_hours'] * df['hourly_rate'] * 2"
    },
    {
        "ctx": "transaction_id | amount | currency | exchange_rate\nT1001 | 120.50 | EUR | 1.12\nT1002 | 85.75 | GBP | 1.35\nT1003 | 210.00 | EUR | 1.12",
        "inst": "Convert all amounts to USD",
        "code": "df['amount_usd'] = df['amount'] * df['exchange_rate']"
    },
    {
        "ctx": "student | test1 | test2 | test3 | test4\nAlice | 85 | 92 | 88 | 90\nBob | 78 | 85 | 82 | 80\nCarol | 90 | 85 | 92 | 88",
        "inst": "Calculate best 3 out of 4 test scores",
        "code": "df['top3_avg'] = df[['test1','test2','test3','test4']].apply(lambda x: np.mean(sorted(x, reverse=True)[:3]), axis=1)"
    },
    {
        "ctx": "date | product | units_sold | unit_price\n2023-01-01 | A | 1200 | 19.99\n2023-01-02 | B | 1500 | 29.99\n2023-01-03 | A | 1800 | 19.99",
        "inst": "Calculate 7-day rolling revenue average",
        "code": "df['revenue'] = df['units_sold'] * df['unit_price']\ndf['7day_avg_revenue'] = df['revenue'].rolling(7).mean()"
    },
    {
        "ctx": "city | population | area | country\nNY | 8500000 | 302.6 | US\nLA | 3900000 | 468.7 | US\nLN | 8900000 | 607.0 | UK",
        "inst": "Calculate population density and flag high-density cities",
        "code": "df['density'] = df['population'] / df['area']\ndf['high_density'] = df['density'] > 10000"
    },
    {
        "ctx": "employee_id | name | salary | department | tenure\nE101 | John | 75000 | Sales | 5\nE102 | Sarah | 82000 | Marketing | 3\nE103 | Mike | 68000 | IT | 7",
        "inst": "Calculate salary percentile by department and tenure group",
        "code": "df['tenure_group'] = pd.cut(df['tenure'], bins=[0,3,5,10])\ndf['salary_percentile'] = df.groupby(['department','tenure_group'])['salary'].rank(pct=True) * 100"
    },
    {
        "ctx": "order_id | customer_id | items | total | discount_type\n1001 | 101 | 3 | 45.99 | percentage\n1002 | 102 | 1 | 12.50 | fixed\n1003 | 101 | 5 | 87.25 | percentage",
        "inst": "Calculate discount amount based on discount type",
        "code": "df['discount_amount'] = np.where(df['discount_type'] == 'percentage', df['total'] * 0.1, 2.00)"
    },
    {
        "ctx": "date | revenue | expenses | category | region\n2023-01-01 | 12000 | 8500 | retail | east\n2023-01-02 | 15000 | 9200 | online | west\n2023-01-03 | 18000 | 10500 | retail | east",
        "inst": "Calculate profit margin by region and category",
        "code": "df['profit'] = df['revenue'] - df['expenses']\ndf['margin'] = df.groupby(['region','category'])['profit'].transform(lambda x: x / x.sum())"
    },
    {
        "ctx": "product_id | name | price | cost | stock | lead_time\n101 | Widget | 19.99 | 12.00 | 45 | 7\n102 | Gadget | 29.99 | 18.00 | 12 | 14\n103 | Tool | 14.99 | 9.00 | 0 | 10",
        "inst": "Calculate reorder point (daily sales = stock/30)",
        "code": "df['daily_sales'] = df['stock'] / 30\ndf['reorder_point'] = df['daily_sales'] * df['lead_time']"
    },
    {
        "ctx": "student_id | name | grade | test1 | test2 | test3\nS101 | Alice | A | 85 | 92 | 88\nS102 | Bob | B | 78 | 85 | 82\nS103 | Carol | A | 90 | 85 | 92",
        "inst": "Calculate grade improvement from first to last test",
        "code": "df['improvement'] = (df['test3'] - df['test1']) / df['test1'] * 100"
    },
    {
        "ctx": "transaction_id | amount | date | customer_id | loyalty_points\nT1001 | 120.50 | 2023-01-15 | 101 | 500\nT1002 | 85.75 | 2023-02-10 | 102 | 200\nT1003 | 210.00 | 2023-03-01 | 101 | 750",
        "inst": "Calculate points per dollar spent",
        "code": "df['points_per_dollar'] = df['loyalty_points'] / df['amount']"
    },
    {
        "ctx": "city | jan_temp | jul_temp | population | elevation\nNY | 32.5 | 78.3 | 8500000 | 33\nLA | 58.1 | 88.7 | 3900000 | 285\nCHI | 28.3 | 82.5 | 2700000 | 594",
        "inst": "Calculate temperature adjusted for elevation",
        "code": "df['elevation_adj'] = df['jul_temp'] - (df['elevation'] * 0.003)"
    },
    {
        "ctx": "employee | base_salary | bonus | department | rating\nJohn | 75000 | 5000 | Sales | 4.5\nSarah | 82000 | 3000 | Marketing | 4.2\nMike | 68000 | 7000 | IT | 3.8",
        "inst": "Calculate performance-adjusted bonus",
        "code": "df['adj_bonus'] = df['bonus'] * (df['rating'] / 5)"
    },
    {
        "ctx": "date | product | units_sold | unit_price | promo_flag\n2023-01-01 | A | 1200 | 19.99 | 1\n2023-01-02 | B | 1500 | 29.99 | 0\n2023-01-03 | A | 1800 | 19.99 | 1",
        "inst": "Calculate promo lift compared to non-promo days",
        "code": "df['promo_lift'] = df.groupby('product')['units_sold'].transform(lambda x: x[x['promo_flag']==1].mean() / x[x['promo_flag']==0].mean())"
    },
    {
        "ctx": "customer_id | join_date | last_purchase | total_spend\n101 | 2022-05-15 | 2023-03-01 | 1200\n102 | 2023-01-10 | 2023-02-10 | 450\n103 | 2021-11-30 | 2023-01-15 | 2300",
        "inst": "Calculate customer lifetime in days and spend per day",
        "code": "df['lifetime_days'] = (pd.to_datetime(df['last_purchase']) - pd.to_datetime(df['join_date'])).dt.days\ndf['spend_per_day'] = df['total_spend'] / df['lifetime_days']"
    },
    {
        "ctx": "product_id | name | category | price | rating | reviews\n101 | Widget | A | 19.99 | 4.5 | 120\n102 | Gadget | B | 29.99 | 3.8 | 85\n103 | Tool | A | 14.99 | 4.2 | 150",
        "inst": "Calculate weighted rating (Bayesian average)",
        "code": "avg_rating = df['rating'].mean()\ndf['weighted_rating'] = (df['reviews'] * df['rating'] + 100 * avg_rating) / (df['reviews'] + 100)"
    },
    {
        "ctx": "date | revenue | expenses | category | holiday_flag\n2023-01-01 | 12000 | 8500 | retail | 1\n2023-01-02 | 15000 | 9200 | online | 0\n2023-01-03 | 18000 | 10500 | retail | 0",
        "inst": "Calculate holiday vs non-holiday averages",
        "code": "df['holiday_avg'] = df.groupby('holiday_flag')['revenue'].transform('mean')"
    }
]